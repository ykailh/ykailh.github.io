<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ykailh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-17T01:35:07.754Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ykailh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web基础之CSS</title>
    <link href="http://yoursite.com/2020/09/02/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/"/>
    <id>http://yoursite.com/2020/09/02/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/</id>
    <published>2020-09-02T09:30:20.000Z</published>
    <updated>2020-09-17T01:35:07.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Web基础系列</strong>主要对Java开发中Web相关的内容(如<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等)进行<strong>最基本的讲解</strong>，本系列其他文章请参考<a href="https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/">Web基础</a> 。</p><p>​    本文主要对<code>CSS</code>进行简单的了解，想要更详细的了解HTML可以参考这个教程<a href="https://www.runoob.com/css/css-tutorial.html">CSS教程</a> 。</p><a id="more"></a><h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><p>​    <strong>CSS</strong>的全称为（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets）<strong>层叠样式表</strong>，它决定了HTML元素的显示方式。CSS 规则由两个主要部分构成：<strong>选择器</strong>，以及<strong>一条或多条声明</strong>:</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/CSS%E6%A0%BC%E5%BC%8F.jpg" alt="CSS格式"></p><h2 id="CSS的插入"><a href="#CSS的插入" class="headerlink" title="CSS的插入"></a>CSS的插入</h2><p>​    根据CSS<strong>插入</strong>HTML文件的<strong>方式不同</strong>，分为<strong>外部样式表</strong>、<strong>内部样式表</strong>、<strong>内联样式</strong>。不同的方式有不同的插入格式。</p><ul><li><p><strong>外部样式表</strong></p><p>​    将CSS语句写在一个后缀名为<code>.css</code>的文件中，然后在<code>&lt;head&gt;</code>标签内通过<code>&lt;link&gt;</code>标签引入CSS文件，<code>&lt;link&gt;</code>中的<code>rel</code>属性设置为<code>&quot;stylesheet&quot;</code>，<code>href</code>设置为CSS文件的路径。</p><p>CSS文件示例(mystyle.css)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><p>HTML引入CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS外部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内部样式表</strong></p><p>​    将CSS语句直接写在HTML文件<code>&lt;head&gt;</code>标签内的<code>&lt;style&gt;</code>标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS内部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内联样式</strong></p><p>直接通过标签的<code>style</code>属性定义该标签内容的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS内联样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&quot;color:red&quot;</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">&quot;font-size:30px&quot;</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面三种方式都可以实现相同的效果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E6%A0%B7%E5%BC%8F%E8%A1%A8.png" alt="样式表"></p><p>这三个样式同时存在时的优先级为：<strong>内联样式</strong>  &gt; <strong>内部样式表</strong> &gt; <strong>外部样式表</strong></p><p>保持mystyle.css不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>样式优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:yellow;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&quot;color:green&quot;</span>&gt;</span>测试优先级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="样式优先级"></p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>​    主要介绍以下几种css选择器：</p><ul><li><p>标签选择器</p><p>格式为：<code>标签名&#123;声明..&#125;</code>，对所有同名标签有效上面演示中均为标签选择器</p></li><li><p>类选择器</p><p>格式为：<code>.类名&#123;声明..&#125;</code>,对所有标签中属性<code>class</code>的值为该类名的元素有效。</p><p>可以使用<code>标签名.类名&#123;声明&#125;</code>来选择该标签内<code>class</code>的值为该类名的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择class值为classname的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.classname</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择p标签中class值为classname的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-class">.a</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;classname&quot;</span>&gt;</span>class为classname的h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;classname&quot;</span>&gt;</span>class为classname的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;a&quot;</span>&gt;</span>class为a的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="类选择器"></p></li><li><p>id选择器</p><p>格式为：<code>#id值&#123;声明..&#125;</code>，只对id为此id值的元素有效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择id值为p1的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#p1</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择id值为p2的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#p2</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>id值为p1的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>id值为p2的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/id%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="id选择器"></p></li><li><p>属性选择器</p><p>格式为：<code>[属性名]&#123;声明..&#125;</code>选择具有该属性的元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择具有id属性的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[id]</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择具有class属性的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[class]</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>id值为p1的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>id值为p2的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="属性选择器"></p></li><li><p>组合选择器</p><ul><li><code>标签(名)1 标签(名)2</code>，选择标签1元素内的标签2元素。</li><li><code>标签(名)1&gt;标签(名)2</code>，选择标签1元素内的标签2元素中的直接子元素。</li><li><code>标签(名)1+标签(名)2</code>，选择紧接在标签1元素后的元素，且二者有相同父元素.</li><li><code>标签(名)1~标签(名)2</code>，选择标签1元素后的所有标签2元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*以div p 为例，后续演示只有此处不同，省略代码*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div前的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div内的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>span内的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div后的p元素1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div后的p元素2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>div p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A81.png" alt="组合选择器1"></p><p><code>div&gt;p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A82.png" alt="组合选择器2"></p><p><code>div+p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A83.png" alt="组合选择器3"></p><p><code>div~p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A84.png" alt="组合选择器4"></p></li></ul><h2 id="CSS常用样式"><a href="#CSS常用样式" class="headerlink" title="CSS常用样式"></a>CSS常用样式</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Web基础系列&lt;/strong&gt;主要对Java开发中Web相关的内容(如&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;等)进行&lt;strong&gt;最基本的讲解&lt;/strong&gt;，本系列其他文章请参考&lt;a href=&quot;https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/&quot;&gt;Web基础&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​    本文主要对&lt;code&gt;CSS&lt;/code&gt;进行简单的了解，想要更详细的了解HTML可以参考这个教程&lt;a href=&quot;https://www.runoob.com/css/css-tutorial.html&quot;&gt;CSS教程&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之HTML</title>
    <link href="http://yoursite.com/2020/09/01/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/"/>
    <id>http://yoursite.com/2020/09/01/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/</id>
    <published>2020-09-01T09:16:20.000Z</published>
    <updated>2020-09-08T07:14:09.727Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>Web基础系列</strong>主要对Java开发中Web相关的内容(如<code>HTML</code>、<code>CSS</code>、<code>JavaScrip</code>t等)进行<strong>最基本的讲解</strong>，本系列其他文章请参考<a href="https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/">Web基础</a> 。</p><p>​    本文主要对<code>HTML</code>进行简单的了解，想要更详细的了解HTML可以参考这个教程<a href="https://www.runoob.com/html/html-tutorial.html">HTML教程</a> 。</p><p>​                                                                                                                                                        <strong><em>基于HTML5演示</em></strong></p><a id="more"></a><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><p>​    <strong>HTML</strong>的全称为（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）<strong>超文本标记语言</strong>，是用来描述网页的一种标记语言。HTML文件以<code>.html</code> 或 <code>.htm</code>结尾，最基本的HTML文件主要包括以下几个部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其中：</strong></p><ul><li><p><code>&lt;!DOCTYPE html&gt;    </code>为<strong>HTML5</strong>的<strong>版本声明</strong>，其他版本的HTML的声明会略有不同</p></li><li><p><code>&lt;html&gt; &lt;/html&gt;</code> 为HTML的<strong>根标签</strong>。</p></li><li><p><code>&lt;head&gt; &lt;/head&gt;</code> 为头部标签，包含了HTML文件的主要信息。可以在头部标签中添加以下标签。</p><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/tag-head.html">&lt;head&gt;</a></td><td align="left">定义了文档的信息</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-title.html">&lt;title&gt;</a></td><td align="left">定义了文档的标题</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-base.html">&lt;base&gt;</a></td><td align="left">定义了页面链接标签的默认链接地址</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-link.html">&lt;link&gt;</a></td><td align="left">定义了一个文档和外部资源之间的关系</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-meta.html">&lt;meta&gt;</a></td><td align="left">定义了HTML文档中的元数据</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-script.html">&lt;script&gt;</a></td><td align="left">定义了客户端的脚本文件</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-style.html">&lt;style&gt;</a></td><td align="left">定义了HTML文档的样式文件</td></tr></tbody></table></li><li><p><code>&lt;body&gt; &lt;/body&gt;</code> 包含HTML的主要内容，例如示例中的<code>Hello World!</code>，使用浏览器打开的效果为：</p><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAHTML.png" alt="我的第一个HTML"></p></li></ul><h2 id="HTML中的标签"><a href="#HTML中的标签" class="headerlink" title="HTML中的标签"></a>HTML中的标签</h2><p>​    HTML标签通常以<strong>开始标签</strong>（<code>&lt;标签名&gt;，如&lt;p&gt;</code>）起始，以<strong>结束标签</strong>（<code>&lt;/标签名&gt;，如&lt;/p&gt;</code>）终止，<strong>标签的内容</strong>写在开始标签与结束标签之间，开始标签与结束标签以成对的形式出现。具有空内容的标签称为<strong>空标签</strong>（<code>&lt;标签名/&gt; 如 &lt;br/&gt;</code>），空标签的结束标记在开始标签中，所以又称为<strong>自结束标签</strong>。</p><p>​    在标签内还可以添加标签的属性，一般出现在开始标签当中，如<code>&lt;div id = &quot;1&quot;&gt;</code>，每个标签可以添加的属性都各不相同，下面为适用于大多数 HTML 元素的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="left">id</td><td align="left">定义元素的唯一id</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内样式（inline style）</td></tr><tr><td align="left">title</td><td align="left">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><p>​    以下为一些常用的标签演示，更详细的标签列表请参考<a href="https://www.runoob.com/tags/ref-byfunc.html">HTML标签列表</a>。</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>​    <code>&lt;h1&gt; ~ &lt;h6&gt;</code>,标签分别代表<strong>1~6级标题</strong>，<strong>不同等级的标题</strong>对应着<strong>不同的字体大小</strong>，标题均有<strong>加粗效果</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>演示标题效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是普通文本的效果</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是h1的效果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是h2的效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是h3的效果<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是h4的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是h5的效果<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是h6的效果<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%A0%87%E9%A2%98%E6%95%88%E6%9E%9C.png" alt="标题效果"></p><h3 id="2-段落与换行"><a href="#2-段落与换行" class="headerlink" title="2.段落与换行"></a>2.段落与换行</h3><p>​    对应<code>&lt;p&gt;</code>与<code>&lt;br/&gt;</code>，其中换行标签属于自结束标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>段落与换行<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>对代码中对文字</span><br><span class="line">    换行是没有效果的，这是段落一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    需要使用换行符进行<span class="tag">&lt;<span class="name">br</span>/&gt;</span>这是换行效果</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>换行的间隔要大于普通的换行，这是段落二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落中依旧可以使用换行<span class="tag">&lt;<span class="name">br</span>/&gt;</span>这是段落三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%AE%B5%E8%90%BD%E4%B8%8E%E6%8D%A2%E8%A1%8C.png" alt="段落与换行"></p><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><p>​    列表分为<strong>有序列表</strong>（<code>&lt;ol&gt;</code>）与<strong>无序列表</strong>(<code>&lt;ul&gt;</code>)，使用<code>&lt;li&gt;</code>定义列表项。不同的<code>type</code>属性对应不同的样式</p><ul><li>有序列表默认为数字排序，type属性为<code>a/A</code>时为小写/大写字母排序，为<code>I</code>时为罗马数字。</li><li>无序列表默认为实心圆，type属性为<code>circle</code>时为空心圆，为<code>square</code>时为实心正方形。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>段落与换行<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>默认的有序、无序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>指定样式的有序、无序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> = <span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E5%88%97%E8%A1%A8.png" alt="列表"></p><h3 id="4-插入图片"><a href="#4-插入图片" class="headerlink" title="4.插入图片"></a>4.插入图片</h3><p>​    使用<code>&lt;img&gt;</code>标签插入图片，<code>&lt;img&gt;</code>标签是自结束标签，其最重要的属性为<code>src</code>，它指定插入图片的URL路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- title属性为鼠标悬停在图片范围内时的提示，alt属性为图片加载失败的提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>成功示例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/测试图片.png&quot;</span> <span class="attr">title</span> = <span class="string">&quot;鼠标悬停提示&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>失败示例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">src</span>=<span class="string">&quot;错误路径&quot;</span> &gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.png" alt="插入图片"></p><h3 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5.超链接"></a>5.超链接</h3><p>​    使用<code>&lt;a&gt;</code>标签定义超链接，其最重要的属性为<code>href</code>它指定链接目标的URL路径。标签内容为超链接的名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--主页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- target 属性定义了打开链接的方式，常用下面两个</span></span><br><span class="line"><span class="comment">        _self:在当前页面打开。</span></span><br><span class="line"><span class="comment">        _blank:在新页面打开。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;链接目标.html&quot;</span> <span class="attr">target</span> = <span class="string">&quot;_blank&quot;</span>&gt;</span> 这是一个超链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接目标页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>链接目标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是链接目标</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击前：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%B6%85%E9%93%BE%E6%8E%A5%E7%82%B9%E5%87%BB%E5%89%8D.png" alt="超链接点击前"></p><p>点击后：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%B6%85%E9%93%BE%E6%8E%A5%E7%82%B9%E5%87%BB%E5%90%8E.png" alt="超链接点击后"></p><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h3><p>​    表格由<code>&lt;table&gt;</code>标签来定义，使用<code>&lt;tr&gt;</code>定义行，在行中使用<code>th</code>定义表头，<code>td</code>定义单元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- border 表示边框宽度，width 为宽  height为长  align 表示位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1&quot;</span> <span class="attr">width</span> = <span class="string">&quot;500px&quot;</span> <span class="attr">height</span> = <span class="string">&quot;300px&quot;</span>  <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- colspan 表示跨列距离  rowspan表示跨行距离 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1 x 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2 x 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>31<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><h3 id="7-表单"><a href="#7-表单" class="headerlink" title="7.表单"></a>7.表单</h3><pre><code> 使用`&lt;form&gt;`制作表单，`&lt;input&gt;`表单项。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- action属性为提交的目标页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;提交页面.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- input 的不同type属性代表了不同的表单项样式 常用的有：</span></span><br><span class="line"><span class="comment">                 text：文本框</span></span><br><span class="line"><span class="comment">                  password：密码框</span></span><br><span class="line"><span class="comment">                radio：单选框</span></span><br><span class="line"><span class="comment">                checkbox：多选框</span></span><br><span class="line"><span class="comment">                  reset：重置按钮</span></span><br><span class="line"><span class="comment">                  submit：提交按钮</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- name属性才可以提交数据到目标位置 --&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- name属性相同的情况下视为同一范围内的选项 </span></span><br><span class="line"><span class="comment">            无value值时提交选中状态，有value值时提交value的值</span></span><br><span class="line"><span class="comment">            checked可以用来设置默认选中状态</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">              </span><br><span class="line">        爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>篮球</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>/&gt;</span>足球</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;volleyball&quot;</span>/&gt;</span>排球</span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 下拉框使用select定义 --&gt;</span></span><br><span class="line">    喜欢的明星：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fbb&quot;</span>&gt;</span>范冰冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zy&quot;</span>&gt;</span>杨颖<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zzy&quot;</span>&gt;</span>章子怡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按钮默认名称为重置/提交 可以通过value进行修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>提交页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>表单提交成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单效果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E5%8D%95.png" alt="表单"></p><p>提交后后：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4.png" alt="表单提交"></p><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>​    想要显示HTML的<strong>保留字符</strong>或<strong>特殊字符</strong>显示空格时需要使用到字符实体，HTML中的字符实体一般以<code>&amp;</code>符号开头，以<code>;</code>结尾，例如以下这些：需要注意的是字符实体是<strong>对大小写敏感</strong>的。</p><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">实体名称</th><th align="left">实体编号</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&nbsp;</td><td align="left">&#160;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&lt;</td><td align="left">&#60;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&gt;</td><td align="left">&#62;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;</td><td align="left">&#38;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&quot;</td><td align="left">&#34;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&apos; (IE不支持)</td><td align="left">&#39;</td></tr><tr><td align="left">￠</td><td align="left">分</td><td align="left">&cent;</td><td align="left">&#162;</td></tr><tr><td align="left">£</td><td align="left">镑</td><td align="left">&pound;</td><td align="left">&#163;</td></tr><tr><td align="left">¥</td><td align="left">人民币/日元</td><td align="left">&yen;</td><td align="left">&#165;</td></tr><tr><td align="left">€</td><td align="left">欧元</td><td align="left">&euro;</td><td align="left">&#8364;</td></tr><tr><td align="left">§</td><td align="left">小节</td><td align="left">&sect;</td><td align="left">&#167;</td></tr><tr><td align="left">©</td><td align="left">版权</td><td align="left">&copy;</td><td align="left">&#169;</td></tr><tr><td align="left">®</td><td align="left">注册商标</td><td align="left">&reg;</td><td align="left">&#174;</td></tr><tr><td align="left">™</td><td align="left">商标</td><td align="left">&trade;</td><td align="left">&#8482;</td></tr><tr><td align="left">×</td><td align="left">乘号</td><td align="left">&times;</td><td align="left">&#215;</td></tr><tr><td align="left">÷</td><td align="left">除号</td><td align="left">&divide;</td><td align="left">&#247;</td></tr></tbody></table><p>​    完整的HTML实体可以参考： <a href="https://www.runoob.com/tags/ref-entities.html">HTML 实体参考手册</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>字符实体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示小于号和大于号 --&gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span> br <span class="symbol">&amp;gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 在代码中编写的空格无法显示，想要显示需要使用字符实体 --&gt;</span></span><br><span class="line">    A            B <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    A<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>B</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.png" alt="字符实体"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>标签<strong>不区分大小写</strong>，但为了<strong>规范代码</strong>，请<strong>一律小写</strong>。</li><li>标签<strong>可以嵌套</strong>使用，但<strong>不可以交叉嵌套</strong>。</li><li>标签必须正确关闭，自结束标签为在起始标签中的标签名后加<code>/</code>虽然可以支持省略但不建议这样做，非自结束标签则记得写上结束标签。</li><li>属性必须要有值，且必须使用双引号，对于属性值中有双引号的情况可以使用单引号。</li><li>注释不能嵌套。</li><li>部分浏览器可以<strong>自动纠正</strong>一些不规范代码，如属性值无双引号，交叉嵌套的纠正等等，但一定<strong>不要依赖于这个功能</strong>。</li></ul><p><strong><em>以上内容仅作为入门，因为不是专业前端，所以可以在之后的学习中慢慢补充。</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;Web基础系列&lt;/strong&gt;主要对Java开发中Web相关的内容(如&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScrip&lt;/code&gt;t等)进行&lt;strong&gt;最基本的讲解&lt;/strong&gt;，本系列其他文章请参考&lt;a href=&quot;https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/&quot;&gt;Web基础&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​    本文主要对&lt;code&gt;HTML&lt;/code&gt;进行简单的了解，想要更详细的了解HTML可以参考这个教程&lt;a href=&quot;https://www.runoob.com/html/html-tutorial.html&quot;&gt;HTML教程&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​                                                                                                                                                        &lt;strong&gt;&lt;em&gt;基于HTML5演示&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之函数</title>
    <link href="http://yoursite.com/2020/08/22/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/22/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-22T11:38:46.000Z</published>
    <updated>2020-09-03T03:00:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>​    MySQL函数主要分为<strong>单行函数</strong>以及<strong>分组函数</strong>两种，其中单行函数又以作用对象不同分为字符串函数、数值函数等。以下按照类型进行演示。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><p>​    单行函数<strong>只对一行进行变换，每行返回一个结果</strong>，它的<strong>参数</strong>可以是一字段或一个表达式或一个值，可以<strong>嵌套使用</strong>。</p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><h4 id="1-查看ASCII-码、字符数、字节数"><a href="#1-查看ASCII-码、字符数、字节数" class="headerlink" title="1.查看ASCII 码、字符数、字节数"></a>1.查看ASCII 码、字符数、字节数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ASCII(s)</td><td>返回字符串 s 的第一个字符的 ASCII 码。</td></tr><tr><td>CHAR_LENGTH(s) / CHARACTER_LENGTH(s)</td><td>返回字符串 s 的字符数</td></tr><tr><td>LENGTH(s)</td><td>返回字符串 s 的字节数，与字符集有关</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ASCII(s) ,返回&quot;ykailh&quot;第一个字母的 ASCII 码</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ASCII</span>(<span class="string">&#x27;ykailh&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| ASCII(&#x27;ykailh&#x27;) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">|             121 |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CHAR_LENGTH(s)/CHARACTER_LENGTH(s)，返回&quot;张三&quot;的字符数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>),<span class="keyword">CHARACTER_LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line">| CHAR_LENGTH(&#x27;张三&#x27;)   | CHARACTER_LENGTH(&#x27;张三&#x27;)   |</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line">|                     2 |                          2 |</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LENGTH(s)，返回&quot;张三&quot;的字节数（UTF-8字符集）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| LENGTH(&#x27;张三&#x27;)   |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">|                6 |</span><br><span class="line">+<span class="comment">------------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串的拼接"><a href="#2-字符串的拼接" class="headerlink" title="2.字符串的拼接"></a>2.字符串的拼接</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>CONCAT(s1,s2…sn)</td><td>字符串 s1,s2 等多个字符串合并为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2…sn)</td><td>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td></tr><tr><td>LPAD(s1,len,s2)</td><td>在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len，若len小于s1的长度则裁剪掉超出len长度的部分。</td></tr><tr><td>RPAD(s1,len,s2)</td><td>在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len，若len小于s1的长度则裁剪掉超出len长度的部分。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CONCAT(s1,s2...sn)，拼接&#x27;hello&#x27;和&#x27;world&#x27;。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| CONCAT(&#x27;hello&#x27;,&#x27;world&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| helloworld              |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CONCAT_WS(x, s1,s2...sn)，拼接&#x27;ykailh&#x27;、&#x27;gethub&#x27;、&#x27;io&#x27;并以&#x27;.&#x27;作为间隔。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT_WS</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;ykailh&#x27;</span>,<span class="string">&#x27;gethub&#x27;</span>,<span class="string">&#x27;io&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| CONCAT_WS(&#x27;.&#x27;,&#x27;ykailh&#x27;,&#x27;gethub&#x27;,&#x27;io&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| ykailh.gethub.io                      |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LPAD(s1,len,s2) ,在&#x27;abc&#x27;前拼接&#x27;x&#x27;直到字符串的长度为6以及2.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;x&#x27;</span>),<span class="keyword">LPAD</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| LPAD(&#x27;abc&#x27;,6,&#x27;x&#x27;) | LPAD(&#x27;abc&#x27;,2,&#x27;x&#x27;) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| xxxabc            | ab                |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RPAD(s1,len,s2),在&#x27;abc&#x27;前拼接&#x27;x&#x27;直到字符串的长度为6以及2.</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;abc&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;x&#x27;</span>),RPAD(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| RPAD(&#x27;abc&#x27;,6,&#x27;x&#x27;) | RPAD(&#x27;abc&#x27;,2,&#x27;x&#x27;) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| abcxxx            | ab                |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br></pre></td></tr></table></figure><h4 id="3-子字符串的位置"><a href="#3-子字符串的位置" class="headerlink" title="3.子字符串的位置"></a>3.子字符串的位置</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>FIELD(s,s1,s2…)</td><td>返回第一个字符串 s 在字符串列表(s1,s2…)中的位置,没有则返回0</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回在字符串s2中与s1匹配的字符串的位置,s2中需以<code>,</code>作为字符串的间隔</td></tr><tr><td>LOCATE(s1,s)</td><td>从字符串 s 中获取 s1 的开始位置，无匹配则返回0</td></tr><tr><td>POSITION(s1 IN s)</td><td>从字符串 s 中获取 s1 的开始位置,效果与LOCATE(s1,s)相同</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#FIELD(s,s1,s2...)，返回&#x27;b&#x27;在&#x27;a&#x27;、&#x27;b&#x27;、&#x27;c&#x27;中的位置以及在&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;c&#x27;,&#x27;d&#x27;中的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">FIELD</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),<span class="keyword">FIELD</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line">| FIELD(&#x27;b&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;) | FIELD(&#x27;b&#x27;, &#x27;a&#x27;, &#x27;ab&#x27;, &#x27;c&#x27;,&#x27;d&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line">|                         2 |                              0 |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FIND_IN_SET(s1,s2)，返回&#x27;b&#x27;在&#x27;a,b,c&#x27;中的位置以及在&#x27;abc&#x27;中的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a,b,c&#x27;</span>),FIND_IN_SET(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line">| FIND_IN_SET(&#x27;b&#x27;,&#x27;a,b,c&#x27;) | FIND_IN_SET(&#x27;b&#x27;,&#x27;abc&#x27;) |</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line">|                        2 |                      0 |</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LOCATE(s1,s)/POSITION(s1 IN s)，获取&#x27;bc&#x27;在&#x27;abcd&#x27;中以及&#x27;ac&#x27;在&#x27;abcd&#x27;中开始的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCATE</span>(<span class="string">&#x27;bc&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>),<span class="keyword">LOCATE</span>(<span class="string">&#x27;ac&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>),<span class="keyword">POSITION</span>(<span class="string">&#x27;bc&#x27;</span> <span class="keyword">IN</span> <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line">| LOCATE(&#x27;bc&#x27;,&#x27;abcd&#x27;) | LOCATE(&#x27;ac&#x27;,&#x27;abcd&#x27;) | POSITION(&#x27;bc&#x27; IN &#x27;abcd&#x27;) |</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line">|                   2 |                   0 |                        2 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-获取子字符串"><a href="#4-获取子字符串" class="headerlink" title="4.获取子字符串"></a>4.获取子字符串</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>LEFT(s,n)</td><td>返回字符串 s 的前 n 个字符</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串 s 的后 n 个字符</td></tr><tr><td>MID(s,n,len)</td><td>从字符串 s 的 n 位置截取长度为 len 的子字符串，若从n开始到s结束长度不满足len则按实际长度存储，不会补空格。</td></tr><tr><td>SUBSTR(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串，同 MID(s,n,len)</td></tr><tr><td>SUBSTRING(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串，同 SUBSTRING(s,n,len)</td></tr><tr><td>SUBSTRING_INDEX(s, delimiter, number)</td><td>返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#LEFT(s,n)，返回&#x27;ykailh&#x27;的前两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;ykailh&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| LEFT(&#x27;ykailh&#x27;,2) |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| yk               |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RIGHT(s,n)，获取&#x27;abcd&#x27;中的后2个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| RIGHT(&#x27;abcd&#x27;,2) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| cd              |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MID(s,n,len)/SUBSTR(s, start, length)/SUBSTRING(s, start, length)</span></span><br><span class="line"><span class="comment">#截取&#x27;ykailh&#x27;第1个字符开始，长度为4的字符串。</span></span><br><span class="line"><span class="comment">#截取&#x27;ykailh&#x27;第5个字符开始，长度为4的字符串，若从5开始不足长度4则按照实际保存，不会补空格。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MID</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">1</span>, <span class="number">4</span>),<span class="keyword">SUBSTR</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">5</span>, <span class="number">4</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">SUBSTRING</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">8</span>, <span class="number">4</span>));</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line">| MID(&#x27;ykailh&#x27;, 1, 4) | SUBSTR(&#x27;ykailh&#x27;, 5, 4) | CHAR_LENGTH(SUBSTRING(&#x27;ykailh&#x27;, 8, 4)) |</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line">| ykai                | lh                     |                                      0 |</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#SUBSTRING_INDEX(s, delimiter, number)，</span></span><br><span class="line"><span class="comment">#分别返回&#x27;a*b*c&#x27;第一个&#x27;*&#x27;号左边的字符，倒数第一个&#x27;*&#x27;号右边的字符</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;a*b*c&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="number">1</span>),SUBSTRING_INDEX(<span class="string">&#x27;a*b*c&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br><span class="line">| SUBSTRING_INDEX(&#x27;a*b*c&#x27;,&#x27;*&#x27;,1) | SUBSTRING_INDEX(&#x27;a*b*c&#x27;,&#x27;*&#x27;,-1) |</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br><span class="line">| a                              | c                               |</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="5-字符串的替换"><a href="#5-字符串的替换" class="headerlink" title="5.字符串的替换"></a>5.字符串的替换</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>INSERT(s1,x,len,s2)</td><td>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td></tr><tr><td>LCASE(s) / LOWER(s)</td><td>将字符串 s 的所有字母变成小写字母</td></tr><tr><td>UCASE(s) / UPPER(s)</td><td>将字符串 s 的所有字母变成大写字母</td></tr><tr><td>REPLACE(s,s1,s2)</td><td>将字符串 s2 替代字符串 s 中的字符串 s1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#INSERT(s1,x,len,s2)，用&#x27;abc&#x27;替换&#x27;123456789&#x27;中的部分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>),<span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line">| <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>) | <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">&#x27;abc&#x27;</span>) |</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line">| abc23456789                   | abc789                        |</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LCASE(s)/LOWER(s)，将&#x27;aBCd&#x27;全部变为小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LCASE</span>(<span class="string">&#x27;aBCd&#x27;</span>),<span class="keyword">LOWER</span>(<span class="string">&#x27;aBCd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| LCASE(&#x27;aBCd&#x27;) | LOWER(&#x27;aBCd&#x27;) |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| abcd          | abcd          |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#UCASE(s)/UPPER(s)，将&#x27;aBCd&#x27;全部变为大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UCASE</span>(<span class="string">&#x27;aBCd&#x27;</span>),<span class="keyword">UPPER</span>(<span class="string">&#x27;aBCd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| UCASE(&#x27;aBCd&#x27;) | UPPER(&#x27;aBCd&#x27;) |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| ABCD          | ABCD          |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#REPLACE(s,s1,s2) 将&#x27;123321&#x27;中的&#x27;2&#x27;替换为&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| <span class="keyword">REPLACE</span>(<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| <span class="number">1</span>b33b1                    |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="6-获取空格、删除两端空格、字符串"><a href="#6-获取空格、删除两端空格、字符串" class="headerlink" title="6.获取空格、删除两端空格、字符串"></a>6.获取空格、删除两端空格、字符串</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>SPACE(n)</td><td>返回 n 个空格</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串 s 开始处的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串 s 结尾处的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串 s 开始和结尾处的空格</td></tr><tr><td>TRIM(【BOTH 、LEADING、TRAILING】s1 FROM s)</td><td>去掉字符串s开始与结尾/开始/结尾的s1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SPACE(n)，在&#x27;a&#x27;&#x27;b&#x27;之间拼接5个空格。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;a&#x27;</span>,<span class="keyword">SPACE</span>(<span class="number">5</span>),<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#LTRIM(s)，去掉&#x27;  ykailh  &#x27;开头处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">LTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| LTRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(LTRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| ykailh              |                                8 |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RTRIM(s)，去掉&#x27;  ykailh  &#x27;结尾处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">RTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| RTRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(RTRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">|   ykailh            |                                8 |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRIM(s)，去掉&#x27;  ykailh  &#x27;开头和结尾处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">TRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line">| TRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(TRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line">| ykailh             |                               6 |</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRIM([BOTH 、LEADING、TRAILING] s1 FROM s),去掉&#x27;##ykailh##&#x27;开头和结尾/开头/结尾的&#x27;#&#x27;号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="keyword">BOTH</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>),<span class="keyword">TRIM</span>(<span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>);<span class="comment">#可以省略`BOTH`</span></span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line">| TRIM(BOTH &#x27;<span class="comment">#&#x27; FROM &#x27;##ykailh##&#x27;) | TRIM(&#x27;#&#x27; FROM &#x27;##ykailh##&#x27;) |</span></span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line">| ykailh                           | ykailh                      |</span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="keyword">LEADING</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>),<span class="keyword">TRIM</span>(TRAILING <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br><span class="line">| TRIM(LEADING &#x27;<span class="comment">#&#x27; FROM &#x27;##ykailh##&#x27;) | TRIM(TRAILING &#x27;#&#x27; FROM &#x27;##ykailh##&#x27;) |</span></span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br><span class="line">| ykailh<span class="comment">##                            | ##ykailh                             |</span></span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="7-字符串的重复、翻转、比较"><a href="#7-字符串的重复、翻转、比较" class="headerlink" title="7.字符串的重复、翻转、比较"></a>7.字符串的重复、翻转、比较</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>REPEAT(s,n)</td><td>将字符串 s 重复 n 次</td></tr><tr><td>REVERSE(s)</td><td>将字符串s的顺序反过来</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#REPEAT(s,n)，将&#x27;abc&#x27;重复3次</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPEAT</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEAT(&#x27;abc&#x27;,3) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| abcabcabc       |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#REVERSE(s)，将&#x27;abc&#x27;进行翻转</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| REVERSE(&#x27;abc&#x27;) |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| cba            |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#STRCMP(s1,s2)，分别比较&#x27;a&#x27;与&#x27;b&#x27;、&#x27;a&#x27;,&#x27;b&#x27;与&#x27;a&#x27;的大小</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STRCMP</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>),<span class="keyword">STRCMP</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>),<span class="keyword">STRCMP</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>); </span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br><span class="line">| STRCMP(&#x27;a&#x27;, &#x27;b&#x27;) | STRCMP(&#x27;a&#x27;, &#x27;a&#x27;) | STRCMP(&#x27;b&#x27;, &#x27;a&#x27;) |</span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br><span class="line">|               -1 |                0 |                1 |</span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><h4 id="1-幂相关"><a href="#1-幂相关" class="headerlink" title="1.幂相关"></a>1.幂相关</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">EXP(x)</td><td align="left">返回 e 的 x 次方</td></tr><tr><td align="left">POW(x,y) / POWER(x,y)</td><td align="left">返回 x 的 y 次方</td></tr><tr><td align="left">SQRT(x)</td><td align="left">返回x的平方根</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#EXP(x)，获取e的3次方</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXP</span>(<span class="number">3</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| EXP(3)             |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#POW(x,y) / POWER(x,y) ，获取2的3次方，3的3次方</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">POW</span>(<span class="number">2</span>,<span class="number">3</span>),<span class="keyword">POWER</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">| POW(2,3) | POWER(3,3) |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">|        8 |         27 |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SQRT(x)，获取2的平方根,3的平方根</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SQRT</span>(<span class="number">2</span>),<span class="keyword">SQRT</span>(<span class="number">3</span>);</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| SQRT(2)            | SQRT(3)            |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 1.4142135623730951 | 1.7320508075688772 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-对数相关"><a href="#2-对数相关" class="headerlink" title="2.对数相关"></a>2.对数相关</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>LN(x) / LOG(x)</td><td>返回x的自然对数，以 e 为底。</td></tr><tr><td>LOG(base, x)</td><td>返回x的自然对数，以base为底。</td></tr><tr><td>LOG10(x)</td><td>返回以 10 为底的对数</td></tr><tr><td>LOG2(x)</td><td>返回以 2 为底的对数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回以e为底1的对数，4为底4的对数，10为底100的对数，2为底8的对数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LN</span>(<span class="number">1</span>),<span class="keyword">LOG</span>(<span class="number">4</span>,<span class="number">4</span>),<span class="keyword">LOG10</span>(<span class="number">100</span>),<span class="keyword">LOG2</span>(<span class="number">8</span>);</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br><span class="line">| LN(1) | LOG(4,4) | LOG10(100) | LOG2(8) |</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br><span class="line">|     0 |        1 |          2 |       3 |</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br></pre></td></tr></table></figure><h4 id="3-绝对值、最值、近值"><a href="#3-绝对值、最值、近值" class="headerlink" title="3.绝对值、最值、近值"></a>3.绝对值、最值、近值</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回 x 的绝对值</td></tr><tr><td>GREATEST(expr1, expr2, expr3, …)</td><td>返回列表中的最大值</td></tr><tr><td>LEAST(expr1, expr2, expr3, …)</td><td>返回列表中的最小值</td></tr><tr><td>CEIL(x) / CEILING(x)</td><td>返回大于或等于 x 的最小整数（向上取整）</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于 x 的最大整数（向下取整）</td></tr><tr><td>ROUND(x)</td><td>返回离 x 最近的整数（只考虑十分位的四舍五入）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ABS(x)，返回-1,0,1，NULL的绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-1</span>),<span class="keyword">ABS</span>(<span class="number">0</span>),<span class="keyword">ABS</span>(<span class="number">1</span>),<span class="keyword">ABS</span>(<span class="literal">NULL</span>);</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line">| ABS(-1) | ABS(0) | ABS(1) | ABS(NULL) |</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line">|       1 |      0 |      1 |      NULL |</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取1,6,8,0中的最大值与最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GREATEST</span>(<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>),<span class="keyword">LEAST</span>(<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line">| GREATEST(1, 6, 8, 0) | LEAST(1, 6, 8, 0) |</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line">|                    8 |                 0 |</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分别相当于向上取整、向下取整和只考虑十分位的四舍五入</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">1.68</span>),<span class="keyword">CEILING</span>(<span class="number">1.32</span>),<span class="keyword">FLOOR</span>(<span class="number">1.68</span>),<span class="keyword">ROUND</span>(<span class="number">1.68</span>),<span class="keyword">ROUND</span>(<span class="number">1.32</span>);</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br><span class="line">| CEIL(1.68) | CEILING(1.32) | FLOOR(1.68) | ROUND(1.68) | ROUND(1.32) |</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br><span class="line">|          2 |             2 |           1 |           2 |           1 |</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br></pre></td></tr></table></figure><h4 id="4-取余、取符号、截取、随机数、格式化、圆周率"><a href="#4-取余、取符号、截取、随机数、格式化、圆周率" class="headerlink" title="4.取余、取符号、截取、随机数、格式化、圆周率"></a>4.取余、取符号、截取、随机数、格式化、圆周率</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>MOD(x,y)</td><td>返回 x 除以 y 以后的余数</td></tr><tr><td>SIGN(x)</td><td>返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td></tr><tr><td>RAND()</td><td>返回 0 到 1 的随机数</td></tr><tr><td>FORMAT(x,n)</td><td>函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td></tr><tr><td>PI()</td><td>返回圆周率(3.141593）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MOD(x,y)，获取5和2、-3和2、-3和-2相除的余数，</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">5</span>,<span class="number">2</span>),<span class="keyword">MOD</span>(<span class="number">-3</span>,<span class="number">2</span>),<span class="keyword">MOD</span>(<span class="number">-3</span>,<span class="number">-2</span>);</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line">| MOD(5,2) | MOD(-3,2) | MOD(-3,-2) |</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line">|        1 |        -1 |         -1 |</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SIGN(x)，获取-6,0,8，NULL的符号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">-6</span>),<span class="keyword">SIGN</span>(<span class="number">0</span>),<span class="keyword">SIGN</span>(<span class="number">8</span>),<span class="keyword">SIGN</span>(<span class="literal">NULL</span>);</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line">| SIGN(-6) | SIGN(0) | SIGN(8) | SIGN(NULL) |</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line">|       -1 |       0 |       1 |       NULL |</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRUNCATE(x,y)，获取1.123、1.126截取两位小数后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.123</span>,<span class="number">2</span>),<span class="keyword">TRUNCATE</span>(<span class="number">1.126</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| <span class="keyword">TRUNCATE</span>(<span class="number">1.123</span>,<span class="number">2</span>) | <span class="keyword">TRUNCATE</span>(<span class="number">1.126</span>,<span class="number">2</span>) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">|              <span class="number">1.12</span> |              <span class="number">1.12</span> |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RAND()，获取一个0-1的随机数，获取一个0-100的随机整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>(),<span class="keyword">RAND</span>() * <span class="number">100</span> <span class="keyword">DIV</span> <span class="number">1</span>;</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| RAND()             | RAND() * 100 DIV 1 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 0.4843776090856433 |                 84 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FORMAT(x,n)，将123456789.666格式化为&quot;#,###.##&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FORMAT</span>(<span class="number">123456789.666</span>, <span class="number">2</span>);</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| FORMAT(123456789.666, 2) |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| 123,456,789.67           |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PI()，获取圆周率</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PI</span>();</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| PI()     |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 3.141593 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><h4 id="5-三角函数相关"><a href="#5-三角函数相关" class="headerlink" title="5.三角函数相关"></a>5.三角函数相关</h4><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>SIN(x)</td><td>求正弦值(参数是弧度)</td><td><code>SELECT SIN(RADIANS(30)); -- 0.5</code></td></tr><tr><td>COS(x)</td><td>求余弦值(参数是弧度)</td><td><code>SELECT COS(2); -- -0.4161468365471424</code></td></tr><tr><td>TAN(x)</td><td>求正切值(参数是弧度)</td><td><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td></tr><tr><td>COT(x)</td><td>求余切值(参数是弧度)</td><td><code>SELECT COT(6);  -- -3.436353004180128</code></td></tr><tr><td>ASIN(x)</td><td>求反正弦值(参数是弧度)</td><td><code>SELECT ASIN(0.25); -- 0.25268025514207865</code></td></tr><tr><td>ACOS(x)</td><td>求反余弦值(参数是弧度)</td><td><code>SELECT ACOS(0.25); -- 1.318116071652818</code></td></tr><tr><td>ATAN(x)</td><td>求反正切值(参数是弧度)</td><td><code>SELECT ATAN(2.5); -- 1.1902899496825317</code></td></tr><tr><td>ATAN2(n, m)</td><td>求反正切值(参数是弧度)</td><td><code>SELECT ATAN2(-0.8, 2); -- -0.3805063771123649</code></td></tr><tr><td>DEGREES(x)</td><td>将弧度转换为角度</td><td><code>SELECT DEGREES(3.1415926535898) -- 180</code></td></tr><tr><td>RADIANS(x)</td><td>将角度转换为弧度</td><td><code>SELECT RADIANS(180) -- 3.1415926535898</code></td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><h4 id="1-系统时间"><a href="#1-系统时间" class="headerlink" title="1.系统时间"></a>1.系统时间</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>NOW()  / SYSDATE() / CURRENT_TIMESTAMP()/ LOCALTIME() / LOCALTIMESTAMP()</td><td>返回当前日期和时间</td></tr><tr><td>CURDATE() / CURRENT_DATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME() / CURRENT_TIME()</td><td>返回当前时间</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>(),<span class="keyword">SYSDATE</span>(),<span class="keyword">CURRENT_TIMESTAMP</span>();</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| NOW()               | SYSDATE()           | CURRENT_TIMESTAMP() |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| 2020-08-21 20:41:34 | 2020-08-21 20:41:34 | 2020-08-21 20:41:34 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">#返回当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>(),<span class="keyword">CURRENT_DATE</span>();</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line">| CURDATE()  | CURRENT_DATE() |</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line">| 2020-08-21 | 2020-08-21     |</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line"><span class="comment">#返回当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>(),<span class="keyword">CURRENT_TIME</span>();</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br><span class="line">| CURTIME() | CURRENT_TIME() |</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br><span class="line">| 20:43:42  | 20:43:42       |</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-提取日期信息"><a href="#2-提取日期信息" class="headerlink" title="2.提取日期信息"></a>2.提取日期信息</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>DATE(d)</td><td>从日期或日期时间表达式中提取日期值</td></tr><tr><td>LAST_DAY(d)</td><td>返回给给定日期的那一月份的最后一天</td></tr><tr><td>TIME(d)</td><td>提取传入表达式的时间部分</td></tr><tr><td>YEAR(d)</td><td>返回年份</td></tr><tr><td>QUARTER(d)</td><td>返回日期d是第几季节，返回 1 到 4</td></tr><tr><td>MONTH(d)</td><td>返回日期d中的月份值，1 到 12</td></tr><tr><td>MONTHNAME(d)</td><td>返回日期当中的月份名称，如 November</td></tr><tr><td>WEEK(d)</td><td>计算日期 d 是本年的第几个星期，范围是 0 到 53(默认一周从周日开始)</td></tr><tr><td>WEEKOFYEAR(d)</td><td>计算日期 d 是本年的第几个星期，范围是 0 到 53(默认一周从周1开始)</td></tr><tr><td>YEARWEEK(date, [mode])</td><td>返回年份及第几周（0到53），mode 可以设置一周的开始默认为周日， 0 表示周天，1表示周一，以此类推</td></tr><tr><td>DAYOFYEAR(d)</td><td>返回日期值 d 为本年第几天</td></tr><tr><td>DAY(d)/DAYOFMONTH(d)</td><td>返回日期值 d 为本月第几天</td></tr><tr><td>DAYNAME(d)</td><td>返回日期 d 是星期几，如 Monday,Tuesday</td></tr><tr><td>DAYOFWEEK(d)</td><td>日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td></tr><tr><td>WEEKDAY(d)</td><td>日期 d 是星期几，0 表示星期一，1 表示星期二</td></tr><tr><td>HOUR(t)</td><td>返回 t 中的小时值</td></tr><tr><td>MINUTE(t)</td><td>返回 t 中的分钟值</td></tr><tr><td>SECOND(t)</td><td>返回 t 中的秒钟值</td></tr><tr><td>MICROSECOND(date)</td><td>返回日期参数所对应的微秒数</td></tr><tr><td>EXTRACT(type FROM d)</td><td>从日期 d 中获取指定的值，type 指定返回的值。</td></tr></tbody></table><ul><li><code>EXTRACT(type FROM d)</code>中<code>type</code>可取的值：</li></ul><table><thead><tr><th>type</th><th>描述</th></tr></thead><tbody><tr><td>MICROSECOND</td><td>返回日期中的微秒</td></tr><tr><td>SECOND</td><td>返回日期中的秒</td></tr><tr><td>MINUTE</td><td>返回日期中的分</td></tr><tr><td>HOUR</td><td>返回日期中的时</td></tr><tr><td>DAY</td><td>返回日期中的天</td></tr><tr><td>WEEK</td><td>返回日期为当年的第几周</td></tr><tr><td>MONTH</td><td>返回日期中的月</td></tr><tr><td>QUARTER</td><td>返回日期中的季度</td></tr><tr><td>YEAR</td><td>返回日期中的年</td></tr><tr><td>SECOND_MICROSECOND</td><td>返回日期中的秒和微秒</td></tr><tr><td>MINUTE_MICROSECOND</td><td>返回日期中的分和微秒</td></tr><tr><td>MINUTE_SECOND</td><td>返回日期中的分和微秒</td></tr><tr><td>HOUR_MICROSECOND</td><td>返回日期中的小时和微秒</td></tr><tr><td>HOUR_SECOND</td><td>返回日期中的小时和秒</td></tr><tr><td>HOUR_MINUTE</td><td>返回日期中的小时和分</td></tr><tr><td>DAY_MICROSECOND</td><td>返回日期中的日和微秒</td></tr><tr><td>DAY_SECOND</td><td>返回日期中的日和秒</td></tr><tr><td>DAY_MINUTE</td><td>返回日期中的日和分</td></tr><tr><td>DAY_HOUR</td><td>返回日期中的日和时</td></tr><tr><td>YEAR_MONTH</td><td>返回日期中的年和月</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">DATE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">LAST_DAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="built_in">TIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line">| DATE(&#x27;2020-08-21 20:41:34&#x27;) | LAST_DAY(&#x27;2020-08-21 20:41:34&#x27;) | TIME(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line">| 2020-08-21                  | 2020-08-31                      | 20:41:34                    |</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#年、季度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">QUARTER</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line">| YEAR(&#x27;2020-08-21 20:41:34&#x27;) | QUARTER(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line">|                        2020 |                              3 |</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),MONTHNAME(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line">| MONTH(&#x27;2020-08-21 20:41:34&#x27;) | MONTHNAME(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line">|                            8 | August                           |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#周</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">WEEKOFYEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">YEARWEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line">| WEEK(&#x27;2020-08-21 20:41:34&#x27;) | WEEKOFYEAR(&#x27;2020-08-21 20:41:34&#x27;) | YEARWEEK(&#x27;2020-08-21 20:41:34&#x27;,1) |</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line">|                          33 |                                34 |                            202034 |</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFYEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAYOFMONTH</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line">| DAYOFYEAR(&#x27;2020-08-21 20:41:34&#x27;) | DAY(&#x27;2020-08-21 20:41:34&#x27;) | DAYOFMONTH(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line">|                              234 |                         21 |                                21 |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#星期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYNAME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAYOFWEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">WEEKDAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line">| DAYNAME(&#x27;2020-08-21 20:41:34&#x27;) | DAYOFWEEK(&#x27;2020-08-21 20:41:34&#x27;) | WEEKDAY(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line">| Friday                         |                                6 |                              4 |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时、分、秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">MINUTE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">SECOND</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line">| HOUR(&#x27;2020-08-21 20:41:34&#x27;) | MINUTE(&#x27;2020-08-21 20:41:34&#x27;) | SECOND(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line">|                          20 |                            41 |                            34 |</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#EXTRACT(type FROM d)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>( YEAR_MONTH <span class="keyword">FROM</span> <span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">EXTRACT</span>( DAY_HOUR <span class="keyword">FROM</span> <span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br><span class="line">| EXTRACT( YEAR_MONTH FROM &#x27;2020-08-21 20:41:34&#x27;) | EXTRACT( DAY_HOUR FROM &#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br><span class="line">|                                          202008 |                                          2120 |</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="3-日期的相关计算"><a href="#3-日期的相关计算" class="headerlink" title="3.日期的相关计算"></a>3.日期的相关计算</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ADDDATE(d,n)</td><td>计算起始日期 d 加上 n 天的日期</td></tr><tr><td>SUBDATE(d,n)</td><td>日期 d 减去 n 天后的日期</td></tr><tr><td>ADDTIME(t,n)</td><td>时间 t 加上 n 秒的时间</td></tr><tr><td>SUBTIME(t,n)</td><td>时间 t 减去 n 秒的时间</td></tr><tr><td>DATE_ADD(d，INTERVAL expr type)</td><td>计算起始日期 d 加上一个时间段后的日期</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)</td><td>计算起始日期 d 减去一个时间段后的日期</td></tr><tr><td>TIMESTAMP(expression, [interval])</td><td>单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td></tr><tr><td>PERIOD_DIFF(period1, period2)</td><td>返回两个时段之间的月份差值</td></tr><tr><td>PERIOD_ADD(period, number)</td><td>为 年-月 组合日期添加一个时段</td></tr><tr><td>DATEDIFF(d1,d2)</td><td>计算日期 d1，d2 之间相隔的天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>计算时间差值</td></tr></tbody></table><ul><li><code>DATE_ADD/DATE_SUB(d，INTERVAL expr type)</code>中type可取的值与<code>EXTRACT(type FROM d)</code>中的<code>type</code>一致</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增减天数，增加/减少5天</span></span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">5</span>),<span class="keyword">SUBDATE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line">| ADDDATE(&#x27;2020-08-21 20:41:34&#x27;,5) | SUBDATE(&#x27;2020-08-21 20:41:34&#x27;,5) |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line">| 2020-08-26 20:41:34              | 2020-08-16 20:41:34              |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增减秒，增加/减少50秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ADDTIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">50</span>),<span class="keyword">SUBTIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">50</span>);</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line">| ADDTIME(&#x27;2020-08-21 20:41:34&#x27;,50) | SUBTIME(&#x27;2020-08-21 20:41:34&#x27;,50) |</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line">| 2020-08-21 20:42:24               | 2020-08-21 20:40:44               |</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增减日期，如增加5年、减少3月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="built_in">INTERVAL</span> <span class="number">5</span> <span class="keyword">YEAR</span>),<span class="keyword">DATE_SUB</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="built_in">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| DATE_ADD(&#x27;2020-08-21 20:41:34&#x27;,INTERVAL 5 YEAR) | DATE_SUB(&#x27;2020-08-21 20:41:34&#x27;,INTERVAL 3 MONTH) |</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| 2025-08-21 20:41:34                             | 2020-05-21 20:41:34                              |</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TIMESTAMP(expression, [interval])</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TIMESTAMP</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="built_in">TIMESTAMP</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line">| TIMESTAMP(&#x27;2020-08-21 20:41:34&#x27;) | TIMESTAMP(&#x27;2020-08-21 20:41:34&#x27;,&#x27;6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line">| 2020-08-21 20:41:34              | 2020-08-22 02:41:34                        |</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PERIOD_DIFF(period1, period2),时段月份差</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PERIOD_DIFF</span>(<span class="number">202008</span>,<span class="number">202004</span>),<span class="keyword">PERIOD_DIFF</span>(<span class="number">201709</span>,<span class="number">202107</span>);</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line">| PERIOD_DIFF(202008,202004) | PERIOD_DIFF(201709,202107) |</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line">|                          4 |                        -46 |</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PERIOD_ADD(period, number)，时段添加</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PERIOD_ADD</span>(<span class="number">202008</span>,<span class="number">04</span>);</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| PERIOD_ADD(202008,4) |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">|               202012 |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#DATEDIFF(d1,d2)，日期天数差</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">&#x27;2017-09-16&#x27;</span>,<span class="string">&#x27;2021-07-01&#x27;</span>),<span class="keyword">DATEDIFF</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;2020-04-30 6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line">| DATEDIFF(&#x27;2017-09-16&#x27;,&#x27;2021-07-01&#x27;) | DATEDIFF(&#x27;2020-08-21 20:41:34&#x27;,&#x27;2020-04-30 6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line">|                               -1384 |                                                  113 |</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TIMEDIFF(time1, time2)，时间差，最大值为 838:59:59</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIMEDIFF</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;2020-08-19 6:00:00&#x27;</span>),<span class="keyword">TIMEDIFF</span>(<span class="string">&#x27;20:41:34&#x27;</span>,<span class="string">&#x27;6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line">| TIMEDIFF(&#x27;2020-08-21 20:41:34&#x27;,&#x27;2020-08-19 6:00:00&#x27;) | TIMEDIFF(&#x27;20:41:34&#x27;,&#x27;6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line">| 62:41:34                                             | 14:41:34                       |</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-日期格式转换"><a href="#4-日期格式转换" class="headerlink" title="4.日期格式转换"></a>4.日期格式转换</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>MAKEDATE(year, day-of-year)</td><td>基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td></tr><tr><td>MAKETIME(hour, minute, second)</td><td>组合时间，参数分别为小时、分钟、秒</td></tr><tr><td>TO_DAYS(d)</td><td>计算日期 d 距离 0000 年 1 月 1 日的天数</td></tr><tr><td>FROM_DAYS(n)</td><td>计算从 0000 年 1 月 1 日开始 n 天后的日期</td></tr><tr><td>TIME_TO_SEC(t)</td><td>将时间 t 转换为秒</td></tr><tr><td>SEC_TO_TIME(s)</td><td>将以秒为单位的时间 s 转换为时分秒的格式</td></tr><tr><td>TIME_FORMAT(t,f)</td><td>按表达式 f的要求显示日期 t</td></tr><tr><td>DATE_FORMAT(d,f)</td><td>按表达式 f的要求显示日期 d</td></tr><tr><td>STR_TO_DATE(string, format_mask)</td><td>将字符串转变为日期</td></tr></tbody></table><p><code>DATE_FORMAT(datetime,fmt) </code>等的<strong>格式符及含义：</strong></p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份（01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数（1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制（01,02..）</td><td>%h和%I</td><td>两位数字表示小时，12小时制（01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制（1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数(0=Sunday,1=Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MAKEDATE(year, day-of-year)，将2020年的第100天转换成日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAKEDATE</span>(<span class="number">2020</span>,<span class="number">100</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| MAKEDATE(2020,100) |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 2020-04-09         |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MAKETIME(hour, minute, second)，将时分秒组合成时间，超出单位上限则返回NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAKETIME</span>(<span class="number">20</span>,<span class="number">41</span>,<span class="number">34</span>),<span class="keyword">MAKETIME</span>(<span class="number">20</span>,<span class="number">61</span>,<span class="number">34</span>);</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| MAKETIME(20,41,34) | MAKETIME(20,61,34) |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 20:41:34           | NULL               |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参考0000年1月1日的天数和日期的转换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TO_DAYS</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">FROM_DAYS</span>(<span class="number">738023</span>);</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line">| TO_DAYS(&#x27;2020-08-21 20:41:34&#x27;) | FROM_DAYS(738023) |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line">|                         738023 | 2020-08-21        |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间与秒的转换</span></span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;20:41:34&#x27;</span>),<span class="keyword">SEC_TO_TIME</span>(<span class="number">74494</span>);</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line">| TIME_TO_SEC(&#x27;20:41:34&#x27;) | SEC_TO_TIME(74494) |</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line">|                   74494 | 20:41:34           |</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIME_FORMAT</span>(<span class="string">&#x27;20:41:34&#x27;</span>,<span class="string">&#x27;%h:%i:%s %p&#x27;</span>),<span class="keyword">DATE_FORMAT</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;%M %D %Y %T&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| TIME_FORMAT(&#x27;20:41:34&#x27;,&#x27;%h:%i:%s %p&#x27;) | DATE_FORMAT(&#x27;2020-08-21 20:41:34&#x27;,&#x27;%M %D %Y %T&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| 08:41:34 PM                           | August 21st 2020 20:41:34                        |</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串转换为日期时间格式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;08:41:34 PM&#x27;</span>, <span class="string">&#x27;%h:%i:%s %p&#x27;</span>),<span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;August 21st 2020 20:41:34&#x27;</span>, <span class="string">&#x27;%M %D %Y %T&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br><span class="line">| STR_TO_DATE(&#x27;08:41:34 PM&#x27;, &#x27;%h:%i:%s %p&#x27;) | STR_TO_DATE(&#x27;August 21st 2020 20:41:34&#x27;, &#x27;%M %D %Y %T&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br><span class="line">| 20:41:34                                  | 2020-08-21 20:41:34                                     |</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,t ,f)</td><td>如果value是真，返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN result1 WHEN 条件2 THEN result2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE  expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示先创建一个员工表，包含id，薪资，级别三个字段,并添加5条数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees(</span><br><span class="line">    uid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">    salary <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">UNSIGNED</span>,</span><br><span class="line">    <span class="keyword">level</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">6000</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">12000</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">13000</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">21000</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">8500</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#IF(value,t ,f)，查询员工薪资是否大于一万</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IF</span>(salary&gt;<span class="number">10000</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;否&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;薪资是否大于一万&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line">| uid  | 薪资是否大于一万         |</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line">|    1 | 否                       |</span><br><span class="line">|    2 | 是                       |</span><br><span class="line">|    3 | 是                       |</span><br><span class="line">|    4 | 是                       |</span><br><span class="line">|    5 | 否                       |</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#IFNULL(value1, value2)，查询员工等级，若为NULL则显示为0</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">4500</span>,<span class="literal">NULL</span>);<span class="comment">#添加一条员工信息方便演示</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) <span class="keyword">AS</span> <span class="string">&#x27;员工等级&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| uid  | 员工等级     |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">|    1 |            1 |</span><br><span class="line">|    2 |            3 |</span><br><span class="line">|    3 |            3 |</span><br><span class="line">|    4 |            4 |</span><br><span class="line">|    5 |            2 |</span><br><span class="line">|    6 |            0 |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line"><span class="comment">#按照薪资范围添加描述</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,salary <span class="keyword">AS</span> <span class="string">&#x27;工资&#x27;</span>,<span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高薪&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;潜力股&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;屌丝&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;描述&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line">| uid  | 工资     | 描述      |</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line">|    1 |  6000.00 | 屌丝      |</span><br><span class="line">|    2 | 12000.00 | 潜力股    |</span><br><span class="line">|    3 | 13000.00 | 潜力股    |</span><br><span class="line">|    4 | 21000.00 | 高薪      |</span><br><span class="line">|    5 |  8500.00 | 屌丝      |</span><br><span class="line">|    6 |  4500.00 | 屌丝      |</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照等级发放不同比例的奖金</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) <span class="keyword">AS</span> <span class="string">&#x27;员工等级&#x27;</span>,<span class="keyword">CASE</span> <span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span>  salary*<span class="number">5</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> salary*<span class="number">3</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> salary*<span class="number">2</span></span><br><span class="line"><span class="keyword">ELSE</span> salary <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;奖金&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br><span class="line">| uid  | 员工等级     | 奖金      |</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br><span class="line">|    1 |            1 |   6000.00 |</span><br><span class="line">|    2 |            3 |  36000.00 |</span><br><span class="line">|    3 |            3 |  39000.00 |</span><br><span class="line">|    4 |            4 | 105000.00 |</span><br><span class="line">|    5 |            2 |  17000.00 |</span><br><span class="line">|    6 |            0 |   4500.00 |</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>database()</td><td>返回当前数据库名</td></tr><tr><td>version()</td><td>返回当前数据库版本</td></tr><tr><td>user()</td><td>返回当前登录用户名</td></tr><tr><td>password(str)</td><td>返回字符串str的加密版本，41位长的字符串</td></tr><tr><td>md5(str)</td><td>返回字符串str的md5值，也是一种加密方式</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">database</span>() <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,<span class="keyword">version</span>() <span class="keyword">AS</span> <span class="string">&#x27;数据库版本&#x27;</span>,<span class="keyword">user</span>() <span class="keyword">AS</span> <span class="string">&#x27;当前用户名&#x27;</span>;</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line">| 数据库名     | 数据库版本      | 当前用户名      |</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line">| test         | 5.7.31-log      | root@localhost  |</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般用于存储密码时加密，同一个字段只推荐使用同一种加密方式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">password</span>(<span class="number">123456</span>),<span class="keyword">md5</span>(<span class="number">123456</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br><span class="line">| password(123456)                          | md5(123456)                      |</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br><span class="line">| *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><p>​    区别于单行函数，分组函数一般以字段作为参数而只返回一个结果。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>AVG(expression)</td><td>返回一个表达式的平均值，expression 是一个字段</td></tr><tr><td>COUNT(expression)</td><td>返回查询的记录总数，expression 参数是一个字段或者 * 号</td></tr><tr><td>MAX(expression)</td><td>返回字段 expression 中的最大值</td></tr><tr><td>MIN(expression)</td><td>返回字段 expression 中的最小值</td></tr><tr><td>SUM(expression)</td><td>返回指定字段的总和</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依然使用上面建的employees表进行演示</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均工资&#x27;</span>,<span class="keyword">MAX</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最高工资&#x27;</span>,<span class="keyword">MIN</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最低工资&#x27;</span>,<span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;工资总和&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line">| 平均工资     | 最高工资     | 最低工资     | 工资总和     |</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line">| 10833.333333 |     21000.00 |      4500.00 |     65000.00 |</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line"><span class="comment">#COUNT(expression) 参数为*时统计所以记录，参数为字段名时除去该字段为NULL的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&#x27;员工总数&#x27;</span>,<span class="keyword">COUNT</span>(<span class="keyword">level</span>) <span class="keyword">AS</span> <span class="string">&#x27;用于等级的员工总数&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br><span class="line">| 员工总数     | 用于等级的员工总数          |</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br><span class="line">|            6 |                           5 |</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    MySQL函数主要分为&lt;strong&gt;单行函数&lt;/strong&gt;以及&lt;strong&gt;分组函数&lt;/strong&gt;两种，其中单行函数又以作用对象不同分为字符串函数、数值函数等。以下按照类型进行演示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SQL函数" scheme="http://yoursite.com/tags/SQL%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之SQL语法(DML)</title>
    <link href="http://yoursite.com/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/"/>
    <id>http://yoursite.com/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/</id>
    <published>2020-08-21T10:36:43.000Z</published>
    <updated>2020-09-03T02:54:43.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h2><p>​    根据SQL语句的<strong>作用</strong>将SQL语句分为<strong>三大类：</strong></p><ul><li>DDL —  数据定义语言（Data Define Language）<a href="https://ykailh.github.io/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/">DDL链接</a></li><li>DML — 数据操纵语言（Data Manipulation Language）</li><li>DCL —  数据控制语言（Data Control Language）</li></ul><p><strong>本文主要讲解DML</strong>，DML语句一般用于对<strong>数据</strong>进行增删改查，对应于<code>INSERT（新增）</code>、<code>DELETE（删除）</code>、<code>UPDATE（更新）</code>、<code>SELECT（查询）</code>。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>​    <strong>用于插入数据</strong></p><p>​    格式：<code>INSERT INTO [数据库名.]表名[(字段列表)] VALUES(数据列表),(数据列表二)....; </code></p><p><strong>注意事项：</strong></p><ul><li><p>在已经使用（<code>USE</code>）数据库的情况下对<strong>本数据库的表</strong>插入数据可以省略[<code>数据库名.</code>]，下面类似情况不再强调。</p></li><li><p>数据列表要与字段列表<strong>一 一对应</strong>，字段/数据之间使用<code>,</code>隔开。</p></li><li><p>若<strong>省略字段列表则默认为全部字段</strong>。</p></li><li><p>可以<strong>同时添加多组数据</strong>，将同组数据写在同一<code>()</code>内，并以<code>,</code>间隔开。</p></li><li><p>对于<strong>含有默认值的字段</strong>，若想在插入数据时<strong>使用默认值</strong>可以在数据列表的<strong>对应位置</strong>中用<code>DEFAULT</code>。</p></li><li><p>对于字段列表外的字段的数值，若该字段有默认值则为默认值，若没有默认值则为NULL。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个表格用于测试</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> avengers(</span><br><span class="line">            <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">            <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">            race <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;其他&#x27;</span>,</span><br><span class="line">            fighting_capacity <span class="built_in">INT</span> </span><br><span class="line">            );</span><br><span class="line"><span class="comment">#未指定字段列表，默认为全字段,含有默认值的字段可以使用DEFAULT代替</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;钢铁侠&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">12000</span>),(<span class="number">2</span>,<span class="string">&#x27;幻视&#x27;</span>,<span class="keyword">DEFAULT</span>,<span class="number">8000</span>);</span><br><span class="line"><span class="comment">#给自定字段赋值，同一行中未赋值的有默认值为默认值，没有则为NULL</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;雷神&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询表验证</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠     | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视       | 其他   |              8000 |</span><br><span class="line">|    3 | 雷神       | 其他   |              NULL |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>​    <strong>用于删除表中数据</strong></p><p>​    格式：<code>DELETE FROM [数据库名.]表名称 [WHERE 条件]</code></p><p><strong>注意事项：</strong></p><ul><li>若语句中没有写<code>WHERE 条件</code>会将<strong>整个表的数据删除</strong>，但会<strong>保留表结构</strong>，务必<strong>谨慎使用</strong>。</li><li>删除条件恒为真时效果相当于不写条件，例如<code>DELETE FROM [数据库名.]表名称 WHERE 2 &gt; 1</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除avengers表中Fighting_capacity字段值为NULL的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> avengers <span class="keyword">where</span> Fighting_capacity <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠    | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视      | 其他   |              8000 |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不写条件则会把表清空</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> avengers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只清空了数据，表依然保留在数据库中。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| avengers       |      |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p><strong>用于修改表中数据</strong></p><p>​    格式：<code>UPDATE [数据库名.]表名称 SET 字段名 = 新值，字段名2 = 新值 ... [WHERE 条件]</code></p><p><strong>注意事项：</strong></p><ul><li>若语句中没有写<code>WHERE 条件</code>会将<strong>修改所有该字段的值</strong>，务必<strong>谨慎使用</strong>。</li><li>删除条件恒为真时效果相当于不写条件，例如<code>UPDATE.... WHERE 1</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#演示DELETE时清空了表格的数据，先添加回来</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;钢铁侠&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;幻视&#x27;</span>,<span class="keyword">DEFAULT</span>,<span class="number">8000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;雷神&#x27;</span>,<span class="string">&#x27;神族&#x27;</span>,<span class="number">14000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠    | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视      | 其他   |              8000 |</span><br><span class="line">|    3 | 雷神      | 神族   |             14000 |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将雷神的name改为觉醒雷神，Fighting_capacity增加6000；</span></span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">&#x27;觉醒雷神&#x27;</span>, fighting_capacity = fighting_capacity +<span class="number">6000</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;雷神&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视         | 其他   |              8000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             20000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不写条件则会改变整个字段的值，下面语句将fighting_capacity字段的值都增加3000</span></span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> fighting_capacity = fighting_capacity +<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p><strong>用于查询数据</strong></p><p>​    格式：<code>SELECT 查询内容 [FROM 查询范围] [WHERE 筛选条件] [GROUP BY 分组依据] [HAVING 分组后的筛选] [ORDER BY 排序] [LIMIT 获取行的数量]</code></p><h3 id="1-SELECT的六大子句"><a href="#1-SELECT的六大子句" class="headerlink" title="1.SELECT的六大子句"></a>1.SELECT的六大子句</h3><p>​    <strong>若子句同时出现需要严格按照以下顺序：</strong></p><ul><li><p><code>FROM</code></p><p><code>FROM</code>后面跟的是查询范围，一般为多行多列的结构，比如表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如上面查询整个表格的信息所使用到的，查询avengers表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>WHERE</code></p><p><code>WHERE</code>后跟的内容为筛选条件，注意不能使用分组函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询avengers表中fighting_capacity字段值大于12000的所有字段信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &gt; <span class="number">12000</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>GROUP BY</code></p><p><code>GROUP BY</code>后跟的内容为分组的信息，一般为一个或多个字段。需要注意的是查询内容尽量不要出现与分组后的内容无关的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示在avengers添加字段did表示所属组织的id号,并添加一些信息</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> avengers <span class="keyword">ADD</span> did <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> did = <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> did = <span class="number">2</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;绿巨人&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">13000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;猩红女巫&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">20000</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;星爵&#x27;</span>,<span class="string">&#x27;神族&#x27;</span>,<span class="number">6000</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;美国队长&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">10000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">#修改后的表格</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后分组依据字段只出现唯一的值，例如查询以did分组后的did字段</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| did  |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#但上面的作用不太明显，一般会配合筛选函数使用，如下是以did为分组并统计不同did的行数总和。</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;组织人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did;</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line">| 组织id   | 组织人数     |</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line">|        1 |            4 |</span><br><span class="line">|        2 |            3 |</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#GROUP BY 后还可以跟多个字段，分组的依据为字段的组合为唯一，类似于复合唯一键的约束效果。</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, race <span class="keyword">AS</span> <span class="string">&#x27;种族&#x27;</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did, race;</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| 组织id   | 种族   | 人数   |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|        1 | 人类   |      2 |</span><br><span class="line">|        1 | 其他   |      1 |</span><br><span class="line">|        1 | 神族   |      1 |</span><br><span class="line">|        2 | 人类   |      1 |</span><br><span class="line">|        2 | 其他   |      1 |</span><br><span class="line">|        2 | 神族   |      1 |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>HAVING</code></p><p>在分组后再次对分组的结果进行筛选，和<code>WHERE</code>的最大区别是<code>HAVING</code>可以使用分组函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如在以did和race分组后筛选did值为1的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, race <span class="keyword">AS</span> <span class="string">&#x27;种族&#x27;</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did, race <span class="keyword">HAVING</span> did = <span class="number">1</span>;</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| 组织id   | 种族   | 人数   |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|        1 | 人类   |      2 |</span><br><span class="line">|        1 | 其他   |      1 |</span><br><span class="line">|        1 | 神族   |      1 |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>ORDER BY</code></p><p>​    用于将数据进行排序，格式为：<code>ORDER BY 字段名 升序/降序</code>,<code>DESC</code>为降序，<code>ASC</code>为升序，默认为升序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有成员信息 按照fighting_capacity 进行升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> fighting_capacity;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ORDER BY后可以跟多个排序字段，并可分别指定升降序，后面的排序是在前面排序的结果上进行排序的。</span></span><br><span class="line"><span class="comment">#例如查询所有成员信息 按照did进行升序排列的情况下按照fighting_capacity进行降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> did <span class="keyword">ASC</span>,fighting_capacity <span class="keyword">DESC</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>LIMIT</code></p><p>用于指定取数据的行数以及数量，格式：<code>LIMIT 开始取数据的行数，取数据的数量</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在按照fighting_capacity排序的情况下取前三条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> fighting_capacity <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-关联查询"><a href="#2-关联查询" class="headerlink" title="2.关联查询"></a>2.关联查询</h3><p>​    关联查询是指在查询两个或两个表以上的关联数据，用于规定筛选范围，所以语句在<code>FROM</code>从句后。</p><p>以两个表为例一共有以下七种情况：</p><p><img src="/image/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="关联查询示意图"></p><p>​    按照表的连接关系进行讲解，为了方便演示定义一个组织表department 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示，向添加avengers表中添加两条数据，并创建department表。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;黑豹&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">13000</span>,<span class="literal">NULL</span>),(<span class="number">9</span>,<span class="string">&#x27;灭霸&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">30000</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">    did <span class="built_in">INT</span>, <span class="comment">#组织编号</span></span><br><span class="line">    dname <span class="built_in">VARCHAR</span>(<span class="number">10</span>), <span class="comment">#组织名</span></span><br><span class="line">    ddescribe <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="comment">#组织描述</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;初代复仇者&#x27;</span>,<span class="string">&#x27;包含复仇者联盟的最初六人&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;新复仇者&#x27;</span>,<span class="string">&#x27;除复联最初六人外的成员&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;测试did为5&#x27;</span>,<span class="string">&#x27;没有成员属于这个组织&#x27;</span>),</span><br><span class="line">(<span class="literal">NULL</span>,<span class="string">&#x27;测试did为NULL&#x27;</span>,<span class="string">&#x27;did为NULL&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>INNER JOIN</code></p><p>内连接，可以实现查询A∩B的效果，格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若涉及到重名的字段列表则需要全写为 表名.字段名</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询英雄以did作为关联条件进行内连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">| id   | name         | did  | dname           |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者      |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者        |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者      |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者      |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者        |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者        |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者      |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>LEFT JOIN</code></p><p>左外连接，可以实现<code>A</code>以及<code>A - A∩B</code>的效果，格式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现查询结果是A</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现A -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A示例，与内连接最大的不同是以A中的did为主进行匹配，可以查询出did不匹配部分的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">| id   | name         | did  | dname           |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者      |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者      |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者      |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者      |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者        |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者        |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者        |</span><br><span class="line">|    8 | 黑豹         | NULL | NULL            |</span><br><span class="line">|    9 | 灭霸         |    3 | NULL            |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#A - A∩B 示例，将两者上面查询的两种结果相减则</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"><span class="keyword">WHERE</span> department.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br><span class="line">| id   | name   | did  | dname |</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br><span class="line">|    8 | 黑豹   | NULL | NULL  |</span><br><span class="line">|    9 | 灭霸   |    3 | NULL  |</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>RIGHT JOIN</code></p><p>左外连接，可以实现<code>B</code>以及<code>B - A∩B</code>的效果，格式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现查询结果是B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现B -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#查询B，为了更好显示效果将左外连接的语句中avengers.did修改为department.did</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  | id   | name         | did  | dname            |</span><br><span class="line">  +<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  |    1 | 钢铁侠       |    1 | 初代复仇者       |</span><br><span class="line">  |    2 | 幻视         |    2 | 新复仇者         |</span><br><span class="line">  |    3 | 觉醒雷神     |    1 | 初代复仇者       |</span><br><span class="line">  |    4 | 绿巨人       |    1 | 初代复仇者       |</span><br><span class="line">  |    5 | 猩红女巫     |    2 | 新复仇者         |</span><br><span class="line">  |    6 | 星爵         |    2 | 新复仇者         |</span><br><span class="line">  |    7 | 美国队长     |    1 | 初代复仇者       |</span><br><span class="line">  | NULL | NULL         |    5 | 测试did为5       |</span><br><span class="line">  | NULL | NULL         | NULL | 测试did为NULL    |</span><br><span class="line">  +<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#实现B -  A∩B</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line">   <span class="keyword">WHERE</span> avengers.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">   +<span class="comment">------+------+------+------------------+</span></span><br><span class="line">  | id   | name | did  | dname            |</span><br><span class="line">  +<span class="comment">------+------+------+------------------+</span></span><br><span class="line">  | NULL | NULL |    5 | 测试did为5       |</span><br><span class="line">  | NULL | NULL | NULL | 测试did为NULL    |</span><br><span class="line">  +<span class="comment">------+------+------+------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>FULL OUTER JOIN</code></p><p>全外连接，可以实现<code>A∪B</code>以及<code>A∪B - A∩B</code>，MySQL暂不支持，但能通过<code>UNION</code>实现一样的效果，<code>UNION</code>的作用为合并两个查询结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现A∪B，使用 A的结果 UNION B的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现A∪B -  A∩B，使用 (A -  A∩B)的结果  UNION （B - A∩B）的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"> UNION </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A∪B,查询所以</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"></span><br><span class="line"> <span class="keyword">UNION</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line"></span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">| id   | name         | did  | dname            |</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者       |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者       |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者       |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者       |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者         |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者         |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者         |</span><br><span class="line">|    8 | 黑豹         | NULL | NULL             |</span><br><span class="line">|    9 | 灭霸         |    3 | NULL             |</span><br><span class="line">| NULL | NULL         |    5 | 测试did为5       |</span><br><span class="line">| NULL | NULL         | NULL | 测试did为NULL    |</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#A∪B -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"><span class="keyword">WHERE</span> department.did <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">UNION</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"> <span class="keyword">WHERE</span> avengers.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"> +<span class="comment">------+--------+------+------------------+</span></span><br><span class="line">| id   | name   | did  | dname            |</span><br><span class="line">+<span class="comment">------+--------+------+------------------+</span></span><br><span class="line">|    8 | 黑豹   | NULL | NULL             |</span><br><span class="line">|    9 | 灭霸   |    3 | NULL             |</span><br><span class="line">| NULL | NULL   |    5 | 测试did为5       |</span><br><span class="line">| NULL | NULL   | NULL | 测试did为NULL    |</span><br><span class="line">+<span class="comment">------+--------+------+------------------+</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>补充</p><ul><li>关联查询时可以用<code>表名 AS 别名</code>的方式用别名代替表名。</li><li>关联的两个表可以为同一个表，这样操作时一定要使用别名区分。</li></ul></li></ul><h3 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h3><p>​    嵌套在另一个查询中的查询，根据位置不同，分为：</p><ul><li><p><code>WHERE</code>型</p><p>①子查询是单值结果，那么可以对其使用（=，&gt;等比较运算符）</p><p>②子查询是多值结果，那么可对其使用（【not】in(子查询结果)，或 &gt;all(子查询结果)，或&gt;=all(子查询结果)，&lt;all(子查询结果)，&lt;=all（子查询结果)，或 &gt;any(子查询结果)，或&gt;=any(子查询结果)，&lt;any(子查询结果)，&lt;=any（子查询结果)）    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如查询avengers表中fighting_capacity最高的成员时可以使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(fighting_capacity) <span class="keyword">FROM</span> avengers);</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line">| id   | name   | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line">|    9 | 灭霸   | 其他   |             30000 |    3 |</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询fighting_capacity大于所有did为2成员的成员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &gt; <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> fighting_capacity <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> did = <span class="number">2</span>);</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    9 | 灭霸         | 其他   |             30000 |    3 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询fighting_capacity小于所有did为1成员的成员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &lt; <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> fighting_capacity <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> did = <span class="number">1</span>);</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    8 | 黑豹         | 其他   |             13000 | NULL |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>FROM</code>型</p><p>将子查询当做一张临时的表使用，必须给子查询取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询department表中所有组织成员的平均战斗力（fighting_capacity），注意：要将统计结果当做字段名使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department.did , dname , AVG_fc <span class="keyword">AS</span> <span class="string">&#x27;平均战斗力&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> department <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> did,<span class="keyword">AVG</span>(fighting_capacity) <span class="keyword">AS</span> AVG_fc <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did) temp</span><br><span class="line"><span class="keyword">ON</span> department.did = temp.did ;</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br><span class="line">| did  | dname            | 平均战斗力      |</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br><span class="line">|    1 | 初代复仇者       |      15250.0000 |</span><br><span class="line">|    2 | 新复仇者         |      12333.3333 |</span><br><span class="line">|    5 | 测试did为5       |            NULL |</span><br><span class="line">| NULL | 测试did为NULL    |            NULL |</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>EXISTS</code>型</p><p>用于验证是否匹配子查询的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询拥有员工的组织</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> department</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> did <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> avengers.did = department.did);  </span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：不管子查询在哪里，子查询必须使用()括起来</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL的分类&quot;&gt;&lt;a href=&quot;#SQL的分类&quot; class=&quot;headerlink&quot; title=&quot;SQL的分类&quot;&gt;&lt;/a&gt;SQL的分类&lt;/h2&gt;&lt;p&gt;​    根据SQL语句的&lt;strong&gt;作用&lt;/strong&gt;将SQL语句分为&lt;strong&gt;三大类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDL —  数据定义语言（Data Define Language）&lt;a href=&quot;https://ykailh.github.io/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/&quot;&gt;DDL链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DML — 数据操纵语言（Data Manipulation Language）&lt;/li&gt;
&lt;li&gt;DCL —  数据控制语言（Data Control Language）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本文主要讲解DML&lt;/strong&gt;，DML语句一般用于对&lt;strong&gt;数据&lt;/strong&gt;进行增删改查，对应于&lt;code&gt;INSERT（新增）&lt;/code&gt;、&lt;code&gt;DELETE（删除）&lt;/code&gt;、&lt;code&gt;UPDATE（更新）&lt;/code&gt;、&lt;code&gt;SELECT（查询）&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SQL语法" scheme="http://yoursite.com/tags/SQL%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之SQL语法(DDL)</title>
    <link href="http://yoursite.com/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/"/>
    <id>http://yoursite.com/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/</id>
    <published>2020-08-20T09:36:43.000Z</published>
    <updated>2020-09-03T03:05:11.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h2><p>​    根据SQL语句的<strong>作用</strong>将SQL语句分为<strong>三大类：</strong></p><ul><li>DDL —  数据定义语言（Data Define Language）</li><li>DML — 数据操纵语言（Data Manipulation Language）<a href="https://ykailh.github.io/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/">DML链接</a></li><li>DCL —  数据控制语言（Data Control Language）</li></ul><p><strong>本文主要讲解DDL</strong>，DDL语句一般作用于<strong>数据库和表</strong>，包含<code>CREATE（创建）</code>，<code>ALTER（修改）</code>，<code>DROP（删除）</code>，<code>TRUNCATE（截断）</code>，<code>RENAME（重命名）</code>；</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><h3 id="1-查看当前数据库清单"><a href="#1-查看当前数据库清单" class="headerlink" title="1.查看当前数据库清单"></a>1.查看当前数据库清单</h3><p>格式：<code>SHOW DATEBASES;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mysql中的数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><h3 id="2-使用某个数据库"><a href="#2-使用某个数据库" class="headerlink" title="2.使用某个数据库"></a>2.使用某个数据库</h3><p>使用数据库后的操作默认在这个数据库下进行</p><p>格式： <code>USE 数据库名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用test数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h3><p>格式：<code>CREATE DATABASE 数据库名；</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个名为test2的数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有数据库进行验证</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| test2              |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><h3 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4.删除数据库"></a>4.删除数据库</h3><p>格式：<code>DROP DATABASE 数据库名；</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除刚才创建的名为test2的数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> test2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有数据库进行验证</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><h2 id="表相关"><a href="#表相关" class="headerlink" title="表相关"></a>表相关</h2><h3 id="1-查看数据库的所有表清单"><a href="#1-查看数据库的所有表清单" class="headerlink" title="1.查看数据库的所有表清单"></a>1.查看数据库的所有表清单</h3><p>格式：<code>SHOW TABLES FROM 数据库名;</code></p><p>若已经使用（USE）数据库，可以使用<code>SHOW TABLES</code>来查看这个数据库的所有表清单。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看test数据库中的表清单</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用数据库情况下查看表清单</span></span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h3 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h3><p>格式：<code>CREATE TABLE 数据库名.表名(字段名1 数据类型，字段名2 数据类型，...字段名n 数据类型);</code></p><p>若已经使用（USE）数据库，若想将表创建在这个数据库下，可以省略<code>数据库名.</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在test库中创建名为t_stu的表，包含4个字段。因为之前使用过数据库所以省略test.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.t_stu(</span><br><span class="line">            <span class="keyword">sid</span> <span class="built_in">INT</span>,</span><br><span class="line">            sname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">            gender <span class="built_in">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">            birthday <span class="built_in">DATE</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表清单进行验证</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| t_stu          |</span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h3 id="3-查看表结构"><a href="#3-查看表结构" class="headerlink" title="3.查看表结构"></a>3.查看表结构</h3><p>格式：<code>DESC 数据库名.表明;</code></p><p>已经使用（USE）数据库的情况下，若想查看在这个数据库下表的结构，可以省略<code>数据库名.</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看刚才创建的t_stu表的表结构</span></span><br><span class="line">DESC t_stu;</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| sid      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| sname    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| gender   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date        | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure><h3 id="4-修改表名称"><a href="#4-修改表名称" class="headerlink" title="4.修改表名称"></a>4.修改表名称</h3><p><strong>通常情况：</strong></p><p>​    在已经使用（USE）数据库的情况下使用一下两种格式均可修改表名称：</p><ul><li><code>RENAME TABLE 旧表名 TO 新表名;</code></li><li><code>ALTER TABLE 旧表名 RENAME 新表名;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通常情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将上面创建的t_stu表改名为student</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">TO</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表清单进行验证</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| student        |</span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用另一种方式将表名改回t_stu</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">RENAME</span> t_stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">#效果相同</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| t_stu          |</span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><p><strong>特殊情况：</strong></p><p>​    <code>RENAME TABLE 数据库名.旧表名 TO 数据库名.新表名;</code></p><p>​    若新旧表名前为同一个数据库则等价于上面两种方式。但若为不同的数据库，执行语句后会将重命名后的表    移动到新表明前的数据库当中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#特殊情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个名为test2的数据库，当前为空</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> test2;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名时将test中的t_stu表移动到test2中</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> test.t_stu <span class="keyword">TO</span> test2.student;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看两个数据库的表清单进行验证。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> test2;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| Tables_in_test2 |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| student         |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br></pre></td></tr></table></figure><h3 id="5-修改表结构"><a href="#5-修改表结构" class="headerlink" title="5.修改表结构"></a>5.修改表结构</h3><ul><li><p><strong>增加字段</strong></p><p>格式：<code>ALTER TABLE 表名 ADD [COLUMN] 新字段名 数据类型 [添加位置]</code></p><p><code>COLUMN</code>可以<strong>省略</strong>不写，而添加位置有<strong>两种</strong>写法：</p><ol><li><p><code>FIRST</code>,表示将新字段增加到表的第一列。</p></li><li><p><code>AFTER 字段名</code>，表示将新字段增加到该字段后。</p><p><strong>若省略添加位置则默认添加到表的最后一列。</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为方便演示先将t_stu表从test2中还原</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> test2.student <span class="keyword">TO</span> test.t_stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增abc三个字段在t_stu的不同位置</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">ADD</span> a <span class="built_in">int</span>;<span class="comment">#默认添加到表最后一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">ADD</span> b <span class="keyword">double</span> <span class="keyword">FIRST</span>;<span class="comment">#第一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">ADD</span> c <span class="built_in">char</span> <span class="keyword">AFTER</span> sname;<span class="comment">#sanme字段的后一列</span></span><br><span class="line"><span class="comment">#查询表结构验证</span></span><br><span class="line">DESC t_stu;</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| b        | double      | YES  |     | NULL    |       |</span><br><span class="line">| sid      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| sname    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| c        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| gender   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date        | YES  |     | NULL    |       |</span><br><span class="line">| a        | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改字段类型或位置</strong></p><p>格式：<code>ALTER TABLE 表名 MODIFY [COLUMN] 字段名 新的数据类型 [添加位置]</code></p><p><code>COLUMN</code>可以<strong>省略</strong>不写，添加位置写法和上面一致，<strong>不写则保持不变</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改字段a的类型为int(6)，位置在sid字段后一列。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">MODIFY</span> a <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">AFTER</span> <span class="keyword">sid</span>;</span><br><span class="line"><span class="comment">#查看表结构验证</span></span><br><span class="line">DESC t_stu;</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| b        | double      | YES  |     | NULL    |       |</span><br><span class="line">| sid      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| a        | int(6)      | YES  |     | NULL    |       |</span><br><span class="line">| sname    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| c        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| gender   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date        | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改字段名称</strong></p><p>格式：<code>ALTER TABLE 表名 CHANGE [COLUMN] 旧字段名 新字段名 数据类型</code></p><p><code>COLUMN</code>可以<strong>省略</strong>不写,数据类型不可省略，若与原来不一致则会同时修改该字段的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将字段a的名字改为d 数据类型改为CHAR</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu  <span class="keyword">CHANGE</span> a d <span class="built_in">CHAR</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表结构验证</span></span><br><span class="line">DESC t_stu;</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| b        | double      | YES  |     | NULL    |       |</span><br><span class="line">| sid      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| d        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| sname    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| c        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| gender   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date        | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除字段</strong></p><p>格式：<code>ALTER TABLE 表名 DROP [COLUMN] 字段名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除字段b</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_stu <span class="keyword">DROP</span> b；</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表结构验证</span></span><br><span class="line"><span class="keyword">DESC</span> t_stu;</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line">| sid      | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| d        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| sname    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| c        | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| gender   | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birthday | date        | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-删除表"><a href="#6-删除表" class="headerlink" title="6.删除表"></a>6.删除表</h3><p>​    格式：<code>DROP TABLE 数据库名.表名</code> </p><p>​    已经使用（USE）数据库的情况下，若想删除在这个数据库下的表，可以省略<code>数据库名.</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看test中已有的表</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| t_stu          |</span><br><span class="line">| test_table     |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"><span class="comment">#删除表test_table</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看表清单进行验证</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| t_stu          |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>​    约束是<strong>防止</strong>数据库中<strong>存在不符合语义规定的数据</strong>和<strong>防止因错误信息的输入输出</strong>造成无效操作或错误信息而提出的。简单的说就是原来保证<strong>数据完整性</strong>。保证数据是精确的、可靠的。</p><p><strong>数据的完整性要从以下四个方面考虑：</strong></p><ul><li><p><strong>实体完整性（Entity Integrity）</strong>：例如，同一个表中，不能存在两条完全相同无法区分的记录</p></li><li><p><strong>域完整性（Domain Integrity）</strong>：例如：年龄范围0-120，性别范围“男/女”</p></li><li><p><strong>引用完整性（Referential Integrity）</strong>：例如：员工所在部门，在部门表中要能找到这个部门</p></li><li><p><strong>用户自定义完整性（User-defined Integrity）</strong>：例如：用户名唯一、密码不能为空等。</p><p><strong>MySQL中有以下几种类型的约束</strong></p></li></ul><h3 id="1-主键约束（PRIMARY-KEY）"><a href="#1-主键约束（PRIMARY-KEY）" class="headerlink" title="1.主键约束（PRIMARY KEY）"></a>1.主键约束（PRIMARY KEY）</h3><p><strong>主键约束的特点：</strong></p><ul><li><p>主键列中的值必须是唯一的，且不能为NULL。</p></li><li><p>每张表中只能存在一个主键约束。</p></li><li><p>主键约束名为PRIMARY。</p></li><li><p>创建主键会自动创建对应的索引，同样删除主键对应的索引也会删除。</p></li><li><p>主键约束分为单列主键约束和复合主键约束两种。</p><blockquote><p>单列主键约束要求主键中的只唯一，而复合主键的值要求的是复合主键的几个字段值的组合需要唯一</p></blockquote></li></ul><p><strong>建表时使用主键约束：</strong></p><p>​    <strong>方式一：</strong>在需要添加主键约束的数据类型后增加关键字<code>PRIMARY KEY</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    <strong>方式二：</strong>在定义表字段的最后增加<code>PRIMARY KEY(字段列表)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(字段列表)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​        <strong>方式一只能用来定义单列表主键，方式二两种类型均可定义</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个表，将id字段设为主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_primary(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#尝试添加两个相同的值到主键列中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_primary <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>),(<span class="number">1</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复合主键演示，定义一个成绩表，将姓名（name）和课程编号（cid）设为复合主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_primarys(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cid <span class="built_in">INT</span>,</span><br><span class="line">    score <span class="keyword">DOUBLE</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">name</span>,<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">#添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_primarys <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1001</span>,<span class="number">89.7</span>),(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1002</span>,<span class="number">67.5</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">1001</span>,<span class="number">86.3</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">1002</span>,<span class="number">67.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#name与cid单行均有重复，但组合无重复，符合主键约束的条件。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_primarys;</span><br><span class="line">+<span class="comment">--------+------+-------+</span></span><br><span class="line">| name   | cid  | score |</span><br><span class="line">+<span class="comment">--------+------+-------+</span></span><br><span class="line">| 张三   | 1001 |  89.7 |</span><br><span class="line">| 张三   | 1002 |  67.5 |</span><br><span class="line">| 李四   | 1001 |  86.3 |</span><br><span class="line">| 李四   | 1002 |  67.5 |</span><br><span class="line">+<span class="comment">--------+------+-------+</span></span><br></pre></td></tr></table></figure><p><strong>建表后添加主键约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 ADD PRIMARY KEY(字段列表)</code>。</p><p>​    <strong>若该字段列中的值不满足唯一且不为NULL的条件则添加失败。</strong></p><p><strong>删除主键约束：</strong></p><p>​        格式：<code>ALTER TABLE [数据库名.]表名 DROP PRIMARY KEY</code>。</p><h3 id="2-唯一键约束（UNIQUE-KEY）"><a href="#2-唯一键约束（UNIQUE-KEY）" class="headerlink" title="2.唯一键约束（UNIQUE KEY）"></a>2.唯一键约束（UNIQUE KEY）</h3><p>​    唯一键约束和主键约束有许多相同的地方，主要关注他们的差异。</p><p>​    <strong>唯一键约束的特点：</strong></p><ul><li>主键列中的值必须是唯一的，但可以为NULL。</li><li>每张表中可以存在多个唯一键约束。</li><li>主键约束名可以自定义，默认为字段名。</li><li>创建主键会自动创建对应的索引，删除时是通过删除索引的方式删除唯一键。</li><li>唯一键约束分也为单列唯一键约束和复合唯一键约束两种。</li></ul><p><strong>建表时使用唯一键约束：</strong></p><p>​    <strong>方式一：</strong>在需要添加唯一键约束的数据类型后增加关键字<code>    UNIQUE KEY</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    <strong>方式二：</strong>在定义表字段的最后增加<code>UNIQUE KEY(字段列表)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>(字段列表)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    <strong>方式一只能用来定义单列表唯一键，方式二两种类型均可定义</strong>。</p><p><strong>建表后添加主键约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 ADD UNIQUE KEY(字段列表)</code>。</p><p>​    <strong>若该字段列中的值不唯一则添加失败。</strong></p><p><strong>删除主键约束：</strong></p><p>​    删除方式与主键不相同，唯一键是通过删除对应的索引来删除的。</p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 DROP INDEX 索引名</code>。</p><p>​    如果忘记索引名可以通过<code>SHOW INDEX FROM [数据库名.]表名</code>来查询</p><h3 id="3-非空约束（NOT-NULL）"><a href="#3-非空约束（NOT-NULL）" class="headerlink" title="3.非空约束（NOT NULL）"></a>3.非空约束（NOT NULL）</h3><p>​    限制字段的值不能为NULL</p><p><strong>非空约束的特点：</strong></p><ul><li>非空约束列中的值不能为NULL。</li><li>非空约束只能定义在单个字段中。</li><li>每张表中只能存在多个非空约束。</li><li>非空约束要求该字段必须包含值否则无法新增或更新数据。</li></ul><p><strong>建表时使用非空约束：</strong></p><p>​    在需要添加非空约束的数据类型后增加关键字<code>NOT NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个表，将id字段设为非空</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_notnull(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#尝试插入NULL值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_notnull <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="comment">#错误提示id不能为NULL</span></span><br><span class="line">ERROR 1048 (23000): Column &#x27;id&#x27; cannot be null</span><br><span class="line"></span><br><span class="line"><span class="comment">#只插入name值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_notnull(<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="comment">#错误提示id没有默认值</span></span><br><span class="line">ERROR 1364 (HY000): Field &#x27;id&#x27; doesn&#x27;t have a default value</span><br></pre></td></tr></table></figure><p><strong>建表后添加非空约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型 NOT NULL</code>。</p><p>​    <strong>若该字段列中存在NULL添加失败。</strong></p><p><strong>删除非空约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型</code>。</p><h3 id="4-默认值约束（DEFAULT-）"><a href="#4-默认值约束（DEFAULT-）" class="headerlink" title="4.默认值约束（DEFAULT ）"></a>4.默认值约束（DEFAULT ）</h3><p>​    用于给字段增加默认值。</p><p><strong>默认值约束的特点：</strong></p><ul><li>默认值约束只能定义在单个字段中。</li><li>每张表中只能存在多个默认值约束。</li><li>新增数据时若没有指定该字段的数值会按照默认值处理。</li></ul><p><strong>建表时使用默认值约束：</strong></p><p>​    在需要添加默认值约束的数据类型后增加关键字<code>DEFAULT 默认值</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个表，将name字段的默认值设为&quot;无名&quot;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_default(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;无名&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置了默认值不代表赋值时可以省略</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_default <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br><span class="line">ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1        &#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment">#而是在未赋值时赋默认值，而不是NULL。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_default(<span class="keyword">id</span>) <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_default;</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| id | name   |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">|  1 | 无名   |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想在新增时可以使用DEFAULT代表默认值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_default <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_default;</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| id | name   |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">|  1 | 无名   |</span><br><span class="line">|  2 | 无名   |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br></pre></td></tr></table></figure><p><strong>建表后添加非空约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型 DEFAULT 默认值</code>。</p><p>​    需要注意的是如果字段本身有非空约束需要在修改中提现，否则相当于删除非空约束。</p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型 DEFAULT 默认值 NOT NULL</code> 。</p><p><strong>删除非空约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型</code>。</p><p>​    同理的，如果同时存在非空约束</p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型 NOT NULL</code>。</p><h3 id="5-自增约束（AUTO-INCREMENT）"><a href="#5-自增约束（AUTO-INCREMENT）" class="headerlink" title="5.自增约束（AUTO_INCREMENT）"></a>5.自增约束（AUTO_INCREMENT）</h3><p>​    用于使字段值自动增长。</p><p><strong>自增约束的特点：</strong></p><ul><li>一个表只能有<strong>一个</strong>自增约束。</li><li>自增约束的列必须是<strong>键列</strong>（主键列，唯一键列，外键列），并且要求<strong>非空</strong>。</li><li>自增列必须是整数类型</li><li>InnoDB（MySQL默认引擎）表的自动增长列可以手动插入，但是插入的值如果是空或者0，则实际插入的将是自动增长后的值。</li></ul><p><strong>建表时使用自增约束：</strong></p><p>​    在需要添加自增约束的数据类型后增加关键字<code>AUTO_INCREMENT</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [xx <span class="keyword">KEY</span>] AUTO_INCREMENT,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个表，将id字段设置为主键并自增</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_auto(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#未给id赋值自动从1开始自增</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto(<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;未给id赋值&#x27;</span>),(<span class="string">&#x27;未给id赋值&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_auto;</span><br><span class="line">+<span class="comment">----+----------------+</span></span><br><span class="line">| id | name           |</span><br><span class="line">+<span class="comment">----+----------------+</span></span><br><span class="line">|  1 | 未给id赋值     |</span><br><span class="line">|  2 | 未给id赋值     |</span><br><span class="line">+<span class="comment">----+----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#给id赋值为0或NULL会按照自增值处理</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto <span class="keyword">VALUES</span>(<span class="number">0</span>,<span class="string">&#x27;给id赋值0&#x27;</span>),(<span class="literal">NULL</span>,<span class="string">&#x27;给id赋值NULL&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_auto;</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line">| id | name            |</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line">|  1 | 未给id赋值      |</span><br><span class="line">|  2 | 未给id赋值      |</span><br><span class="line">|  3 | 给id赋值0       |</span><br><span class="line">|  4 | 给id赋值NULL    |</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若给id赋值一个大于当前自增约束的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">&#x27;给id赋值10&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto(<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;未给id赋值&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_auto;</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line">| id | name            |</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line">|  1 | 未给id赋值      |</span><br><span class="line">|  2 | 未给id赋值      |</span><br><span class="line">|  3 | 给id赋值0       |</span><br><span class="line">|  4 | 给id赋值NULL    |</span><br><span class="line">| 10 | 给id赋值10      |</span><br><span class="line">| 11 | 未给id赋值      |</span><br><span class="line">+<span class="comment">----+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若给id赋值小于当前值 可以赋值成功，但不会改变当前的自增值。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;当前自增值为11,给id赋值6&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto(<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;未给id赋值&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_auto;</span><br><span class="line">+<span class="comment">----+-----------------------------------+</span></span><br><span class="line">| id | name                              |</span><br><span class="line">+<span class="comment">----+-----------------------------------+</span></span><br><span class="line">|  1 | 未给id赋值                        |</span><br><span class="line">|  2 | 未给id赋值                        |</span><br><span class="line">|  3 | 给id赋值0                         |</span><br><span class="line">|  4 | 给id赋值NULL                      |</span><br><span class="line">|  6 | 当前自增值为11,给id赋值6          |</span><br><span class="line">| 10 | 给id赋值10                        |</span><br><span class="line">| 11 | 未给id赋值                        |</span><br><span class="line">| 12 | 未给id赋值                        |</span><br><span class="line">+<span class="comment">----+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于负数也是一样的情况</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto <span class="keyword">VALUES</span>(<span class="number">-3</span>,<span class="string">&#x27;当前自增值为12,给id赋值-3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_auto(<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;未给id赋值&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_auto;</span><br><span class="line">+<span class="comment">----+------------------------------------+</span></span><br><span class="line">| id | name                               |</span><br><span class="line">+<span class="comment">----+------------------------------------+</span></span><br><span class="line">| -3 | 当前自增值为12,给id赋值-3          |</span><br><span class="line">|  1 | 未给id赋值                         |</span><br><span class="line">|  2 | 未给id赋值                         |</span><br><span class="line">|  3 | 给id赋值0                          |</span><br><span class="line">|  4 | 给id赋值NULL                       |</span><br><span class="line">|  6 | 当前自增值为11,给id赋值6           |</span><br><span class="line">| 10 | 给id赋值10                         |</span><br><span class="line">| 11 | 未给id赋值                         |</span><br><span class="line">| 12 | 未给id赋值                         |</span><br><span class="line">| 13 | 未给id赋值                         |</span><br><span class="line">+<span class="comment">----+------------------------------------+</span></span><br></pre></td></tr></table></figure><p>​        <strong><em>以上测试仅为了解自增约束的特性，实际开发当中不建议进行过多操作</em></strong></p><p><strong>建表后添加自增约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型 AUTO_INCREMENT</code>。</p><p><strong>删除自增约束：</strong></p><p>​    格式：<code>ALTER TABLE [数据库名.]表名 MODIFY 字段名 数据类型</code>。</p><h3 id="6-检查约束（CHECK）"><a href="#6-检查约束（CHECK）" class="headerlink" title="6.检查约束（CHECK）"></a>6.检查约束（CHECK）</h3><p>​    用于新增或修改数据时限制数据的范围，<strong>MySQL暂不支持检查约束。</strong></p><p>​    可以在语句中使用但不会生效,只做一个简单演示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个表，限定id需要大于等于0</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_check(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">CHECK</span>(<span class="keyword">id</span>&gt;=<span class="number">0</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表不会报错,但依然可以成功插入负数</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_check <span class="keyword">VALUES</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_check;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| id   |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|   -1 |</span><br><span class="line">+<span class="comment">------+</span></span><br></pre></td></tr></table></figure><h3 id="7-外键约束（FOREIGN-KEY）"><a href="#7-外键约束（FOREIGN-KEY）" class="headerlink" title="7.外键约束（FOREIGN KEY）"></a>7.外键约束（FOREIGN KEY）</h3><p>​    外键约束是<strong>构建于</strong>一个表的两个字段或是两个表的两个字段之间的<strong>参照关系</strong>。用来保证一个或两个表之间的<strong>参照完整性。</strong>在参照关系中<strong>被参考方</strong>称为<strong>父表/主表</strong>，<strong>参考方</strong>称为<strong>子表/从表</strong>，外键约束<strong>建立语句写在子表/从表中</strong>。</p><p>​    <strong>外键约束的特点：</strong></p><ul><li>一个表可以建立<strong>多个</strong>外键约束</li><li>从表的外键列，在主表中引用的只能是<strong>键列（主键，唯一键，外键）</strong>。</li><li>从表的外键列与主表被参照的列<strong>名字可以不相同</strong>，但是数<strong>据类型必须类似</strong>（数值类型的长度以及有无符号等需要一致，字符串长度可以不一致）。</li><li>在创建外键约束时，如果不给外键约束名称，默认名不是列名，而是<strong>自动产生一个外键名</strong>（例如 student_ibfk_1;），也可以指定外键约束名。</li><li>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是列名，不是外键的约束名。</li><li>删除外键时，关于外键列上的普通索引需要单独删除。</li></ul><p><strong>建表时使用自增约束：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [数据库名.]从表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型,</span><br><span class="line">    字段名<span class="number">2</span> 数据类型,</span><br><span class="line">    字段名<span class="number">3</span> 数据类型,</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段)</span><br><span class="line">    [<span class="keyword">ON</span> <span class="keyword">UPDATE</span> 外键约束等级] [<span class="keyword">ON</span> <span class="keyword">DELETE</span> 外键约束等级]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>外键约束是针对双方的</strong></p><ul><li><p>添加了外键约束后，主表的<strong>修改和删除</strong>受约束</p></li><li><p>添加了外键约束后，从表的<strong>添加和修改</strong>受约束</p></li></ul><p><strong>约束等级分为以下五种：</strong></p><ul><li><p><strong>CASCADE方式：</strong></p><p>在父表上UPDATE/DELETE记录时，<strong>同步</strong>UPDATE/DELETE到子表的匹配记录 。</p></li><li><p><strong>SET NULL方式：</strong></p><p>在父表上UPDATE/DELETE记录时，将子表上匹配记录的列<strong>设为NULL</strong>，但是要注意子表的外键列<strong>不能为NOT NULL</strong>。  </p></li><li><p><strong>NO ACTION方式：</strong></p><p>如果子表中有匹配的记录,则<strong>不允许</strong>对父表对应候选键进行<strong>UPDATE/DELETE操作</strong>。若创建外键时未指定约束等级则默认为NO ACTION。</p></li><li><p><strong>RESTRICT方式：</strong></p><p>同NO ACTION, 都是<strong>立即检查外键约束</strong>。</p></li><li><p><strong>SET DEFAULT方式：</strong></p><p>父表有变更时,子表将外键列设置成一个默认的值，但<strong>Innodb不能识别</strong>。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建部门表作为主表并插入两条数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">    did <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment">#部门id</span></span><br><span class="line">    dname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="comment">#部门名称</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;研发部&#x27;</span>),(<span class="number">1002</span>,<span class="string">&#x27;产品部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建员工表作为从表，所属部门id（staff.did）参考于部门id（department.did）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> staff(</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">INT</span>, <span class="comment">#员工id</span></span><br><span class="line">    did <span class="built_in">INT</span>, <span class="comment">#所示部门id</span></span><br><span class="line">    sname <span class="built_in">VARCHAR</span>(<span class="number">10</span>),<span class="comment">#员工姓名</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (did) <span class="keyword">REFERENCES</span> department(did)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">#插入一个没有匹配的部门id，报错</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> staff <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">10086</span>,<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">ERROR 1452 (23000): Cannot add or <span class="keyword">update</span> a <span class="keyword">child</span> <span class="keyword">row</span>:....</span><br><span class="line"></span><br><span class="line"><span class="comment">#正常插入几条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> staff <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">1001</span>,<span class="string">&#x27;A&#x27;</span>),(<span class="number">2</span>,<span class="number">1002</span>,<span class="string">&#x27;B&#x27;</span>),(<span class="number">3</span>,<span class="number">1002</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> staff;</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">| sid  | did  | sname |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">|    1 | 1001 | A     |</span><br><span class="line">|    2 | 1002 | B     |</span><br><span class="line">|    3 | 1002 | C     |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除1001部门，将1002部门的编号改为1005</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> department <span class="keyword">WHERE</span> did = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> department <span class="keyword">SET</span> did = <span class="number">1005</span> <span class="keyword">WHERE</span> did = <span class="number">1002</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于DELETE约束等级为SET NULL 删除1001部门后，员工表中属于该部门的did变为NULL值</span></span><br><span class="line"><span class="comment">#UPDATE等级为CASCADE，将1002部门编号修改为1005后员工表中内容同步修改。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> staff;</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">| sid  | did  | sname |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br><span class="line">|    1 | NULL | A     |</span><br><span class="line">|    2 | 1005 | B     |</span><br><span class="line">|    3 | 1005 | C     |</span><br><span class="line">+<span class="comment">------+------+-------+</span></span><br></pre></td></tr></table></figure><p><strong>建表后添加自增约束：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [数据库名.]表名 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名]</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段)</span><br><span class="line">    [<span class="keyword">ON</span> <span class="keyword">UPDATE</span> 外键约束等级] [<span class="keyword">ON</span> <span class="keyword">DELETE</span> 外键约束等级]。</span><br></pre></td></tr></table></figure><p><strong>删除自增约束：</strong></p><p><code>ALTER TABLE 表名称 DROP FOREIGN KEY 外键约束名;</code></p><p><strong>查看约束名:</strong></p><p><code> SELECT * FROM information_schema.table_constraints WHERE table_name = &#39;表名称&#39;;</code><br><strong>删除外键约束不会删除对应的索引，如果需要删除索引，需要用</strong></p><p><code>ALTER TABLE 表名称 DROP INDEX 索引名;</code><br><strong>查看索引名</strong></p><p><code> show index from 表名称;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL的分类&quot;&gt;&lt;a href=&quot;#SQL的分类&quot; class=&quot;headerlink&quot; title=&quot;SQL的分类&quot;&gt;&lt;/a&gt;SQL的分类&lt;/h2&gt;&lt;p&gt;​    根据SQL语句的&lt;strong&gt;作用&lt;/strong&gt;将SQL语句分为&lt;strong&gt;三大类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDL —  数据定义语言（Data Define Language）&lt;/li&gt;
&lt;li&gt;DML — 数据操纵语言（Data Manipulation Language）&lt;a href=&quot;https://ykailh.github.io/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/&quot;&gt;DML链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DCL —  数据控制语言（Data Control Language）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本文主要讲解DDL&lt;/strong&gt;，DDL语句一般作用于&lt;strong&gt;数据库和表&lt;/strong&gt;，包含&lt;code&gt;CREATE（创建）&lt;/code&gt;，&lt;code&gt;ALTER（修改）&lt;/code&gt;，&lt;code&gt;DROP（删除）&lt;/code&gt;，&lt;code&gt;TRUNCATE（截断）&lt;/code&gt;，&lt;code&gt;RENAME（重命名）&lt;/code&gt;；&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SQL语法" scheme="http://yoursite.com/tags/SQL%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之运算符</title>
    <link href="http://yoursite.com/2020/08/19/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/08/19/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-08-19T08:21:44.000Z</published>
    <updated>2020-08-26T08:00:10.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL运算符"><a href="#MySQL运算符" class="headerlink" title="MySQL运算符"></a>MySQL运算符</h1><p>​    MySQL的运算符分为<strong>算术运算符</strong>、<strong>比较运算符</strong>、<strong>逻辑运算符</strong>、<strong>位运算符</strong>四个类型。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>MySQL 支持的算术运算符包括:</p><table><thead><tr><th align="left">运算符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">/</td><td align="left">除法</td></tr><tr><td align="left">DIV</td><td align="left">商</td></tr><tr><td align="left">% 或 MOD</td><td align="left">取余</td></tr></tbody></table><p><strong>做一个简单的演示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MySQL运算符演示</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span>+<span class="number">3</span> , <span class="number">2</span><span class="number">-3</span> , <span class="number">2</span>*<span class="number">3</span> , <span class="number">2</span>/<span class="number">3</span> , <span class="number">2</span> <span class="keyword">DIV</span> <span class="number">3</span> , <span class="number">2</span> <span class="keyword">MOD</span> <span class="number">3</span> , <span class="number">2</span> % <span class="number">3</span>;</span><br><span class="line">+<span class="comment">-------+-------+-------+--------+---------+---------+-------+</span></span><br><span class="line">| 2 + 3 | 2 - 3 | 2 * 3 | 2 / 3  | 2 DIV 3 | 2 MOD 3 | 2 % 3 |</span><br><span class="line">+<span class="comment">-------+-------+-------+--------+---------+---------+-------+</span></span><br><span class="line">|     5 |    -1 |     6 | 0.6667 |       0 |       2 |     2 |</span><br><span class="line">+<span class="comment">-------+-------+-------+--------+---------+---------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#除法、商、取余操作时，若除数为0则返回NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span>/<span class="number">0</span> , <span class="number">2</span> <span class="keyword">DIV</span> <span class="number">0</span> , <span class="number">2</span> <span class="keyword">MOD</span> <span class="number">0</span>;</span><br><span class="line">+<span class="comment">------+---------+---------+</span></span><br><span class="line">| 2/0  | 2 DIV 0 | 2 MOD 0 |</span><br><span class="line">+<span class="comment">------+---------+---------+</span></span><br><span class="line">| NULL |    NULL |    NULL |</span><br><span class="line">+<span class="comment">------+---------+---------+</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符一般用于<strong>查询语句</strong>，若比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th align="left">符号</th><th align="left">描述</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td><td align="left"></td></tr><tr><td align="left">&lt;&gt;, !=</td><td align="left">不等于</td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left"></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left"></td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td><td align="left"></td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td><td align="left"></td></tr><tr><td align="left">BETWEEN</td><td align="left">在两值之间</td><td align="left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td align="left">NOT BETWEEN</td><td align="left">不在两值之间</td><td align="left"></td></tr><tr><td align="left">IN</td><td align="left">在集合中</td><td align="left"></td></tr><tr><td align="left">NOT IN</td><td align="left">不在集合中</td><td align="left"></td></tr><tr><td align="left">&lt;=&gt;</td><td align="left">严格比较两个NULL值是否相等</td><td align="left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td align="left">LIKE</td><td align="left">模糊匹配</td><td align="left"></td></tr><tr><td align="left">REGEXP 或 RLIKE</td><td align="left">正则式匹配</td><td align="left"></td></tr><tr><td align="left">IS NULL</td><td align="left">为空</td><td align="left"></td></tr><tr><td align="left">IS NOT NULL</td><td align="left">不为空</td><td align="left"></td></tr></tbody></table><h3 id="1-大小比较"><a href="#1-大小比较" class="headerlink" title="1.大小比较"></a>1.大小比较</h3><p>​        判断两个值的<strong>大小关系</strong>，包括<strong>大于小于等于系列</strong>的符号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#等于的几种情况，一般比较运算符如果涉及NULL返回值也为NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span> = <span class="number">1</span> , <span class="number">2</span> = <span class="number">2</span> , <span class="string">&#x27;2&#x27;</span>= <span class="number">2</span> , (<span class="number">1</span>+<span class="number">1</span>) = <span class="number">2</span> , <span class="number">2</span> = <span class="literal">NULL</span> , <span class="literal">NULL</span> = <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">-------+-------+--------+-----------+----------+-------------+</span></span><br><span class="line">| 2 = 1 | 2 = 2 | &#x27;2&#x27;= 2 | (1+1) = 2 | 2 = NULL | NULL = NULL |</span><br><span class="line">+<span class="comment">-------+-------+--------+-----------+----------+-------------+</span></span><br><span class="line">|     0 |     1 |      1 |         1 |     NULL |        NULL |</span><br><span class="line">+<span class="comment">-------+-------+--------+-----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#比较运算符用于比较字符串，从左到右比较字符编码值，但不区分大小写。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> = <span class="string">&#x27;A&#x27;</span> , <span class="string">&#x27;b&#x27;</span> &gt; <span class="string">&#x27;A&#x27;</span> , <span class="string">&#x27;ac&#x27;</span>&lt; <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">+<span class="comment">-----------+-----------+-------------+</span></span><br><span class="line">| &#x27;a&#x27; = &#x27;A&#x27; | &#x27;b&#x27; &gt; &#x27;A&#x27; | &#x27;ac&#x27;&lt; &#x27;abc&#x27; |</span><br><span class="line">+<span class="comment">-----------+-----------+-------------+</span></span><br><span class="line">|         1 |         1 |           0 |</span><br><span class="line">+<span class="comment">-----------+-----------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其余运算符使用方式一致，不一一举例。</span></span><br></pre></td></tr></table></figure><h3 id="2-区间与集合"><a href="#2-区间与集合" class="headerlink" title="2.区间与集合"></a>2.区间与集合</h3><p>​    判断值是否在范围当中，包括<strong>区间范围</strong><code>BETWEEN</code>与<strong>集合范围</strong><code>IN</code>。</p><p><strong>区间范围：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断是否在区间中语法 值 BETWEEN 左端点 AND 右端点 OR 另一个左端点 AND 另一个右端点....；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如判断 4 是否在区间 [3,5] ∪ [6,8]</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="number">4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span> <span class="keyword">OR</span>  <span class="number">6</span> <span class="keyword">AND</span> <span class="number">8</span>;</span><br><span class="line">+<span class="comment">-------------------------------+</span></span><br><span class="line">| 4 BETWEEN 3 AND 5 OR  6 AND 8 |</span><br><span class="line">+<span class="comment">-------------------------------+</span></span><br><span class="line">|                             1 |</span><br><span class="line">+<span class="comment">-------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以判断字符串，涉及NULL值返回NULL.</span></span><br><span class="line"> <span class="keyword">SELECT</span>  <span class="string">&#x27;AB&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;ABC&#x27;</span> , <span class="number">4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">----------------------------+----------------------+</span></span><br><span class="line">| &#x27;AB&#x27; BETWEEN &#x27;A&#x27; AND &#x27;ABC&#x27; | 4 BETWEEN 3 AND NULL |</span><br><span class="line">+<span class="comment">----------------------------+----------------------+</span></span><br><span class="line">|                          1 |                 NULL |</span><br><span class="line">+<span class="comment">----------------------------+----------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若在BETWEEN前加NOT则表示判断是否不在集合范围内，即判断是否在集合的补集范围当中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如判断4是否不在区间[3,5]</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="number">4</span> <span class="keyword">NOT</span>  <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">5</span>;</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| 4 NOT  BETWEEN 3 AND 5 |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">|                      0 |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br></pre></td></tr></table></figure><p><strong>集合范围：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断是否在集合中语法 值 IN （元素1，元素2，元素3....） or 另一个集合；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如判断 4 是否在集合&#123;1,2,4,5&#125;中</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| 4 IN (1,2,4,5) |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">|              1 |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#值为NULL时返回NULL，无论集合中是否有NULL.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>) , <span class="literal">NULL</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NULL</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">+<span class="comment">-------------------+------------------------+</span></span><br><span class="line">| NULL IN (1,2,4,5) | NULL IN (1,2,NULL,4,5) |</span><br><span class="line">+<span class="comment">-------------------+------------------------+</span></span><br><span class="line">|              NULL |                   NULL |</span><br><span class="line">+<span class="comment">-------------------+------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若集合中有NULL，如果值在集合中返回1，不在集合返回NULL而不是返回0；</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">4</span>  <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NULL</span>,<span class="number">4</span>,<span class="number">5</span>) , <span class="number">6</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NULL</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">+<span class="comment">----------------------+---------------------+</span></span><br><span class="line">| 4  IN (1,2,NULL,4,5) | 6 IN (1,2,NULL,4,5) |</span><br><span class="line">+<span class="comment">----------------------+---------------------+</span></span><br><span class="line">|                    1 |                NULL |</span><br><span class="line">+<span class="comment">----------------------+---------------------+</span></span><br></pre></td></tr></table></figure><h3 id="3-模糊匹配"><a href="#3-模糊匹配" class="headerlink" title="3.模糊匹配"></a>3.模糊匹配</h3><p>​        <code>REGEXP</code> 或 <code>RLIKE</code>为正在式匹配，以后再单独讲解。这里只讲解<code>LIKE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断是否满足模糊条件的语法  值 LIKE 模糊条件。模糊条件中用%代替多个字符，用_代表一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># % 与 _ 的区别</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;abcd&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;ab%&#x27;</span> , <span class="string">&#x27;abcd&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;ab_&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;ab__&#x27;</span>;</span><br><span class="line">+<span class="comment">-------------------+-------------------+--------------------+</span></span><br><span class="line">| &#x27;abcd&#x27; LIKE &#x27;ab%&#x27; | &#x27;abcd&#x27; LIKE &#x27;ab_&#x27; | &#x27;abcd&#x27; LIKE &#x27;ab__&#x27; |</span><br><span class="line">+<span class="comment">-------------------+-------------------+--------------------+</span></span><br><span class="line">|                 1 |                 0 |                  1 |</span><br><span class="line">+<span class="comment">-------------------+-------------------+--------------------+</span></span><br><span class="line"><span class="comment">#可以混合使用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;abcd&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;a%d&#x27;</span> ,  <span class="string">&#x27;abcd&#x27;</span> <span class="keyword">LIKE</span> <span class="string">&#x27;_b%&#x27;</span>;</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| &#x27;abcd&#x27; LIKE &#x27;a%d&#x27; | &#x27;abcd&#x27; LIKE &#x27;_b%&#x27; |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">|                 1 |                 1 |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#值或模糊条件为NULL时返回NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> <span class="keyword">LIKE</span> <span class="literal">NULL</span> , <span class="literal">NULL</span> <span class="keyword">LIKE</span> <span class="number">1</span> , <span class="number">1</span> <span class="keyword">LIKE</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">----------------+-------------+-------------+</span></span><br><span class="line">| NULL LIKE NULL | NULL LIKE 1 | 1 LIKE NULL |</span><br><span class="line">+<span class="comment">----------------+-------------+-------------+</span></span><br><span class="line">|           NULL |        NULL |        NULL |</span><br><span class="line">+<span class="comment">----------------+-------------+-------------+</span></span><br></pre></td></tr></table></figure><h3 id="4-NULL值比较"><a href="#4-NULL值比较" class="headerlink" title="4.NULL值比较"></a>4.NULL值比较</h3><p>​    <strong>涉及NULL判断</strong>时一般使用以下<strong>三种</strong>方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安全等于 &lt;=&gt; 可以严格比较NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> = <span class="literal">NULL</span>, <span class="literal">NULL</span>&lt;=&gt;<span class="literal">NULL</span>, <span class="literal">NULL</span>&lt;=&gt;<span class="number">1</span>;</span><br><span class="line">+<span class="comment">-------------+-------------+----------+</span></span><br><span class="line">| NULL = NULL | NULL&lt;=&gt;NULL | NULL&lt;=&gt;1 |</span><br><span class="line">+<span class="comment">-------------+-------------+----------+</span></span><br><span class="line">|        NULL |           1 |        0 |</span><br><span class="line">+<span class="comment">-------------+-------------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断值是否为NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> <span class="keyword">IS</span> <span class="literal">NULL</span> , <span class="literal">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">--------------+------------------+</span></span><br><span class="line">| NULL IS NULL | NULL IS NOT NULL |</span><br><span class="line">+<span class="comment">--------------+------------------+</span></span><br><span class="line">|            1 |                0 |</span><br><span class="line">+<span class="comment">--------------+------------------+</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>​    逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">OR 或 ||</td><td align="left">逻辑或</td></tr><tr><td align="left">NOT 或 !</td><td align="left">逻辑非</td></tr><tr><td align="left">XOR</td><td align="left">逻辑异或</td></tr></tbody></table><p>​    如果是<strong>数字</strong>则<strong>非0为真</strong>,下面做一个简单演示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">0</span>, <span class="number">2</span> &amp;&amp; <span class="number">1</span>,<span class="number">2</span> &amp;&amp; <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">---------+--------+-----------+</span></span><br><span class="line">| 2 AND 0 | 2 &amp;&amp; 1 | 2 &amp;&amp; NULL |</span><br><span class="line">+<span class="comment">---------+--------+-----------+</span></span><br><span class="line">|       0 |      1 |      NULL |</span><br><span class="line">+<span class="comment">---------+--------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">2</span> <span class="keyword">OR</span> <span class="number">1</span>, <span class="number">0</span> || <span class="number">0</span>, <span class="number">0</span> || <span class="literal">NULL</span>, <span class="literal">NULL</span> || <span class="number">1</span>;</span><br><span class="line">+<span class="comment">--------+--------+--------+-----------+-----------+</span></span><br><span class="line">| 2 OR 0 | 2 OR 1 | 0 || 0 | 0 || NULL | NULL || 1 |</span><br><span class="line">+<span class="comment">--------+--------+--------+-----------+-----------+</span></span><br><span class="line">|      1 |      1 |      0 |      NULL |         1 |</span><br><span class="line">+<span class="comment">--------+--------+--------+-----------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#非</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> !<span class="number">1</span>, !<span class="number">0</span> ,!<span class="number">-1</span>, !<span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">----+----+-----+-------+</span></span><br><span class="line">| !1 | !0 | !-1 | !NULL |</span><br><span class="line">+<span class="comment">----+----+-----+-------+</span></span><br><span class="line">|  0 |  1 |   0 |  NULL |</span><br><span class="line">+<span class="comment">----+----+-----+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#异或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">XOR</span> <span class="number">1</span>, <span class="number">1</span> <span class="keyword">XOR</span> <span class="number">0</span>, <span class="number">0</span> <span class="keyword">XOR</span> <span class="number">0</span>, <span class="number">1</span> <span class="keyword">XOR</span> <span class="literal">NULL</span>, <span class="literal">NULL</span> <span class="keyword">XOR</span> <span class="number">0</span>, <span class="literal">NULL</span> <span class="keyword">XOR</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">---------+---------+---------+------------+------------+---------------+</span></span><br><span class="line">| 1 XOR 1 | 1 XOR 0 | 0 XOR 0 | 1 XOR NULL | NULL XOR 0 | NULL XOR NULL |</span><br><span class="line">+<span class="comment">---------+---------+---------+------------+------------+---------------+</span></span><br><span class="line">|       0 |       1 |       0 |       NULL |       NULL |          NULL |</span><br><span class="line">+<span class="comment">---------+---------+---------+------------+------------+---------------+</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>​    位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数(64位)，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与</td></tr><tr><td align="left">|</td><td align="left">按位或</td></tr><tr><td align="left">^</td><td align="left">按位异或</td></tr><tr><td align="left">~</td><td align="left">按位取反</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下部分二进制计算略写高62位的0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> &amp; <span class="number">5</span>; <span class="comment"># 0011 &amp; 0101 = 0001 = 1</span></span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| 3 &amp; 5 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     1 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> | <span class="number">5</span>; <span class="comment"># 0011 | 0101 = 0111 = 7</span></span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| 3 | 5 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     7 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> ^ <span class="number">5</span>; <span class="comment"># 0011 ^ 0101 = 0110 = 6</span></span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| 3 ^ 5 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     6 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ~<span class="number">0</span>; <span class="comment"># ~ 0000.....0000 = 1111...1111 = 2^64 - 1 = 18,446,744,073,709,551,615</span></span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| ~0                   |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| 18446744073709551615 |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左移右移时若数字没有超出最高位或最低位，结果相当于乘以或除以2的移动位数的次方。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> &lt;&lt; <span class="number">1</span>; <span class="comment"># 0011 &lt;&lt; 1 = 0110 = 6</span></span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| 3 &lt;&lt; 1 |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|      6 |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左移右移时若数字超出最高位或最低位直接丢失。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> &gt;&gt; <span class="number">1</span>; <span class="comment"># 0011 &gt;&gt; 1 = 0001 = 1</span></span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| 3 &gt;&gt; 1 |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|      1 |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> &lt;&lt; <span class="number">64</span>, <span class="number">7</span> &lt;&lt; <span class="number">66</span>;</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">| 1 &lt;&lt; 64 | 7 &lt;&lt; 66 |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|       0 |       0 |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL运算符&quot;&gt;&lt;a href=&quot;#MySQL运算符&quot; class=&quot;headerlink&quot; title=&quot;MySQL运算符&quot;&gt;&lt;/a&gt;MySQL运算符&lt;/h1&gt;&lt;p&gt;​    MySQL的运算符分为&lt;strong&gt;算术运算符&lt;/strong&gt;、&lt;strong&gt;比较运算符&lt;/strong&gt;、&lt;strong&gt;逻辑运算符&lt;/strong&gt;、&lt;strong&gt;位运算符&lt;/strong&gt;四个类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之数据类型</title>
    <link href="http://yoursite.com/2020/08/18/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/08/18/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-08-18T07:13:54.000Z</published>
    <updated>2020-08-24T13:00:35.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><p>​    数据库字段的数据类型直接影响了数据库的性能，掌握好数据类型对数据库的优化来说十分重要。</p><p>​    MySQL中的数据类型可以分为，<strong>数值</strong>、<strong>日期</strong>、<strong>字符串</strong>三个类型。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>​    数值类型主要分为<strong>整型</strong>、<strong>浮点型</strong>、<strong>定点型</strong>三种，数值类型的区别主要在于所占<strong>存储空间的不同</strong>，在实际开发中应该在需求范围内选择所占空间<strong>最小</strong>的，下面的表显示了每个数值类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1  byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td></tr><tr><td align="left">FLOAT</td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td></tr><tr><td align="left">DECIMAL（M,D）</td><td align="left">M+2 bytes</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td></tr></tbody></table><p>​    MySQL中的数值类型<strong>默认</strong>是<strong>有符号</strong>的，插入<strong>超越范围</strong>的值会<strong>报错</strong>。</p><h3 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h3><p>​    包含<code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code>五个类型。</p><p><strong>整型（N）形式：</strong></p><p>​    N代表<strong>显示宽度</strong>，需要配合<code>UNSIGNED（无符号） ZEROFILL（自动补位）</code>使用才能体现出数据不足显示宽度时自动补0的效果。设置<code>ZEROFILL</code> 时默认为<code>UNSIGNED</code>可以省略不写。</p><p><strong>代码演示：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_zerofill(</span><br><span class="line">        a <span class="built_in">INT</span>, </span><br><span class="line">        b <span class="built_in">INT</span> ZEROFILL, </span><br><span class="line">        c <span class="built_in">INT</span>(<span class="number">5</span>),</span><br><span class="line">        d <span class="built_in">INT</span>(<span class="number">5</span>) ZEROFILL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_zerofill <span class="keyword">VALUES</span>(<span class="number">123</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_zerofill <span class="keyword">VALUES</span>(<span class="number">1234567</span>,<span class="number">1234567</span>,<span class="number">1234567</span>,<span class="number">1234567</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_zerofill;</span><br><span class="line">+<span class="comment">---------+------------+---------+---------+</span></span><br><span class="line">| a       | b          | c       | d       |</span><br><span class="line">+<span class="comment">---------+------------+---------+---------+</span></span><br><span class="line">|     123 | 0000000123 |     123 |   00123 |</span><br><span class="line">| 1234567 | 0001234567 | 1234567 | 1234567 |</span><br><span class="line">+<span class="comment">---------+------------+---------+---------+</span></span><br></pre></td></tr></table></figure><p>​        <strong>从代码演示效果中可以看出几点：</strong></p><ul><li><p><strong>没有设置显示宽度</strong>时数据类型依然<strong>有默认的显示宽度</strong>。</p></li><li><p>设置显示宽度的字段<strong>不影响所占空间大小</strong>，当插入<strong>超出显示宽度</strong>的数值时<strong>正常插入</strong>、<strong>正常显示</strong>。</p></li><li><p><strong>只设置显示宽度没有效果</strong>，如C字段。</p><p><strong>对于显示宽度，没有指定时默认为能够显示数值的位数，如有符号的INT默认宽度为11。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#演示整型默认显示宽度</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_n(</span><br><span class="line">     a <span class="built_in">TINYINT</span>,</span><br><span class="line">     b <span class="built_in">SMALLINT</span>,</span><br><span class="line">     c MEDIUMINT,</span><br><span class="line">     d <span class="built_in">INT</span>,</span><br><span class="line">     e <span class="built_in">BIGINT</span>,</span><br><span class="line">     f <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span>);</span><br><span class="line"></span><br><span class="line">DESC test_n;</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type                | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| a     | tinyint(4)          | YES  |     | NULL    |       |</span><br><span class="line">| b     | smallint(6)         | YES  |     | NULL    |       |</span><br><span class="line">| c     | mediumint(9)        | YES  |     | NULL    |       |</span><br><span class="line">| d     | int(11)             | YES  |     | NULL    |       |</span><br><span class="line">| e     | bigint(20)          | YES  |     | NULL    |       |</span><br><span class="line">| f     | tinyint(3) unsigned | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="comment">#无符号的TINYTINT比有符号的默认宽度少了一位，说明显示宽度包含了符号位。</span></span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><ul><li><code>TINYINT</code>、<code>SMALLINT</code>、<code>INT</code>、<code>BIGINT</code> 可以分别对应Java基本数据类型中的<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>；</li><li><code>INT</code> 与 <code>INTEGER</code> 是等价的；</li></ul></li></ul><h3 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h3><p>​        包含<code>FLOAT</code>、<code>DOUBLE</code>两个类型。对应于分别Java基本数据类型的<code>float</code>、<code>double</code>。</p><p><strong>浮点型（M，D）形式：</strong></p><p>​    M代表总位数，D代表小数部分的位数。指定后会限制插入数值的范围与位数，例如double（5,2）插入值的范围为[-999.99,999.99]，若数值大小<strong>超出范围</strong>则<strong>无法插入</strong>，若<strong>小数部分位数超出</strong>，不会报错但会<strong>损失精度</strong>。同时由于<strong>浮点型</strong>数据的<strong>不精确</strong>性，如果<strong>涉及</strong>到数据<strong>计算</strong>要<strong>谨慎使用</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_md(a <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">#无法插入超出大小范围的数值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_md <span class="keyword">VALUES</span>(<span class="number">1000</span>);</span><br><span class="line">ERROR 1264 (22003): Out of range value for column &#x27;a&#x27; at row 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#小数部分超出，精度损失</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_md <span class="keyword">VALUES</span>(<span class="number">1.1234</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_md <span class="keyword">VALUES</span>(<span class="number">1.1256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#超出部分按照四舍五入保存</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_md;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| a    |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| 1.12 |</span><br><span class="line">| 1.13 |</span><br><span class="line">+<span class="comment">------+</span></span><br></pre></td></tr></table></figure><p><strong>浮点型的<code>ZEROFILL</code>:</strong></p><p>​    浮点型在使用<code>ZEROFILL</code>时<strong>分别</strong>根据整数部分和小数部分的位数分别补0，但<strong>存在歧义</strong>的是原本的总位数M为<strong>整数位数与小数位数之和</strong>，但在<code>ZEROFILL</code>把M当做包<strong>含了小数点位的显示位数</strong>，这样就导致补位后结果的整数部分会<strong>比预计的少一位</strong>。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_zerofill(</span><br><span class="line">    a <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>) ZEROFILL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_zerofill <span class="keyword">VALUES</span>(<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_zerofill;</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| a     |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| 01.10 |</span><br><span class="line">+<span class="comment">-------+</span></span><br></pre></td></tr></table></figure><h3 id="3-定点型"><a href="#3-定点型" class="headerlink" title="3.定点型"></a>3.定点型</h3><p>​        <code>DECIMAL</code>类型，常用于需要精确存储的小数。与Java中的<code>BigDecimal</code>一样，<strong>底层</strong>都是以<strong>字符串形式</strong>存储。</p><p><strong>浮点型（M，D）形式：</strong></p><p>​        M是<strong>总位数</strong>，D是<strong>小数点后的位数</strong>。小数点和（负数） -符号<strong>不计入</strong> M。最大位数（M）为 65. 最大支持小数（D）为30.</p><p>​        <strong>（M，D）的默认值为（10,0）。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_decimal(a <span class="built_in">DECIMAL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看DECIMAL的默认值</span></span><br><span class="line">DESC test_decimal;</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type          | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line">| a     | decimal(10,0) | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure><p>​        <strong>精度演示，与<code>DOUBLE</code>做对比。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_decimal(double_n <span class="keyword">DOUBLE</span>(<span class="number">20</span>,<span class="number">2</span>), decimal_n <span class="built_in">DECIMAL</span>(<span class="number">20</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_decimal <span class="keyword">VALUES</span>(<span class="number">1234567899000000.66</span>,<span class="number">1234567899000000.66</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#DOUBLE不精确，DECIMAL精确。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_decimal;</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| double_n            | decimal_n           |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br><span class="line">| 1234567899000000.80 | 1234567899000000.66 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+</span></span><br></pre></td></tr></table></figure><p>​    <code>DECIMAL</code>所占空间为M+2字节</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">标准格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="1-DATE"><a href="#1-DATE" class="headerlink" title="1.DATE"></a>1.DATE</h3><p>​    <code>DATE</code>插入格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_date(date_n <span class="built_in">DATE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准格式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="string">&#x27;2020-08-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用数值代替</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="number">20200802</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#本世纪的时间可以省略年份的前两位。补位的0也可以省略。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="string">&#x27;20-8-3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#数字代替只能省略年份前两位</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="number">2084</span>);</span><br><span class="line">ERROR 1292 (22007): Incorrect date value: &#x27;2084&#x27; for column &#x27;date_n&#x27; at row 1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="number">200804</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#传入非法日期会报错</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="number">200832</span>);</span><br><span class="line">ERROR 1292 (22007): Incorrect date value: &#x27;200832&#x27; for column &#x27;date_n&#x27; at row 1</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date <span class="keyword">VALUES</span>(<span class="string">&#x27;2020-09-31&#x27;</span>);</span><br><span class="line">ERROR 1292 (22007): Incorrect date value: &#x27;2020-09-31&#x27; for column &#x27;date_n&#x27; at row 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_date;</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| date_n     |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 2020-08-01 |</span><br><span class="line">| 2020-08-02 |</span><br><span class="line">| 2020-08-03 |</span><br><span class="line">| 2020-08-04 |</span><br><span class="line">+<span class="comment">------------+</span></span><br></pre></td></tr></table></figure><h3 id="2-TIME"><a href="#2-TIME" class="headerlink" title="2.TIME"></a>2.TIME</h3><p>​        <code>TIME</code>插入格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_time(time_n <span class="built_in">TIME</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准格式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="string">&#x27;16:13:01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用数值代替</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="number">161302</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以在时间前加上天数，存储时自动转换为小时。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="string">&#x27;1 16:13:03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#依然可以省略补位的0,数字代替依旧不可省略</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="string">&#x27;1:1:1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有部分参数的情况下优先识别为秒或分秒</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="number">1305</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#若为‘天数 小时’的形式则识别为只有小时</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time <span class="keyword">VALUES</span>(<span class="string">&#x27;2 16&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_time;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| time_n   |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 16:13:01 |</span><br><span class="line">| 16:13:02 |</span><br><span class="line">| 40:13:03 |</span><br><span class="line">| 01:01:01 |</span><br><span class="line">| 00:00:04 |</span><br><span class="line">| 00:13:05 |</span><br><span class="line">| 64:00:00 |</span><br></pre></td></tr></table></figure><h3 id="3-YEAR"><a href="#3-YEAR" class="headerlink" title="3.YEAR"></a>3.YEAR</h3><p>​        <code>YEAR</code>插入格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_year(year_n <span class="keyword">YEAR</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准格式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="number">2020</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#若数值小于3位则识别为当前世纪年份</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="number">1</span>);<span class="comment">#识别为2001年</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="number">22</span>);<span class="comment">#识别为2022年</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="number">210</span>);<span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还可以使用字符串代替数字</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="string">&#x27;2023&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_year <span class="keyword">VALUES</span>(<span class="string">&#x27;24&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_year;</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| year_n |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|   2020 |</span><br><span class="line">|   2001 |</span><br><span class="line">|   2022 |</span><br><span class="line">|   2023 |</span><br><span class="line">|   2024 |</span><br><span class="line">+<span class="comment">--------+</span></span><br></pre></td></tr></table></figure><h3 id="4-DATETIME"><a href="#4-DATETIME" class="headerlink" title="4.DATETIME"></a>4.DATETIME</h3><p>​        <code>DATETIME</code>插入格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_datetime(datetime_n DATETIME);</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准格式</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime <span class="keyword">VALUES</span>(<span class="string">&#x27;2020-08-18 16:04:01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用数字代替</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime <span class="keyword">VALUES</span>(<span class="number">20200818160400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有日期，时间默认为00:00:00</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime <span class="keyword">VALUES</span>(<span class="string">&#x27;2020-08-18&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test_datetime;</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| datetime_n          |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2020-08-18 16:04:01 |</span><br><span class="line">| 2020-08-18 16:04:00 |</span><br><span class="line">| 2020-08-18 00:00:00 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#省略格式参考 DATE与TIME</span></span><br></pre></td></tr></table></figure><h3 id="5-TIMESTAMP"><a href="#5-TIMESTAMP" class="headerlink" title="5.TIMESTAMP"></a>5.TIMESTAMP</h3><p>​        <code>TIMESTAMP</code><strong>插入格式</strong>与<code>DATETIME</code><strong>基本一致</strong>。主要关注这两个的<strong>差别</strong>：</p><ul><li><code>TIMESTAMP</code>底层所<strong>存储</strong>的是当前时间距离<code>1970-01-01 00:00:00</code>的<strong>毫秒值</strong>，这样有利于时间的计算，所以一般用于当做<strong>时间戳</strong>。</li><li>由于存储的缘故，<code>TIMESTAMP</code>的<strong>显示</strong>和<strong>存储</strong>依赖于当前的<strong>时区</strong>。</li><li><code>DATETIME</code>的默认值为<code>NULL</code>，而<code>TIMESTAMP</code>的默认值为当前时间。</li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h3 id="1-CHAR和VARCHAR"><a href="#1-CHAR和VARCHAR" class="headerlink" title="1.CHAR和VARCHAR"></a>1.CHAR和VARCHAR</h3><p>​    MySQL中没有单字符类型，常用的字符串类型为<strong>定长</strong>的<code>CHAR</code>与<strong>变长</strong>的<code>VARCHAR</code>。</p><ul><li><p><code>CHAR(M)</code>，M为字符串的长度，确定后长度后<strong>无论</strong>存放的字符串<strong>长度为多少</strong>都会以<strong>补空格</strong>的方式占用M个字符的大小。M的<strong>最大值</strong>为255，<strong>默认值</strong>为1。</p></li><li><p><code>VARCHAR(M)</code>，M为字符串的<strong>最大长度</strong>，<code>VARCHAR</code>中需要有<strong>专门记录字符串长度的字节</strong>，所以<code>VARCHAR</code>所占的空间为字符串的大小加上1或2或3个字节（取决于字符串的长度）。而MySQL规定一个行的长度不得大于64k，故M的最大值要取决于同行的其他字段以及所使用的字符集。</p><blockquote><p>例如只有单个VARCHAR字段，UTF-8编码集时 M的最大值为（65535-3）/ 3 = 21844</p></blockquote></li><li><p>在处理<code>CHAR</code>数据时会自动处理数据结尾的空格，而<code>VARCHAR</code>不会。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(char_v <span class="built_in">CHAR</span>(<span class="number">5</span>) ,varchar_v <span class="built_in">VARCHAR</span>(<span class="number">5</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 前后各有两个空格</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span> <span class="keyword">VALUES</span>(<span class="string">&#x27;  a  &#x27;</span>,<span class="string">&#x27;  a  &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询字符串长度验证</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(char_v),<span class="keyword">LENGTH</span>(varchar_v)  <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br><span class="line">+<span class="comment">----------------+-------------------+</span></span><br><span class="line">| LENGTH(char_v) | LENGTH(varchar_v) |</span><br><span class="line">+<span class="comment">----------------+-------------------+</span></span><br><span class="line">|              3 |                 5 |</span><br><span class="line">+<span class="comment">----------------+-------------------+</span></span><br></pre></td></tr></table></figure><h3 id="2-TEXT与BLOB"><a href="#2-TEXT与BLOB" class="headerlink" title="2.TEXT与BLOB"></a>2.TEXT与BLOB</h3><p>​    <code>TEXT</code>系列与<code>BOLB</code>系列最大的区别就是一个底层存储的是字符串，而另一个存储的是二进制串。</p><ul><li><code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code> 、<code> LONGTEXT</code>在所占空间大小上分别对应<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 、<code> LONGBLOB</code>。</li><li><code>TEXT</code>系列一般用于<strong>文本数据</strong>，而<code>BLOB</code>系列一般用来存储<strong>图片、视频等</strong>的二进制数据。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了上述的几个主要的数据类型，还有<strong>枚举</strong>、<strong>集合</strong>等类型以后实际开发遇到再做了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL数据类型&quot;&gt;&lt;a href=&quot;#MySQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据类型&quot;&gt;&lt;/a&gt;MySQL数据类型&lt;/h1&gt;&lt;p&gt;​    数据库字段的数据类型直接影响了数据库的性能，掌握好数据类型对数据库的优化来说十分重要。&lt;/p&gt;
&lt;p&gt;​    MySQL中的数据类型可以分为，&lt;strong&gt;数值&lt;/strong&gt;、&lt;strong&gt;日期&lt;/strong&gt;、&lt;strong&gt;字符串&lt;/strong&gt;三个类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之泛型</title>
    <link href="http://yoursite.com/2020/08/12/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/08/12/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-08-12T09:32:16.000Z</published>
    <updated>2020-09-17T05:38:13.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h2><p>​    <strong>泛型</strong>可以按照字面简单理解为<strong>泛化的类型</strong>。</p><blockquote><p>类比到生活中，就是生产瓶子的厂商不给瓶子贴上包装，而是预留了包装的位置。等到灌装前再根据灌装的内容贴上不同的包装。</p></blockquote><p>​    即<strong>将类型明确的操作推迟到创建对象或者调用方法时</strong>，同时把<strong>类型当中参数一样传递</strong>。</p><ul><li><code>ArrayList&lt;E&gt;</code>称为<strong>泛型类型</strong>，其中的<code>E</code>称为类型参数变量，也可以叫做类型形参。</li><li><code>ArrayList&lt;Integer&gt;</code>称为<strong>参数化类型</strong>，其中的<code>Integer</code>称为实际类型参数，也可以叫类型实参。</li></ul><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><h3 id="1-泛型类"><a href="#1-泛型类" class="headerlink" title="1.泛型类"></a>1.泛型类</h3><p>​    语法格式：<code>[修饰符] class 类名&lt;泛型参数列表&gt;</code>，典型的代表就是各种集合类。泛型形参在定义成员变量以及成员方法中使用。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个学生类，使用泛型形参T代表score的类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(T score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(T score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Student时再指定T的类型，可以实现score的不同表现方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student&lt;String&gt; s1= <span class="keyword">new</span> Student&lt;String&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    Student&lt;Double&gt; s2= <span class="keyword">new</span> Student&lt;Double&gt;(<span class="number">89.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2.泛型接口"></a>2.泛型接口</h3><p>​    泛型接口的定义与泛型类的定义相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入泛型实参时：</span></span><br><span class="line"><span class="comment"> * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</span></span><br><span class="line"><span class="comment"> * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型</span></span><br><span class="line"><span class="comment"> * 即：Generator&lt;T&gt;，public T next();中的的T都要替换成传入的String类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] fruits = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Pear&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-泛型方法"><a href="#3-泛型方法" class="headerlink" title="3.泛型方法"></a>3.泛型方法</h3><p>​    如果泛型类/接口上的泛型形参不适用与某个方法时，可以单独设计泛型。这个方法<strong>可以是静态</strong>的。</p><p>在调用泛型方法时，<strong>编译器会根据你的实参类型来确定泛型的类型</strong>。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">java.util.Collection&lt;E&gt;中的</span></span><br><span class="line"><span class="comment">public abstract T[] toArray(T[] a)方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    c.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    c.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String[] array = c.toArray(<span class="keyword">new</span> String[<span class="number">2</span>]);<span class="comment">//传入String数组编译器确定T为String</span></span><br><span class="line">    Object[] array2 = c.toArray(<span class="keyword">new</span> Object[<span class="number">2</span>]);<span class="comment">//传入Object数组编译器确定T为Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-泛型的上限"><a href="#4-泛型的上限" class="headerlink" title="4.泛型的上限"></a>4.泛型的上限</h3><p>​    泛型类或泛型接口以及泛型方法中的<strong>泛型形参可以设定上限</strong>，格式为：<code>T extends 上限类</code></p><p>​    设定了上限之后，泛型实参只能为上限类本身或者上限类的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如将第一个例子中的T设定上限为Number类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(T score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象指定为String时报错，因为String不是Number的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student&lt;String&gt; s1= <span class="keyword">new</span> Student&lt;String&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    Student&lt;Double&gt; s2= <span class="keyword">new</span> Student&lt;Double&gt;(<span class="number">89.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    指定上限还有另一种格式为：<code>T extends 上限类 &amp; 上限接口1 &amp; 上限接口2...</code></p><p>​    这种指定方式要求泛型实参为上限类或子类并且实现这些接口或子接口。</p><p>​    <strong>若未指定泛型实参则按照上限类处理，未设置上限按照<code>Object</code>处理</strong></p><h3 id="5-通配符"><a href="#5-通配符" class="headerlink" title="5.通配符"></a>5.通配符</h3><p>​    通常在需要指定泛型但又未确定这个泛型类型时，可以使用通配符<code>?</code>来表示任意类型。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个遍历Collection中集合的方法，可以这样写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Collection&lt;?&gt; c)</span></span>&#123;<span class="comment">//此时形参中的Collection需要指定泛型，可以使用通配符代替</span></span><br><span class="line">    <span class="keyword">for</span>(Object object : c)&#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    通配符可以设置上下限：</p><p>设置上限：<code>&lt;? extends 上限&gt;</code></p><p>设置下限：<code>&lt;? super 下限&gt;</code></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>泛型中的<strong>泛型实参</strong>只能为<strong>引用数据类型</strong>。</p></li><li><p>泛型<strong>不能</strong>使用在<strong>静态成员</strong>中。</p></li><li><p>泛型只提供给编译器使用，编译完成后的<strong>class文件中不存在泛型</strong>，称为<strong>泛型擦除</strong>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h2&gt;&lt;p&gt;​    &lt;strong&gt;泛型&lt;/strong&gt;可以按照字面简单理解为&lt;strong&gt;泛化的类型&lt;/strong&gt;。
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="泛型" scheme="http://yoursite.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之多线程</title>
    <link href="http://yoursite.com/2020/08/10/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/10/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-08-10T04:48:54.000Z</published>
    <updated>2020-08-25T12:18:16.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关的概念"><a href="#相关的概念" class="headerlink" title="相关的概念"></a>相关的概念</h1><ol><li><p>进程</p><p>​    进程是<strong>操作系统分配资源的最小单位</strong>。可以简单理解为每运行一个程序就是一个进程。进程之间的资源是独立的，无法直接共享。</p><a id="more"></a></li><li><p>线程</p><p>​    线程是进程中的其中一条<strong>执行路径</strong>。一个进程中<strong>至少</strong>有一个线程，也可以有多个线程。同一个进程的多个线程之间有些内存是可以共享的（方法区、堆），也有些内存是独立的（栈（包括虚拟机栈和本地方法栈）、程序计数器）。</p></li><li><p>并行</p><p>多个处理器同时可以执行多条执行路径。</p></li><li><p>并发</p><p>多个任务同时执行，但是可能存在先后关系。</p></li></ol><h1 id="实现多线程的方式"><a href="#实现多线程的方式" class="headerlink" title="实现多线程的方式"></a>实现多线程的方式</h1><p>​    在<strong>基础学习阶段</strong>只需要掌握以下两种方式。</p><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h2><p>​     <strong>步骤：</strong></p><p>（1）编写线程类，去继承Thread类</p><p>（2）重写public void run(){}，这个方法中写入你<strong>希望线程执行的代码</strong>。</p><p>（3）创建线程对象</p><p>（4）调用start()启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//想要执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//形式一</span></span><br><span class="line">        MyThread my = <span class="keyword">new</span> MyThread();<span class="comment">//创建所编写线程类的对象</span></span><br><span class="line">        my.start();<span class="comment">//有名字的线程对象启动</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//形式二</span></span><br><span class="line">        <span class="keyword">new</span> MyThread().start();<span class="comment">//匿名对象启动线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//形式三</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">//想要执行的代码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();<span class="comment">//匿名内部类的匿名对象启动线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//形式四</span></span><br><span class="line">        Thread t =  <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">//通过多态引用的匿名内部类启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h2><p>​    <strong>步骤：</strong></p><p>（1）编写线程类，实现Runnable接口</p><p>（2）重写public void run(){}，这个方法中写入你<strong>希望线程执行的代码</strong>。</p><p>（3）创建线程对象</p><p>（4）借助Thread类的对象启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//想要执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一，可以同时创建多个以所编写线程类对象为参赛的线程对象</span></span><br><span class="line">        MyRunnable my = <span class="keyword">new</span> MyRunnable();<span class="comment">//创建实现了所变现线程类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(my);<span class="comment">//将这个对象作为参赛创建一个线程对象。</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(my);<span class="comment">//同样的方式创建另一个线程对象。</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();<span class="comment">//启动两个线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二，使用两个匿名对象创建并启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable()).start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式三，匿名内部类的匿名对象作为实参直接传给Thread的构造器</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>​    线程并非上面演示的只有创建启动和运行的过程，实际上，在线程的生命周期中，它要经过<strong>新建</strong>(New)、<strong>就绪</strong>（Runnable）、<strong>运行</strong>（Running）、<strong>阻塞</strong>(Blocked)和<strong>死亡</strong>(Dead)<strong>5种状态</strong>。尤其是当线程启动以后，它不可能一直**”霸占”<strong>着CPU独自运行，所以CPU需要在</strong>多条线程之间切换<strong>，于是线程状态也会多次在</strong>运行、阻塞之间切换**。</p><ol><li><p><strong>新建</strong>(New)</p><p>使用new关键字创建一个线程时，该线程就是新建状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread()<span class="comment">//新建了一个线程，此时线程处于新建状态</span></span><br></pre></td></tr></table></figure></li><li><p><strong>就绪</strong>（Runnable）</p><p>当新建线程调用<code>start()</code>方法时，线程进入<strong>就绪状态</strong>。处于就绪状态线程<strong>具备了运行条件</strong>，但还没分配到CPU，处于<strong>线程就绪队列</strong>，<strong>等待</strong>系统为其分配CPU。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread()<span class="comment">//新建了一个线程，此时线程处于新建状态</span></span><br><span class="line">t.start();<span class="comment">//调用start()方法，使线程进入就绪状态</span></span><br></pre></td></tr></table></figure></li><li><p><strong>运行</strong>（Running）</p><p>当系统选定一个等待执行的线程后，它就会从就绪状态进入运行状态，该动作称为<strong>“CPU调度”。</strong></p></li><li><p><strong>阻塞</strong>(Blocked)</p><p>　处于运行状态的线程在某些情况下，如执行了<code>sleep()</code>方法，或等待I/O设备等资源，将让出CPU并暂时停止自己运行，进入<strong>阻塞状态</strong>。</p><p>   　　在阻塞状态的线程<strong>不能进入就绪队列</strong>。只有当引起<strong>阻塞的原因消除时</strong>，如睡眠时间已到，或等待的I/O设备空闲下来，线程便转入就绪状态，<strong>重新</strong>到就绪队列中排队等待，被系统选中后<strong>从原来停止的位置</strong>开始继续执行。</p></li><li><p><strong>死亡</strong>(Dead)</p><p>死亡状态是线程生命周期中的<strong>最后一个阶段</strong>。</p><p><strong>线程死亡的原因有三个:</strong></p><ul><li><p>正常运行的线程完成了它的全部工作；</p></li><li><p>线程被强制性地终止，如通过stop方法来终止一个线程【不推荐使用】；</p></li><li><p>线程抛出未捕获的异常。</p></li></ul></li></ol><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="线程生命周期"></p><h1 id="Thread的相关API"><a href="#Thread的相关API" class="headerlink" title="Thread的相关API"></a>Thread的相关API</h1><p>​    简单说明一些<strong>基础阶段</strong>所用到的API</p><p><strong>1.构造器</strong></p><ul><li><code>Thread()</code>    直接创建线程对象</li></ul><ul><li><code>Thread(String name)</code>   创建线程对象并命名</li><li><code>Thread(Runnable target)</code>   使用代理对象创建线程对象</li><li><code>Thread(Runnable target, String name)</code>  使用代理对象创建线程对象并命名</li></ul><p><strong>2.方法</strong></p><ul><li><p><code>public void run()</code></p><p>创建线程<strong>必须重写</strong>的方法，内容为想要线程执行的代码。线程进入运行状态时<code>JVM</code></p></li></ul><p><strong>自动调用</strong>该方法。<strong>需要注意</strong>，也可以直接调用<code>run()</code>方法，但是这种调用方式和线程<strong>无关</strong>。</p><ul><li><p><code>public void start()</code></p><p>用于<strong>启动线程</strong>，使线程从新建状态进入就绪状态。</p></li><li><p><code>getName()</code></p><p>用于获取当前<strong>线程的名称</strong></p></li><li><p><code>Thread.currentThread()</code></p><p>用于获取<strong>当前正在执行线程的对象</strong>引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">        mt.start();</span><br><span class="line">        <span class="comment">//获取当前正在执行的线程对象并打印线程的名字</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行run方法&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前正在执行的线程对象并打印线程的名字</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong>(main与MyThread两个线程的执行顺序是随机的)</p></li></ul><blockquote><p>main<br>执行run方法<br>MyThread</p></blockquote><ul><li><p><code>set/getPriority()</code></p><p>用于<strong>设置/获取线程的优先级</strong>。</p><p>线程优先级的范围为[1,10]，<strong>数字越大</strong>表示<strong>优先级越高</strong>，优先级<strong>只代表线程被执行到的概率</strong>，并不一定是优先于优先级低的线程先执行。</p><p>Thread类中定义了三个与<strong>优先级有关的常量</strong>：</p><ul><li>MAX_PRIORITY(10) 表示线程的<strong>最大优先级</strong></li><li>MIN_PRIORITY(1)  表示线程的<strong>最小优先级</strong></li><li>NORM_PRIORITY(5) 这个是优先级的中间值，也是线程的<strong>默认优先级</strong>。</li></ul></li><li><p><code>Thread.sleep(毫秒)</code></p><p>使线程休眠一定时间，线程会<strong>进入阻塞状态但不会释放锁</strong>，休眠结束后回到<strong>就绪状态</strong>，再次争夺到cup资源时<strong>从休眠处继续执行</strong>。</p></li><li><p><code>Thread.yield()</code></p><p>暂停当前线程，线程会<strong>重新进入就绪状态</strong>，再次争夺到cup资源时<strong>从暂停处继续执行</strong>。</p><p><strong>需要注意的是</strong>，暂停线程进入就绪状态后可能<strong>再次争夺到cpu资源继续执行</strong>，可能在运行结果上<strong>看不出<code>Thread.yield()</code>的效果</strong>。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Thread.yield()演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">        mt.start();</span><br><span class="line">        <span class="comment">//main方法中打印1-5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main    &quot;</span>+i);</span><br><span class="line">            <span class="comment">//当i等于3时调用Thread.yield()方法</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使main线程回到就绪状态&quot;</span>);</span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread    &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>//运行结果不确定，以下为其中一种<br>main    1<br>main    2<br>main    3<br>使main线程回到就绪状态    //此时调用了Thread.yield()方法<br>main    4    //main线程依旧争夺到cpu资源<br>MyThread    1<br>MyThread    2<br>MyThread    3<br>MyThread    4<br>MyThread    5<br>main    5</p></blockquote></li><li><p><code>join()</code></p><p>表示某个线程需要加塞，使用方式为<strong>在需要加塞的线程中</strong>以需要加塞的对象调用这个方法，即<code>需要加塞的线程.join()</code>,被加塞的线程<strong>需要等待加塞线程运行结束</strong>时才能继续运行，这个方法<strong>只影响被加塞的线程</strong>，其他线程正常执行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建并启动两个线程，打印1-5</span></span><br><span class="line">        MyThread mt1 = <span class="keyword">new</span> MyThread(<span class="string">&quot;MyThread-1&quot;</span>);</span><br><span class="line">        MyThread mt2 = <span class="keyword">new</span> MyThread(<span class="string">&quot;MyThread-2&quot;</span>);</span><br><span class="line">        mt1.start();</span><br><span class="line">        mt2.start();</span><br><span class="line">        <span class="comment">//打印1-5，在i等于3时使main被加塞</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;    &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main线程被MyThread-1线程加塞&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mt1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;    &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>//运行结果不确定，以下为其中一种</p><p>main    1<br>main    2<br>main    3<br>main线程被MyThread-1线程加塞<br>MyThread-2    1    //MyThread-1线程加塞只影响main线程，不影响其他线程执行。<br>MyThread-1    1<br>MyThread-1    2<br>MyThread-1    3<br>MyThread-1    4<br>MyThread-1    5<br>MyThread-2    2<br>main    4    //被加塞后只能等到加塞的线程执行结束后才有可能被执行<br>MyThread-2    3<br>MyThread-2    4<br>MyThread-2    5<br>main    5</p></blockquote><ul><li><p><code>isAlive()</code></p><p>用于判断线程是否活跃（已启动但未终止），若处于新建或死亡状态则返回<code>false</code>,其余状态返回<code>true</code>.</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;此时的isAlive()返回值：&quot;</span>+mt.isAlive());</span><br><span class="line">        <span class="comment">//未启动线程，返回false</span></span><br><span class="line">        mt.start();<span class="comment">//启动MyThread线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;此时的isAlive()返回值：&quot;</span>+mt.isAlive());</span><br><span class="line">        <span class="comment">//启动线程后，若MyThread线程先执行完任务则返回false，否则返回true</span></span><br><span class="line">        mt.join();<span class="comment">//MyThread线程加塞，执行完毕</span></span><br><span class="line">        System.out.println(<span class="string">&quot;此时的isAlive()返回值：&quot;</span>+mt.isAlive());</span><br><span class="line">        <span class="comment">//此时MYThread执行完毕返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行MyThread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p></li></ul><blockquote><p>此时的isAlive()返回值：false<br>此时的isAlive()返回值：true    //也可能是false<br>执行MyThread<br>此时的isAlive()返回值：false</p></blockquote><h1 id="关键字：volatile"><a href="#关键字：volatile" class="headerlink" title="关键字：volatile"></a>关键字：volatile</h1><p>​    在现阶段<strong>先理解如何使用</strong><code>volatile</code>,等学习了Java内存模型时再深入了解。</p><p>volatile可以理解为 <strong>易变</strong>，<strong>不稳定</strong>，<strong>不一定什么时候会变</strong>。用来<strong>保证</strong>多线程下变量的<strong>可见性</strong>。</p><p>简单解释一下发生这种情况的原因：</p><blockquote><p>变量的值储存在缓存当中，每个线程都拥有自己的缓存，在线程对变量进行操作时，是先复制一份变量到缓存当中，对缓存中的数据进行修改在存储到主存当中。但是，如果在修改变量时，另一个线程的缓存中还可能是未修改前的变量值，此时该线程对变量的修改是基于原来缓存中的变量值，这就是所谓的不可见性。而如果有volatile，就会每次修改都会立即同步主存中的值，避免了这种情况。但会对写入速率造成一定的影响。</p></blockquote><p>​    想要深入了解可以参考这篇文章：<a href="https://www.cnblogs.com/dolphin0520/p/3920373.html">https://www.cnblogs.com/dolphin0520/p/3920373.html</a></p><h1 id="关键字：synchronized"><a href="#关键字：synchronized" class="headerlink" title="关键字：synchronized"></a>关键字：synchronized</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相关的概念&quot;&gt;&lt;a href=&quot;#相关的概念&quot; class=&quot;headerlink&quot; title=&quot;相关的概念&quot;&gt;&lt;/a&gt;相关的概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进程&lt;/p&gt;
&lt;p&gt;​    进程是&lt;strong&gt;操作系统分配资源的最小单位&lt;/strong&gt;。可以简单理解为每运行一个程序就是一个进程。进程之间的资源是独立的，无法直接共享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之字符串</title>
    <link href="http://yoursite.com/2020/08/09/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/08/09/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-08-09T13:52:36.000Z</published>
    <updated>2020-08-13T08:53:21.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h1><p>​        <strong><em>以下说明及演示基于JDK1.8版本</em></strong></p><ol><li>字符串String类型本身是final声明的，字符串的对象也是不可变对象，意味着一旦进行修改，就会产生新对象。</li><li>String对象内部是用数组进行保存的，在<strong>JDK1.9之前</strong>用的是字符数组<code>char[]</code>，<strong>JDK1.9之后</strong>使用的是字节数组<code>byte[]</code>。</li></ol><a id="more"></a><ol start="3"><li>String类中这个<code>values</code>数组,同时由<code>final</code>和<code>private</code>修饰，意味着这个数组<strong>不可变并且不能通过外部进行操作</strong>，String类型提供的所有的方法都是用新对象来表示修改后内容的，所以<strong>保证了String对象的不可变</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK1.8中String类的部分源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用char数组进行存储。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK1.8中只有char数组与哈希值，其他版本可能有所不同。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><ol start="4"><li>由于字符串对象设计为不可变，那么所以有<strong>字符串常量池</strong>来保存很多常量对象，<strong>JDK1.6以及之前</strong>，常量池设计在<strong>方法区</strong>当中。但由于字符串所占空间比较大，所以<strong>JDk1.7时</strong>将常量池移到了<strong>堆</strong>当中，<strong>JDk1.8</strong>后取消了<strong>方法区</strong>取而代之的是<strong>元空间</strong>，字符串常量池也在<strong>元空间</strong>当中。</li></ol><h1 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h1><h2 id="1"><a href="#1" class="headerlink" title="1.=="></a>1.==</h2><p>​    <code>==</code>用来比较对象的地址值，因为字符串特殊的存储方式，导致地址比较情况比较多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>).intern();</span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">System.out.println(str1 == str3);<span class="comment">//false</span></span><br><span class="line">System.out.println(str1 == str4);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>​    <strong>内存示意图：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="字符串内存图"></p><h2 id="2-equals"><a href="#2-equals" class="headerlink" title="2.equals()"></a>2.equals()</h2><p>​    <strong>用于比较对象的内容是否相同</strong>，因为String类型重写equals，区分大小写只要两个字符串的字符内容相同，就会返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line">System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>查看一下String类中的<code>equals()</code>源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否指向同一个对象，如果是内容一定相同，返回ture</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//若传入参数不为String类则直接返回false</span></span><br><span class="line">      <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">          String anotherString = (String)anObject;</span><br><span class="line">          <span class="keyword">int</span> n = value.length;</span><br><span class="line">          <span class="comment">//判断字符串长度是否相等，不相等则一定不相同，返回false</span></span><br><span class="line">          <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">              <span class="keyword">char</span> v1[] = value;</span><br><span class="line">              <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">              <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">              <span class="comment">//逐个比较字符是否相等</span></span><br><span class="line">              <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>了避免空指针异常，若是与已知字符串做比较用已知字符串来调用方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;已知字符串&quot;</span>.equals（）</span><br></pre></td></tr></table></figure><h2 id="3-equalsIgnoreCase"><a href="#3-equalsIgnoreCase" class="headerlink" title="3.equalsIgnoreCase()"></a>3.equalsIgnoreCase()</h2><p>​    <strong>用于不区分大小写的比较字符串内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;A&quot;</span>.equalsIgnoreCase(<span class="string">&quot;a&quot;</span>));<span class="comment">//ture</span></span><br></pre></td></tr></table></figure><h2 id="4-compareTo"><a href="#4-compareTo" class="headerlink" title="4.compareTo()"></a>4.compareTo()</h2><p>​    <strong>用于按照字符的Unicode编码值进行排序</strong>,String类型重写了<code>Comparable接口</code>的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;A&quot;</span>.compareTo(<span class="string">&quot;a&quot;</span>));<span class="comment">//-32</span></span><br><span class="line">System.out.println(<span class="string">&quot;AB&quot;</span>.compareTo(<span class="string">&quot;A&quot;</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>源码如下:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类中的compareTo方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">        <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">        <span class="keyword">char</span> v1[] = value;</span><br><span class="line">        <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">            <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                <span class="keyword">return</span> c1 - c2;</span><br><span class="line">            &#125;<span class="comment">//返回char的差值，说明按照Unicode编码值进行排序</span></span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - len2;<span class="comment">//若一方为另一方的子字符串，则判定为较小的一方</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-compareToIgnoreCase"><a href="#5-compareToIgnoreCase" class="headerlink" title="5.compareToIgnoreCase()"></a>5.compareToIgnoreCase()</h2><p>​    <strong>用于不区分大小的情况下按照字符的Unicode编码值进行排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;A&quot;</span>.compareToIgnoreCase(<span class="string">&quot;a&quot;</span>));<span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="string">&quot;AB&quot;</span>.compareToIgnoreCase(<span class="string">&quot;Ab&quot;</span>));<span class="comment">//0</span></span><br></pre></td></tr></table></figure><h1 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h1><h2 id="1-“-”连接符的实现"><a href="#1-“-”连接符的实现" class="headerlink" title="1.“+”连接符的实现"></a>1.“+”连接符的实现</h2><p>​    <strong>引入一段对API中String类的描述</strong></p><blockquote><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 <code>StringBuilder</code>（或  <code>StringBuffer</code>）类及其 <code>append</code> 方法实现的。字符串转换是通过  <code>toString</code> 方法实现的，该方法由 <code>Object</code> 类定义，并可被 Java 中的所有类继承。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">String s3 = s1 + s2;<span class="comment">//第三行的代码等价于第四行</span></span><br><span class="line">String s3 = (<span class="keyword">new</span> StringBuilder()).append(s1).append(s2).toString();</span><br></pre></td></tr></table></figure><h2 id="2-编译器对“-”的优化"><a href="#2-编译器对“-”的优化" class="headerlink" title="2.编译器对“+”的优化"></a>2.编译器对“+”的优化</h2><p>​    当**”+”两端均为编译期确定的字符串常量**时，编译器会进行相应的优化，直接将两个字符串常量拼接好，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="comment">//编译器优化之后</span></span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String s1 =<span class="string">&quot;A&quot;</span> + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">String s2 =<span class="string">&quot;AB&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//ture</span></span><br></pre></td></tr></table></figure><p>​    除了常量字符串外，还有一种也情况是为编译期确定的字符串常量，就是有<code>final</code>修饰的<code>String变量</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;B&quot;</span>;</span><br><span class="line"><span class="comment">//此时s1，s2不是编译期间确定的字符串常量，依然通过StringBuilde的方式连接字符串</span></span><br><span class="line">String s3 = s1 + s2;</span><br><span class="line">System.out.println(s3 == <span class="string">&quot;AB&quot;</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String s1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> String s2 = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">String s3 = s1 + s2;<span class="comment">//此时s1，s2在编译期间就确定为字符串常量</span></span><br><span class="line"><span class="comment">//等价于 String = “A” + “B”，String s2 =&quot;AB&quot;;</span></span><br><span class="line">System.out.println(s3 == <span class="string">&quot;AB&quot;</span>);<span class="comment">//ture</span></span><br></pre></td></tr></table></figure><p>​    但也不是只要<code>final</code>修饰的<code>String变量</code>就一定是常量。例如下面这种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">final</span> String s1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> String s2 = getS1();</span><br><span class="line">    String s3 = s1 + s2;</span><br><span class="line">    System.out.println(s3 == <span class="string">&quot;AB&quot;</span>);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getS1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;B&quot;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-手动优化"><a href="#3-手动优化" class="headerlink" title="3.手动优化"></a>3.手动优化</h2><p>​    由于每次拼接非确定字符串时都需要隐式创建一个<code>StringBuilder对象</code>，如果存在需要<strong>大量循环拼接</strong>的情况则会在堆中创建大量的<code>StringBuilder对象</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    s += <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这种情况建议直接创建一个StringBuilder对象再使用append()方法手动拼接，最后再转为字符串，这样可以提高效率节省内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    sb.append(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.toString();</span><br></pre></td></tr></table></figure><h1 id="可变字符序列"><a href="#可变字符序列" class="headerlink" title="可变字符序列"></a>可变字符序列</h1><p>​    除了不可变的<code>String类</code>，java中还提供了可变字符序列的两个类：<code>StringBuilder类</code>和<code>StringBuffer类</code>。除了是否可变外这三个类的主要差别在运算性能和线程安全性上。</p><h2 id="1-运算速度比较"><a href="#1-运算速度比较" class="headerlink" title="1.运算速度比较"></a>1.运算速度比较</h2><p>​    通常情况下：<code>StringBuilder</code> &gt;<code>StringBuffer</code>&gt;<code> String</code></p><p>​    <code>String</code>是<code>final类</code>不能被继承且为字符串<strong>常量</strong>，而<code>StringBuilder</code>和<code>StringBuffer</code>均为字符串<strong>变量</strong>。<code>String</code>对象一旦创建便<strong>不可更改</strong>，而后两者是<strong>可更改的</strong>，它们只能通过构造函数来建立对象，且对象被建立以后将在内存中分配内存空间，并初始保存一个null，通过append方法向StringBuffer和StringBuilder中赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">str = str + <span class="string">&quot;de&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure><p>​    上述代码先创建一个<code>String</code>对象str，并赋值abc给str，然后运行到第三行，JVM会再创建一个新的str对象，并将原有str的值和de加起来再赋值给新的str。而第一个创建的str对象被JVM的垃圾回收机制（GC）回收掉。所以str实际上并没有被更改，即<code>String</code>对象一旦创建就不可更改。所以Java中对<code>String</code>对象进行的操作实际上是一个<strong>不断创建并回收对象的过程</strong>，因此在运行速度上很慢。</p><p>​    而<code>StringBuilder</code>比<code>StringBuffer</code>更快的源于没有了线程锁的损耗。</p><h2 id="2-线程安全性"><a href="#2-线程安全性" class="headerlink" title="2.线程安全性"></a>2.线程安全性</h2><p>​    <code>StringBuffer</code>（线程安全的）</p><p>​    <code>StringBuffer</code>中大部分方法由<code>synchronized</code>关键字修饰，在必要时可对方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致，所以是<strong>线程安全</strong>的。</p><p>​    <code>StringBuilder</code>（非线程安全）</p><p>​    该类在<code>JDK1.5</code>时新增提供一个与StringBuffer兼容的 API，但不能保证同步，所以在性能上较高。因此，在大多数情况下优先使用StringBuilder</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p><code>String</code>：适用于少量的字符串操作。</p><p><code>StringBuilder</code>：适用于单线程下在字符串缓冲区进行大量操作。</p><p><code>StringBuffer</code>：适用于多线程下在字符串缓冲区进行大量操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串的特点&quot;&gt;&lt;a href=&quot;#字符串的特点&quot; class=&quot;headerlink&quot; title=&quot;字符串的特点&quot;&gt;&lt;/a&gt;字符串的特点&lt;/h1&gt;&lt;p&gt;​        &lt;strong&gt;&lt;em&gt;以下说明及演示基于JDK1.8版本&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串String类型本身是final声明的，字符串的对象也是不可变对象，意味着一旦进行修改，就会产生新对象。&lt;/li&gt;
&lt;li&gt;String对象内部是用数组进行保存的，在&lt;strong&gt;JDK1.9之前&lt;/strong&gt;用的是字符数组&lt;code&gt;char[]&lt;/code&gt;，&lt;strong&gt;JDK1.9之后&lt;/strong&gt;使用的是字节数组&lt;code&gt;byte[]&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之包装类</title>
    <link href="http://yoursite.com/2020/08/08/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/08/08/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2020-08-08T07:48:54.000Z</published>
    <updated>2020-08-13T09:00:37.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h1><p>​    Java作为面向对象的编程语言在设计之初依然延续了C语言的8种基本数据类型，但在不断的更新中设计了很多针对对象的API和新的特性（例如泛型），不支持基本数据类型。为了解决这个问题，Java为每一个基本数据类型提供了包装类。</p><a id="more"></a><table><thead><tr><th>基本数据类型</th><th>包装类（java.lang.）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h1 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h1><p>​    装箱和拆箱实际上就是<strong>基本数据类型和它的包装类之间的转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer num1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);    <span class="comment">//基本数据类型转为包装类也叫做手动装箱</span></span><br><span class="line"><span class="keyword">int</span> num2 = num1.intValue();        <span class="comment">//包装类转换为基本数据类型，也叫做手动拆箱</span></span><br></pre></td></tr></table></figure><p>​    在J<strong>DK1.5</strong>之后为了方便使用等目的提供了<strong>自动装箱与自动拆箱</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装类中的自动装箱拆箱机制</span></span><br><span class="line">Integer  num1 = <span class="number">1</span>;        <span class="comment">//自动装箱</span></span><br><span class="line"><span class="comment">//这行代码实际等同于    Integer  num1 = Integer.valueOf(1);</span></span><br><span class="line"><span class="comment">//这个于new Integer(1)有所区别 下文会详细说明</span></span><br><span class="line"><span class="keyword">int</span> num2 = num1;        <span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><p>​    需要注意的是只在与<strong>对应的基本数据类型和包装类之间</strong>才能实现自动装箱与拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Double d = <span class="number">1</span>;<span class="comment">//错误的，1是int类型</span></span><br></pre></td></tr></table></figure><h1 id="包装类对象的缓存问题"><a href="#包装类对象的缓存问题" class="headerlink" title="包装类对象的缓存问题"></a>包装类对象的缓存问题</h1><p>​    为了引出这个问题首先做以下测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line">Integer j = <span class="number">1</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="number">128</span>;</span><br><span class="line">Integer j = <span class="number">128</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>​    为什么改变了在包装类的值会影响结果，这就涉及到了包装类对象的缓存问题。对于对象而言，<code>==</code>所比较的是两个对象的地址值，上面的代码就说明了<strong>在一定的范围内相同值的包装类指向的是同一个对象</strong>。每个包装类的缓存范围如下：</p><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table><p>​    <strong>以Integer为例</strong>，上面也提到过自动装箱时是调用<code>Integer.valueOf()</code>方法来获取Integer对象的，查看这个方法的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="comment">//若在某一个范围内直接返回一个cache数组中的Integer对象。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">   <span class="comment">//若不在这个范围则创建一个Integer对象返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再找到<code>IntegerCache</code> 这是Integer的一个内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现在Integer类初始化时会创建一个叫cache的数组，里面存放的是low至high范围的Integer类常量，这就是上面提到的缓存对象。</p><p>这就解释了为什么在一定范围内使用<code>==</code>比较两个包装类对象会返回turn。</p><p>再做几个比较实验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//新new的在堆中</span></span><br><span class="line">Integer j = <span class="number">1</span>;<span class="comment">//这个用的是缓冲的常量对象，在方法区</span></span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line">System.out.println(i.equals(j));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//true</span></span><br><span class="line">System.out.println(i.equals(j));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>​    new出来的对象在堆当中，不指向常量对象，这就是<strong>new与valueOf()的区别</strong>，<code>valueOf()</code>只在超出缓存范围时才会创建一个新的对象，所以在实际使用过程中建议直接使用<code>valueOf()</code>。</p><p>​    而与基本数据类型比较（包括计算）时会<strong>先拆箱</strong>再按照基本数据类型的规则比较，所以为了避免歧义，如果是判断值是否相等时建议同一使用<code>equals()</code>方法。</p><h1 id="API演示"><a href="#API演示" class="headerlink" title="API演示"></a>API演示</h1><p>​    由于包装类的存在，许多处理基本数据类型的方法都可以定义在包装类中。下面进行一些<strong>举例</strong>。</p><h2 id="1-把字符串转为基本数据类型"><a href="#1-把字符串转为基本数据类型" class="headerlink" title="1.把字符串转为基本数据类型"></a>1.把字符串转为基本数据类型</h2><p>​    <code>parsxxx()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = Integer.parseInt(<span class="string">&quot;整数的字符串&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> a = Double.parseDouble(<span class="string">&quot;小数的字符串&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b = Boolean.parseBoolean(<span class="string">&quot;true或false&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Double.parseDouble(<span class="string">&quot;1.2&quot;</span>));<span class="comment">//1.2</span></span><br></pre></td></tr></table></figure><h2 id="2-数据类型的最大最小值"><a href="#2-数据类型的最大最小值" class="headerlink" title="2.数据类型的最大最小值"></a>2.数据类型的最大最小值</h2><p>​    <code>MAX_VALUE</code>和<code>MIN_VALUE</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE和Integer.MIN_VALUE</span><br><span class="line">Long.MAX_VALUE和Long.MIN_VALUE</span><br><span class="line">Double.MAX_VALUE和Double.MIN_VALUE</span><br><span class="line">    </span><br><span class="line">System.out.println(Integer.MAX_VALUE);<span class="comment">//2147483647</span></span><br></pre></td></tr></table></figure><h1 id="3-转进制"><a href="#3-转进制" class="headerlink" title="3.转进制"></a>3.转进制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer.toBinaryString(<span class="keyword">int</span> i) <span class="comment">//转为2进制</span></span><br><span class="line">Integer.toOctalString(<span class="keyword">int</span> i)  <span class="comment">//转为8进制</span></span><br><span class="line">Integer.toHexString(<span class="keyword">int</span> i)   <span class="comment">//转为16进制</span></span><br><span class="line"></span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">15</span>));<span class="comment">//1111</span></span><br><span class="line">System.out.println(Integer.toOctalString(<span class="number">15</span>));<span class="comment">//17</span></span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">15</span>));<span class="comment">//f</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是包装类&quot;&gt;&lt;a href=&quot;#什么是包装类&quot; class=&quot;headerlink&quot; title=&quot;什么是包装类&quot;&gt;&lt;/a&gt;什么是包装类&lt;/h1&gt;&lt;p&gt;​    Java作为面向对象的编程语言在设计之初依然延续了C语言的8种基本数据类型，但在不断的更新中设计了很多针对对象的API和新的特性（例如泛型），不支持基本数据类型。为了解决这个问题，Java为每一个基本数据类型提供了包装类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="包装类" scheme="http://yoursite.com/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之异常</title>
    <link href="http://yoursite.com/2020/08/07/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2020/08/07/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/</id>
    <published>2020-08-07T11:28:14.000Z</published>
    <updated>2020-08-13T09:00:57.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>​    在一些情况下，由于<strong>非程序本身</strong>问题，例如:配置问题、错误输入、磁盘空间不足等等所导致的程序无法正常运行。</p><a id="more"></a><p><strong>例如：</strong></p><p>​    试图获取一个int类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行后输入‘a’，由于没有正常的获取到int类型，程序发生异常。</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E6%BC%94%E7%A4%BA.png" alt="异常演示"></p><p><strong>而下面两个情况也是程序无法正常运行，但是是程序本身的问题，不属于异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//未定义num的情况下使用num，属于语法错误。不属于异常</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getsum(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getsum方法用于返回两个int类型的和</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果为0，而不是预期是2，属于程序逻辑错误。不属于异常</span></span><br></pre></td></tr></table></figure><h1 id="Java如何处理异常"><a href="#Java如何处理异常" class="headerlink" title="Java如何处理异常"></a>Java如何处理异常</h1><p>​    当程序运行到某一处时发生了异常，程序会暂停运行查看产生异常的原因，并根据此原因生成一个<strong>“异常对象”</strong>然后向外<strong>“抛”</strong>，此时若此处有<strong>try…catch</strong>结构去<strong>“捕获”</strong>这个异常，则程序继续运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//try..catch语法下文有详解，这里可以理解为“捕获”异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;其他代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>​    <strong>”捕获“</strong>异常后继续执行其他代码</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E6%BC%94%E7%A4%BA.png" alt="异常捕获演示"></p><p>若不能<strong>“捕获”</strong>这个异常则会继续<strong>“抛”</strong>给上一级调用者，直到被<strong>“捕获”</strong>，程序在被<strong>“捕获”</strong>处继续运行。最终上抛至JVM则程序<strong>”崩溃“</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testPao();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上级捕获到异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main中的其他代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;其他代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>​    <img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E4%B8%8A%E6%8A%9B%E6%BC%94%E7%A4%BA.png" alt="异常上抛演示"></p><p>若不做<strong>“捕获”</strong>出来<strong>“上抛”</strong>至JVM，程序<strong>“崩溃”</strong></p><h1 id="异常的体系结构"><a href="#异常的体系结构" class="headerlink" title="异常的体系结构"></a>异常的体系结构</h1><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="异常的体系结构"></p><p>​    所有异常相关的类都有一个公共父类：java.lang.Throwable，Throwable分为两大派别Error和Exception。</p><p><strong>Error：</strong>是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</p><p>​    此类错误一般表示代码运行时JVM出现问题。通常有Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如说当jvm耗完可用内存时，将出现OutOfMemoryError。此类错误发生时，JVM将终止线程。非代码性错误。因此，当此类错误发生时，应用<strong>不应该去处理此类错误</strong>。而是通过代码优化、硬件升级等方式解决。</p><p><strong>Exception：</strong>程序本身可以捕获并且可以处理的异常。</p><p>Exception又分为两大类，运行时异常（也叫不受检异常）和编译时异常（也叫受检异常或非运行时异常）。</p><p><strong>运行时异常：</strong>均为<strong>RuntimeException</strong>或它子类的对象。</p><p>​    表示JVM在运行期间可能出现的错误。编译器不会检查此类异常，并且不要求处理异常。在程序中可以选择捕获处理，但此错误一般是由程序逻辑错误引起的，所有<strong>不建议进行捕获处理。</strong></p><p><strong>编译时异常：</strong>Exception中<strong>除RuntimeException极其子类之外</strong>的异常。</p><p>​    编译器会检查此类异常，如果程序中出现此类异常，比如说IOException，必须对该异常进行处理，要么使用try-catch捕获，要么使用throws语句抛出，否则编译不通过。</p><h1 id="捕获异常语法"><a href="#捕获异常语法" class="headerlink" title="捕获异常语法"></a>捕获异常语法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能发生异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型  异常名e)&#123;</span><br><span class="line">    处理异常的代码（一般都是打印异常的信息的语句）</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型  异常名e)&#123;</span><br><span class="line">    处理异常的代码（一般都是打印异常的信息的语句）</span><br><span class="line">&#125;。。。</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    无论<span class="keyword">try</span>中是否有异常，也不管<span class="keyword">catch</span>是否可以捕获异常，也不管<span class="keyword">try</span>和<span class="keyword">catch</span>中是不是有<span class="keyword">return</span>，都要执行的部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-执行特点"><a href="#1-执行特点" class="headerlink" title="1.执行特点"></a>1.执行特点</h2><ul><li><p>如果try中的代码没有异常，那么try中的代码会正常执行，catch部分就不执行，finally中会执行</p></li><li><p>如果try中的代码有异常，那么try中发生异常的代码的后面就不执行了，找对应的匹配的catch分支执行，        finally中会执行</p></li></ul><h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h2><ul><li>catch 中的异常名通常都命名为e，<strong>非强制</strong>要求。</li><li>捕获异常时是从上到下执行，一旦<strong>前面的catch捕获到异常后面的catch就不会执行</strong>（类似于if…else if的选择分支结构），所以<strong>要将范围较大的异常类型的catch放到范围较小的catch底下</strong>（一般情况下范围较大的异常类型是范围较小的父类)，否则会导致范围较小的catch永远无法执行，此时编译器也会报错。</li></ul><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/catch%E9%A1%BA%E5%BA%8F.png" alt="catch顺序"></p><ul><li>try…catch…finally存在return时，在非finally的地方遇到return时，会先把此时需要return的值放到<strong>“操作数栈”</strong>中然后再去执行finally中的代码，然后最终执行return。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTryCatchFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            System.out.println(testTryReturn());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testTryReturn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行try，此时i = &quot;</span>+i);</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;<span class="comment">//发生异常</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            i = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行catch，此时i = &quot;</span>+i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            i = <span class="number">3</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行finally，此时i = &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/return%E4%B8%8Etry.png" alt="return与try"></p><ul><li>若return存在于finally时，try和catch中的return没有机会执行。在实际开发中finally一般用于关闭资源等操作，不允许在finally中写return语句（编译器也会发出警告）。</li></ul><h1 id="其他语法"><a href="#其他语法" class="headerlink" title="其他语法"></a>其他语法</h1><h2 id="1-throws"><a href="#1-throws" class="headerlink" title="1.throws"></a>1.throws</h2><p>​    用于告知调用者此方法可能抛出的异常</p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 返回值类型  方法名(【形参列表】) <span class="keyword">throws</span> 异常列表&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>子类重写父类方法时，throws的异常列表范围不能大于父类，原因是保证多态引用时能正确捕获异常</li></ul><h2 id="2-throw"><a href="#2-throw" class="headerlink" title="2.throw"></a>2.throw</h2><p>​    用于手动抛出异常</p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> 异常对象;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">&quot;异常信息&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p>throw抛出来的异常对象，和JVM抛出来的异常对象一样，也要用try..catch处理或者throws。</p><p>如果是运行时异常，编译器不会强制要求你处理，如果是编译时异常，那么编译器会强制要求你处理。</p></li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>​    创建自定义异常的方式为创建一个类并继承Throwable或它的子类，在实际开发中通常是继承RuntimeException或Exception来自定义运行时异常或编译时异常。</p><p>​    <strong>建议在自定义异常时至少保留无参构造和异常信息message使用的有参构造</strong></p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义一个编译时异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCustomException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCustomException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    自定义异常只能手动通过throw抛出。</p><h1 id="关于异常的几个方法"><a href="#关于异常的几个方法" class="headerlink" title="关于异常的几个方法"></a>关于异常的几个方法</h1><p><strong>printStackTrace()：</strong></p><p>打印异常对象的详细信息，包括异常类型，message，堆栈跟踪信息。</p><p><strong>e.getMessage()：</strong></p><p>只是获取异常的message信息</p><p><strong>关于异常信息的打印：</strong></p><p>用System.err打印和用e.printStackTrace()都是会标记红色的突出。</p><p>用System.out打印，当成普通信息打印。</p><p>这两个打印是两个独立的线程，顺序是不能精确控制的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是异常&quot;&gt;&lt;a href=&quot;#什么是异常&quot; class=&quot;headerlink&quot; title=&quot;什么是异常&quot;&gt;&lt;/a&gt;什么是异常&lt;/h1&gt;&lt;p&gt;​    在一些情况下，由于&lt;strong&gt;非程序本身&lt;/strong&gt;问题，例如:配置问题、错误输入、磁盘空间不足等等所导致的程序无法正常运行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之注解</title>
    <link href="http://yoursite.com/2020/08/06/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/08/06/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-08-06T06:36:27.000Z</published>
    <updated>2020-08-11T02:53:46.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h1><p>​    <code>注解（Annotation）</code>可以理解为是一种特殊的注释，用于为代码提供元数据。一个完整的注解由声明、使用、读取三个部分组成。注解的修饰符为<code>@interface</code>，使用时的格式为<code>@注解名</code>。</p><a id="more"></a><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="1-基本注解"><a href="#1-基本注解" class="headerlink" title="1.基本注解"></a>1.基本注解</h2><p>​    基本注解是Java提供的最基础的几个注解，在<code>JDK1.5</code>版本加入注解时提供了三个基本注解，定义在<code>java.lang</code>包下</p><h3 id="1-1-Override"><a href="#1-1-Override" class="headerlink" title="1.1 @Override"></a>1.1 @Override</h3><p>​    使用在方法上，用于检查这个方法是否符合重写的要求，同时可以作为重写方法的标记，增加代码的可读性。若检查不符合重写要求则会在编译时报错。</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/Override%E6%8A%A5%E9%94%99.png" alt="Override报错"></p><p>​    上图中若去掉@Override则正常识别为方法重载。</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E5%8E%BB%E6%8E%89Override.png" alt="去掉Override"></p><p>​    正确重写方法时，报错消失，对于程序而言有无Override没有区别。</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/Override%E6%AD%A3%E7%A1%AE%E9%87%8D%E5%86%99.png" alt="Override正确重写"></p><h3 id="1-2-SuppressWarnings"><a href="#1-2-SuppressWarnings" class="headerlink" title="1.2 @SuppressWarnings"></a>1.2 @SuppressWarnings</h3><p>​    可以使用在类，字段，方法，参数，构造方法，局部变量上。用于抑制编译器的警告信息。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(“参数”)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;“参数1”，“参数2”.....&#125;)</span></span><br></pre></td></tr></table></figure><p>通过参数选择一个或多个抑制警告的种类。</p><table><thead><tr><th>参数</th><th align="left">抑制类型</th></tr></thead><tbody><tr><td>all</td><td align="left">抑制所有类型的警告</td></tr><tr><td>boxing</td><td align="left">抑制装箱、拆箱相关的警告</td></tr><tr><td>cast</td><td align="left">抑制映射相关的警告</td></tr><tr><td>dep-ann</td><td align="left">抑制启用注释的警告</td></tr><tr><td>deprecation</td><td align="left">抑制过期方法警告</td></tr><tr><td>fallthrough</td><td align="left">抑制switch中缺失breaks的警告</td></tr><tr><td>finally</td><td align="left">抑制finally模块没有返回的警告</td></tr><tr><td>incomplete-switch</td><td align="left">忽略没有完整的switch语句</td></tr><tr><td>nls</td><td align="left">忽略非nls格式的字符</td></tr><tr><td>null</td><td align="left">忽略对null的操作</td></tr><tr><td>rawtypes</td><td align="left">使用generics时忽略没有指定相应的类型</td></tr><tr><td>serial</td><td align="left">忽略在serializable类中没有声明serialVersionUID变量</td></tr><tr><td>static-access</td><td align="left">抑制不正确的静态访问方式警告</td></tr><tr><td>synthetic-access</td><td align="left">抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td>unchecked</td><td align="left">抑制没有进行类型检查操作的警告</td></tr><tr><td>unqualified-field-access</td><td align="left">抑制没有权限访问的域的警告</td></tr><tr><td>unused</td><td align="left">抑制没被使用过的代码的警告</td></tr></tbody></table><p>使用示例：</p><p>​        定义变量a但未使用，编译器抛出警告。</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E6%9C%AA%E4%BD%BF%E7%94%A8SuppressWarnings.png" alt="未使用SuppressWarnings"></p><p>使用SuppressWarnings后</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E4%BD%BF%E7%94%A8SuppressWarnings.png" alt="使用SuppressWarnings"></p><h3 id="1-3-Deprecated"><a href="#1-3-Deprecated" class="headerlink" title="1.3 @Deprecated"></a>1.3 @Deprecated</h3><p>​    可以使用在类、方法、属性上，用于标记此方法已经废弃。由于java对修改关闭，对扩展开放的原则，已经废弃的方法一般不会直接删除，而是使用这个注解去标记它。</p><p>源代码中对已过期方法的标记：</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84Deprecated.png" alt="源代码中的Deprecated"></p><p>自己使用@Deprecated：</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E8%87%AA%E5%B7%B1%E4%BD%BF%E7%94%A8Deprecated.png" alt="自己使用Deprecated"></p><h2 id="2-文档注解"><a href="#2-文档注解" class="headerlink" title="2.文档注解"></a>2.文档注解</h2><p>​    文档注解通常用于说明和记录程序的信息，以/** 开始，以 */结束。其中有一些用于标记信息内容的注解，建议养成编写文档注解的习惯，后续作为javadoc生成API的内容。</p><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">@author</td><td align="left">标识一个类的作者</td></tr><tr><td align="left">@deprecated</td><td align="left">指名一个过期的类或成员</td></tr><tr><td align="left">@exception</td><td align="left">标志一个类抛出的异常</td></tr><tr><td align="left">@param</td><td align="left">说明一个方法的参数</td></tr><tr><td align="left">@return</td><td align="left">说明返回值类型</td></tr><tr><td align="left">@see</td><td align="left">指定一个到另一个主题的链接</td></tr><tr><td align="left">@serial</td><td align="left">说明一个序列化属性</td></tr><tr><td align="left">@serialData</td><td align="left">说明通过writeObject( ) 和 writeExternal( )方法写的数据</td></tr><tr><td align="left">@serialField</td><td align="left">说明一个ObjectStreamField组件</td></tr><tr><td align="left">@since</td><td align="left">标记当引入一个特定的变化时</td></tr><tr><td align="left">@throws</td><td align="left">和 @exception标签一样</td></tr><tr><td align="left">@version</td><td align="left">指定类的版本</td></tr></tbody></table><p>可以参考源码中的文档注解</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E6%B3%A8%E8%A7%A3.png" alt="源码中的文档注解"></p><p><strong>格式规范：</strong></p><p>@param 形参名 形参数据类型 解释。（每个形参单独写一个@param）</p><p>@return 返回值类型 解释。（若为void则省略）</p><p>@throws 异常类型名 解释（每个可能抛出的异常单独写一个@throws，没有则省略）</p><p><strong>文档注解与代码请时刻保持一致！</strong></p><h2 id="3-JUnit"><a href="#3-JUnit" class="headerlink" title="3.JUnit"></a>3.JUnit</h2><p>​    JUnit是一个回归测试框架，常用于编写单元测试，现在多数开发环境中都集成了JUnit。使用Eclipse做一个简单的说明。</p><h3 id="3-1-使用JUnit"><a href="#3-1-使用JUnit" class="headerlink" title="3.1 使用JUnit"></a>3.1 使用JUnit</h3><p>​    右键项目选择 Build Part → Add Library</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E4%BD%BF%E7%94%A8JUnit1.png" alt="使用JUnit1"></p><p>​    选择JUnit 然后完成（下一步可以选择JUnit的版本和路径）</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E4%BD%BF%E7%94%A8JUnit2.png" alt="使用JUnit2"></p><p>​    添加成功</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E4%BD%BF%E7%94%A8JUnit3.png" alt="使用JUnit3"></p><h3 id="3-2-JUnit中的注解"><a href="#3-2-JUnit中的注解" class="headerlink" title="3.2 JUnit中的注解"></a>3.2 JUnit中的注解</h3><p>（1）@Test：表示它是一个单元测试方法</p><p>这个方法需要是：public void xxx(){}</p><p>（2）@Before：表示在每一个单元测试方法之前执行</p><p>这个方法需要是：public void xxx(){}</p><p>（3）@After：表示在每一个单元测试方法之后执行</p><p>这个方法需要是：public void xxx(){}</p><p>（4）@BeforeClass：表示在类初始化阶段执行，而且只执行一次</p><p>这个方法需要是：public static void xxx(){}</p><p>（5）@AfterClass：表示在类的“卸载”阶段执行，而且只执行一次</p><p>这个方法需要是：public static void xxx(){}</p><p><strong>执行顺序测试：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/JUni%E6%B5%81%E7%A8%8B.png" alt="JUni流程"></p><p><strong>执行结果：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/JUnit%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%9C.png" alt="JUnit流程结果"></p><p><strong>执行流程图：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/JUnit%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="JUnit流程图"></p><h3 id="3-3Junit的技巧"><a href="#3-3Junit的技巧" class="headerlink" title="3.3Junit的技巧"></a>3.3Junit的技巧</h3><p>​    由于@Test等注解都要求方法需要为public、无返回值且无形参。若需要测试的方法不符合这个条件，可以再本类中创建一个符合条件的方法去调用需要测试的方法。</p><p>​    <strong>以@Test为例：</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/JUnit%E6%8A%80%E5%B7%A7.png" alt="JUnit技巧"></p><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>​    上面介绍的注解中，我们实际涉及的只有注解的使用部分，除了使用已经定义好的注解外，我们还可以像定义类和接口那样自己定义注解。</p><h2 id="1-注解的声明"><a href="#1-注解的声明" class="headerlink" title="1.注解的声明"></a>1.注解的声明</h2><p>​        <strong>注解的声明的格式如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@元注解</span><br><span class="line">【修饰符】 <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@元注解</span><br><span class="line">【修饰符】 <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    注解类型元素</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    注解的关键字为<code>@interface</code>,所有的注解自动继承<strong>java.lang.annotation.Annotation接口</strong> ，注解实现部分只能为<strong>注解类型元素</strong>。</p><h2 id="2元注解"><a href="#2元注解" class="headerlink" title="2元注解"></a>2元注解</h2><p>​     元注解是专门用于修饰注解的注解（注解注解的注解…..），在声明注解时使用。下面是一些常用的元注解</p><h3 id="2-1-Target"><a href="#2-1-Target" class="headerlink" title="2.1 @Target"></a>2.1 @Target</h3><p>​    用来限定此注解可以使用的位置，它使用一个枚举类型ElementType存放不同的常量对象指定不同权限，具体如下。</p><table><thead><tr><th>ElemntType.</th><th>使用位置</th></tr></thead><tbody><tr><td>TYPE</td><td>类，接口（包括注解类型）或枚举的声明</td></tr><tr><td>FIELD</td><td>属性的声明</td></tr><tr><td>METHOD</td><td>方法的声明</td></tr><tr><td>PARAMETER</td><td>方法形式参数声明</td></tr><tr><td>CONSTRUCTOR</td><td>构造方法的声明</td></tr><tr><td>LOCAL_VARIABLE</td><td>局部变量声明</td></tr><tr><td>ANNOTATION_TYPE</td><td>注解类型声明</td></tr><tr><td>PACKAGE</td><td>包的声明</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CherryAnnotation被限定只能使用在类、接口或方法上面</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Retention"><a href="#2-2-Retention" class="headerlink" title="2.2 @Retention"></a>2.2 @Retention</h3><p>​    用来标记此注解的声明周期，它使用一个枚举类型RetentionPolicy存放不同的常量对象指定不同权限，具体如下。</p><table><thead><tr><th>RetentionPolicy.</th><th>生命周期</th></tr></thead><tbody><tr><td>SOURCE</td><td>编译前</td></tr><tr><td>CLASS</td><td>运行前</td></tr><tr><td>RUNTIME</td><td>运行时</td></tr></tbody></table><p><strong>不同生命周期的效果：</strong></p><ul><li><p>编译前（RetentionPolicy.SOURCE），只存在于.Java文件当中，编译时会被编译器忽略，从而导致此注解不会存在于.class文件当中。实际效果与注释一致。</p></li><li><p>运行前（RetentionPolicy.CLASS），可以编译到.class文件当中，故编译器编译时可以根据注解信息做出相应操作，但在运行时会被JVM所忽略。</p></li><li><p>运行时（RetentionPolicy.RUNTIME），可以在运行时通过反射得到注解信息从而进行相应的判断和操作，是自定义注解所使用最多的权限。</p><p><strong><em>若自定义注解未指定@Retention则默认为RetentionPolicy.CLASS</em></strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CherryAnnotation被限定只能使用在类、接口或方法上面</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="comment">//@CherryAnnotation的生命周期为运行时。</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Documented"><a href="#2-3-Documented" class="headerlink" title="2.3 @Documented"></a>2.3 @Documented</h3><p>​    用来标记此注解的是否能被JavaDoc生成到API当中。</p><p><strong>示例：</strong></p><p>声明一个带有@Documented的CherryAnnotation注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个不带有@Documented的CherryAnnotation2注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="comment">//@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个测试类，同时使用上面两个注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CherryAnnotation</span></span><br><span class="line"><span class="meta">@CherryAnnotation2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDocumented</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用javadoc导出，结果类中只显示了CherryAnnotation</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/Documented%E7%A4%BA%E4%BE%8B.png" alt="Documented示例"></p><h3 id="2-4-Inherited"><a href="#2-4-Inherited" class="headerlink" title="2.4 @Inherited"></a>2.4 @Inherited</h3><p>​    用来标记此注解的是否能被子类继承。</p><p><strong>验证：</strong></p><p>在1.2.2CherryAnnotation注解基础上增加@Inherited</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CherryAnnotation被限定只能使用在类、接口或方法上面</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="comment">//@CherryAnnotation的生命周期为运行时。</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//@CherryAnnotation是可以被使用者的子类继承的</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造一下测试类,这里涉及到反射的知识，简单来说就是尝试获取子类中的CherryAnnotation（简单使用，代码不规范。不理解的可以先跳过，等到泛型和反射的知识就能理解了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@CherryAnnotation</span><br><span class="line">public class TestDocumented &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class cla &#x3D; TestDocumentedSon.class;</span><br><span class="line">        CherryAnnotation ca &#x3D;(CherryAnnotation)cla.getAnnotation(CherryAnnotation.class);</span><br><span class="line">        System.out.println(ca);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestDocumentedSon extends TestDocumented &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码运行结果：</strong></p><p>成功获取到CherryAnnotation，说明子类继承了父类的@CherryAnnotation</p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E4%BD%BF%E7%94%A8Inherited.png" alt="使用Inherited"></p><p><strong>若没有使用@Inherited则不会被使用者的子类所继承，运行结果为null</strong></p><p><img src="/image/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3/%E6%9C%AA%E4%BD%BF%E7%94%A8Inherited.png" alt="未使用Inherited"></p><h2 id="3-注解类型元素"><a href="#3-注解类型元素" class="headerlink" title="3.注解类型元素"></a>3.注解类型元素</h2><p>​    注解元素类型是注解特有的一种语法，作用是供读取阶段根据元素的值进行不同操作。由于格式与抽象方法的定义一致，所以有人把注解类型元素叫做注解的抽象方法。又由于调用时需要类似赋值的操作，所以也有的叫做注解的变量/参数。</p><h3 id="3-1-注解类型元素的格式"><a href="#3-1-注解类型元素的格式" class="headerlink" title="3.1 注解类型元素的格式"></a>3.1 注解类型元素的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@元注解</span></span><br><span class="line">【修饰符】 <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    修饰符 元素类型 元素名();<span class="comment">//与抽象方法的格式一致</span></span><br><span class="line">        <span class="comment">//可以定义多个注解类型元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有几点需要注意：</strong></p><ul><li>修饰符必须为<strong>public</strong>，若省略则<strong>默认为public</strong>。</li><li>元素的类型只能是 <strong>基本数据类型</strong>、<strong>String</strong>、<strong>Class</strong>、<strong>枚举类型</strong>、<strong>注解类型</strong>（体现了注解的嵌套效果）以及<strong>上述类型的一位数组。</strong></li><li>不能在括号中定义任何参数，仅仅只是一个特殊的语法；</li></ul><h3 id="3-2-传入方式"><a href="#3-2-传入方式" class="headerlink" title="3.2 传入方式"></a>3.2 传入方式</h3><p>​    若定义了注解类型元素，则需要在使用这个注解时传入相应的值,格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@注解名(元素名1 = 传入的值,元素名2 = 传入的值)</span></span><br><span class="line"><span class="meta">@CherryAnnotation(str = &quot;abc&quot;,a=1)</span><span class="comment">//使用3.1中的CherryAnnotation</span></span><br></pre></td></tr></table></figure><p><strong>有几点需要注意：</strong></p><ul><li>若注解中只定义了一个元素，可以将其命名为<strong>value</strong>，在使用注解时可以省略**元素名 =**，例如元注解中的@Target、@Retention。</li><li>如果没有默认值，使用注解时必须给该类型元素赋值</li><li>默认值的定义方法为在定义元素的后面加上<code>default</code>和（空格）默认值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改造一下CherryAnnotation</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span><span class="keyword">default</span> 1</span>;<span class="comment">//将元素a的默认值设为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@CherryAnnotation(str = &quot;abc&quot;)</span><span class="comment">//使用时不传入a值则默认为1</span></span><br><span class="line"><span class="meta">@CherryAnnotation(str = &quot;abc&quot;,a=2)</span><span class="comment">//若有传入值则为传入值。</span></span><br></pre></td></tr></table></figure><h2 id="4注解的读取"><a href="#4注解的读取" class="headerlink" title="4注解的读取"></a>4注解的读取</h2><p><strong>由于涉及反射内容，整理完Java基础之反射后再更新</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h1&gt;&lt;p&gt;​    &lt;code&gt;注解（Annotation）&lt;/code&gt;可以理解为是一种特殊的注释，用于为代码提供元数据。一个完整的注解由声明、使用、读取三个部分组成。注解的修饰符为&lt;code&gt;@interface&lt;/code&gt;，使用时的格式为&lt;code&gt;@注解名&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>markdown常用语法</title>
    <link href="http://yoursite.com/2020/08/05/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/08/05/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</id>
    <published>2020-08-05T08:26:21.000Z</published>
    <updated>2020-08-07T09:44:21.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown常用语法"><a href="#markdown常用语法" class="headerlink" title="markdown常用语法"></a>markdown常用语法</h1><p>​    工欲善其事必先利其器，markdown作为最适合程序员的文本编辑格式，是写技术博客不可或缺的一环，花了一天时间学习了相关的语法，总结分享作为新博客的第一篇文章。</p><a id="more"></a><h2 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h2><h3 id="0-标题"><a href="#0-标题" class="headerlink" title="0.标题"></a>0.标题</h3><p>​    标题格式：<strong># + 空格 + 标题内容</strong>，几个’#就代表几级标题。</p><h3 id="1-字体"><a href="#1-字体" class="headerlink" title="1.字体"></a>1.字体</h3><p>​        字体格式：<strong>*文本内容* 或  _文本内容_</strong> ，一个符号为<em>斜体文本</em>，两个符号为<strong>粗体文本</strong>，三个符号为**<em>粗斜体文本**</em>。</p><table><thead><tr><th align="center">输入内容</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">*斜体文本* 或  _斜体文本_</td><td align="center"><em>斜体文本</em></td></tr><tr><td align="center">**粗体文本** 或 __粗体文本__</td><td align="center"><strong>粗体文本</strong></td></tr><tr><td align="center">***粗斜体文本*** 或 ___粗斜体文本___</td><td align="center"><strong><em>粗斜体文本</em></strong></td></tr></tbody></table><h3 id="2-删除线"><a href="#2-删除线" class="headerlink" title="2.删除线"></a>2.删除线</h3><p>​        删除线格式：<strong>~~删除线文本~~</strong></p><table><thead><tr><th align="center">输入内容</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">普通文本</td><td align="center">普通文本</td></tr><tr><td align="center">~~删除线文本~~</td><td align="center"><del>删除线文本</del></td></tr></tbody></table><h3 id="3-下划线"><a href="#3-下划线" class="headerlink" title="3.下划线"></a>3.下划线</h3><p>​        下划线格式：<strong>&lt;u&gt;带下划线的文本&lt;/u&gt;</strong></p><table><thead><tr><th align="center">输入内容</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">普通文本</td><td align="center">普通文本</td></tr><tr><td align="center">&lt;u&gt;带下划线的文本&lt;/u&gt;</td><td align="center"><u>带下划线的文本</u></td></tr></tbody></table><h3 id="4-脚注"><a href="#4-脚注" class="headerlink" title="4.脚注"></a>4.脚注</h3><p>​    <strong>使用脚注</strong>：文本内容[^脚注名称]，<strong>解释脚注：</strong>[^脚注名称]:脚注内容。</p><p>​    <strong>效果</strong>：文本内容<a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E8%84%9A%E6%B3%A8">^脚注</a></p><h3 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h3><p>​    使用三个或以上 * 或 - 来使用下划线，可以在符号中加空格（可能会在编写软件中识别为其他符号，<strong>不建议使用</strong>），且本行中不可有其他内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">几种分割线示意：</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>分割线效果：</p><hr><p><strong>错误示范</strong>：***其他内容（未出现分割线效果）</p><h2 id="列表与区块"><a href="#列表与区块" class="headerlink" title="列表与区块"></a>列表与区块</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h3><p>​    无序列表格式：<strong>* 或 + 或 - 加上一个空格后面再加上内容</strong>，三个符号效果相同。</p><p><strong>输入</strong>：</p><p>​    * 无序第一列</p><p>​    + 无序第二列</p><p>​    -  无序第三列</p><p><strong>效果</strong>：</p><pre><code>    * 无序第一列</code></pre><ul><li>无序第二列</li></ul><ul><li>无序第三列</li></ul><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h3><p>​    有序列表格式：<strong>数字+ . + 空格 + 内容</strong>，即将无序列表的符号替换为数字加点的格式（例如1.）。</p><p><strong>输入</strong>：</p><p>​    1. 有序第一列</p><p>​    2. 有序第二列</p><p>​    3. 有序第三列</p><p><strong>效果</strong>:</p><ol><li>有序第一列</li><li>有序第二列</li><li>有序第三列</li></ol><h3 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3.列表嵌套"></a>3.列表嵌套</h3><p>​    在语法中为在<strong>子列表前添加四个空格</strong>，不过一般都在编写软件上编写<strong>更推荐使用TAB（缩进）与SHIFT+TAB（反缩进）</strong></p><p>​    <strong>输入</strong>：</p><p>​    1. 第一项：</p><p>​        * 第一项嵌套的第一个元素</p><p>​        * 第一项嵌套的第二个元素</p><p>​    2. 第二项：</p><p>​        * 第二项嵌套的第一个元素</p><p>​        * 第二项嵌套的第二个元素</p><p><strong>效果</strong>:</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<pre><code>* 第二项嵌套的第一个元素   * 第二项嵌套的第二个元素</code></pre></li></ol><h3 id="4-区块"><a href="#4-区块" class="headerlink" title="4.区块"></a>4.区块</h3><p>​    区块格式：<strong>在每行前加上 &gt; 然后紧跟一个空格。</strong></p><p><strong>输入：</strong></p><p>&gt; 区块引用第一行</p><p>&gt; 区块引用第二行</p><p><strong>效果：</strong></p><blockquote><p>区块引用第一行</p><p>区块引用第二行</p></blockquote><h3 id="5-区块嵌套"><a href="#5-区块嵌套" class="headerlink" title="5.区块嵌套"></a>5.区块嵌套</h3><p>​    区块嵌套格式：<strong>每有一个 &gt; 号就表示一层嵌套</strong></p><p><strong>输入：</strong></p><p>&gt; 最外层</p><p>&gt;&gt; 第一层嵌套</p><p>&gt;&gt;&gt; 第二层嵌套</p><p>**效果: **</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="1-代码片段"><a href="#1-代码片段" class="headerlink" title="1.代码片段"></a>1.代码片段</h3><p>​    代码片段格式：**` 代码内容 ` **(反引号)</p><p>​    <strong>输入：</strong> ` int a ;`         <strong>效果：</strong> <code>int a;</code></p><h3 id="2-代码区块"><a href="#2-代码区块" class="headerlink" title="2.代码区块"></a>2.代码区块</h3><p>​    格式：用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><p><strong>输入：</strong></p><p>​    ``` java</p><p>public class Test {<br>    public static void main(String[] args) {<br>        System.out.println(“Hello World”);<br>    }<br>}</p><p>​    ```</p><p><strong>效果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="1-直接显示链接"><a href="#1-直接显示链接" class="headerlink" title="1.直接显示链接"></a>1.直接显示链接</h3><p>​    语法格式: <strong>&lt; 链接 &gt; **    **效果:</strong> <a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h3 id="2-用名称替代链接"><a href="#2-用名称替代链接" class="headerlink" title="2.用名称替代链接"></a>2.用名称替代链接</h3><p>​    语法格式：**[链接名称](链接地址)  **效果：这是我的<a href="https://ykailh.github.io/">博客</a></p><h3 id="3-用名称和变量替代链接"><a href="#3-用名称和变量替代链接" class="headerlink" title="3.用名称和变量替代链接"></a>3.用名称和变量替代链接</h3><p>​    语法格式：<strong>[链接名称][变量名称]，[变量名称]</strong>: 链接。变量定义类似于脚注，效果与用名称替代类似，但方便多次使用。</p><p>效果：这是一个<a href="https://www.baidu.com/">百度链接</a>，再次使用<a href="https://www.baidu.com/">百度链接</a>。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>​    <strong>用 | 来分隔单元格，- 来分隔表头。</strong></p><p><strong>输入：</strong></p><p>| 表头 | 表头 |</p><p>|  —-  |  —-  |</p><p>| 单元格 | 单元格 |</p><p>| 单元格 | 单元格 |</p><p><strong>效果：</strong></p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p><strong>默认为左对齐</strong></p><hr><p>将分隔符替换为<strong>-: , :-  , :-:</strong> 分别表示右对齐，左对齐，居中对齐。</p><p><strong>输入：</strong></p><p>| 左对齐 | 右对齐 | 居中对齐 |</p><p>|  :—-  |  —-:  | :—-: |</p><p>| 单元格 | 单元格 | 单元格 |</p><p>| 单元格 | 单元格 | 单元格 |</p><p><strong>效果</strong>：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>​    图片插入格式：![图片名](图片相对路径/绝对路径/图片链接)；</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>​    编写md文件时建议使用专用的编辑器，一般都支持自动补全和实时预览，可以提高编写的效率。博主正在用的也是许多人推荐的Typora,也推荐给大家。<a href="https://www.typora.io/">Typora官网</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown常用语法&quot;&gt;&lt;a href=&quot;#markdown常用语法&quot; class=&quot;headerlink&quot; title=&quot;markdown常用语法&quot;&gt;&lt;/a&gt;markdown常用语法&lt;/h1&gt;&lt;p&gt;​    工欲善其事必先利其器，markdown作为最适合程序员的文本编辑格式，是写技术博客不可或缺的一环，花了一天时间学习了相关的语法，总结分享作为新博客的第一篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常用软件" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
      <category term="常用软件" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
</feed>
