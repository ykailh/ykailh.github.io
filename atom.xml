<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ykailh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-29T08:07:11.346Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ykailh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis入门之HelloWorld</title>
    <link href="http://yoursite.com/2020/10/14/MyBatis%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/"/>
    <id>http://yoursite.com/2020/10/14/MyBatis%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/</id>
    <published>2020-10-14T06:53:39.000Z</published>
    <updated>2020-10-29T08:07:11.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="1-什么是MyBatis"><a href="#1-什么是MyBatis" class="headerlink" title="1.什么是MyBatis"></a>1.什么是MyBatis</h3><ul><li><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p></li><li><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p></li><li><p>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</p></li><li><p>Mybatis 是一个 半自动的ORM（Object   Relation  Mapping）框架</p></li></ul><p>它也是现在JavaWeb开发中最流行的持久层框架，同时它也是开源免费的。</p><p>github地址：<a href="https://github.com/mybatis/mybatis-3/">https://github.com/mybatis/mybatis-3/</a></p><h3 id="2-MyBatis的优势"><a href="#2-MyBatis的优势" class="headerlink" title="2.MyBatis的优势"></a>2.MyBatis的优势</h3><p><strong>JDBC：</strong></p><p>​    ① SQL夹在Java代码块里，耦合度高导致硬编码内伤</p><p>​    ② 维护不易且实际开发需求中sql有变化，频繁修改的情况多见</p><p><strong>Hibernate和JPA：</strong></p><p>​    ① 长难复杂SQL，对于Hibernate而言处理也不容易</p><p>​    ② 内部自动生产的SQL，不容易做特殊优化</p><p>​    ③ 基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难。导致数据库性能下降</p><p>  <strong>MyBatis：</strong></p><p>​    ① 对开发人员而言，核心sql还是需要自己优化</p><p>​    ② sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>​    简单演示MyBatis，只需要搭建一个java项目即可，此次演示的为简单的查询功能，使用的数据库为MySQL。</p><h3 id="1-搭建项目"><a href="#1-搭建项目" class="headerlink" title="1.搭建项目"></a>1.搭建项目</h3><p>​    创建一个Employee类以及对应的EmployeeDao。</p><p><strong>Employee.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empName = empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, empName=&quot;</span> + empName + <span class="string">&quot;, gender=&quot;</span> + gender + <span class="string">&quot;, email=&quot;</span> + email + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据id获取Employee对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployeeById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个名为mybatis_test的数据库，以及对应的t_employee表：</p><p><img src="/image/MyBatis%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="表结构"></p><p>随便写入一些数据。</p><h3 id="2-导入Jar包"><a href="#2-导入Jar包" class="headerlink" title="2.导入Jar包"></a>2.导入Jar包</h3><p>MyBatis只依赖于自身的一个Jar包<code>mybatis-3.x.x.jar</code>以及数据库连接的所使用的jar包，这里是MySQl所以为<code>mysql-connector-java-5.x.x-bin.jar</code>如果想要输出日志还需要导入相关的日志jar包，这里使用log4j。</p><p><img src="/image/MyBatis%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="相关jar包"></p><p>使用log4j还需要相对于的xml文件配置，不了解的可以直接复制粘贴一下内容到<code>log4j.xml</code>中即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置MyBatis"><a href="#3-配置MyBatis" class="headerlink" title="3.配置MyBatis"></a>3.配置MyBatis</h3><p>​    MyBatis的配置分为全局配置以及SQL映射的配置文件。全局配置文件是对MyBatis的整体属性、信息进行配置。现在可以不需要理解配置文件中的内容，直接复制到自己的配置文件中修改相关的信息即可。</p><p><strong>mybatis-config.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;160430&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置SQL映射文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Employee.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了全局配置外，还需要为每一个Dao接口单独配置一个Sql映射文件，在使用了MyBatis后我们不需要在创建一个Dao接口的实现类，只需要将这些信息配置到这个文件当中即可。</p><p><strong>EmployeeDao.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:全类名，相当对这个接口的实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ykailh.dao.EmployeeDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 相当于对于方法的实现</span></span><br><span class="line"><span class="comment">      select标签：定义为查询操作</span></span><br><span class="line"><span class="comment">      id：需要实现的方法名</span></span><br><span class="line"><span class="comment">      resultType：方法的返回类型全类名</span></span><br><span class="line"><span class="comment">      标签的值为SQL语句，使用#&#123;参数名&#125;替代条件（JDBC中的？）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ykailh.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from t_employee where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意的是映射文件一定要在全局文件中配置才能生效，即</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SQL映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Employee.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-执行流程"><a href="#4-执行流程" class="headerlink" title="4.执行流程"></a>4.执行流程</h3><p>​    现在已经配置好了MyBatis所需的环境，接下来创建一个测试类来尝试调用查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据全局配置文件创建一个SqlSessionFactory</span></span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//获取EmployeeDao的实现</span></span><br><span class="line">        EmployeeDao employeeDao = openSession.getMapper(EmployeeDao.class);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Employee employee = employeeDao.getEmployeeById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说明一下上面的流程：</p><ol><li>根据全局配置文件创建一个SqlSessionFactory，它负责产生SqlSession。</li><li>通过SqlSessionFactory获取一个SqlSession，它是一个与数据库的链接，类似于线程池与线程的关系。</li><li>通过这个SqlSession可以获取到由MyBatis根据Sql映射文件所产生的Dao接口的实现类。</li><li>调用方法，获取结果。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#MyBatis简介&quot; class=&quot;headerlink&quot; title=&quot;MyBatis简介&quot;&gt;&lt;/a&gt;MyBatis简介&lt;/h2&gt;&lt;h3 id=&quot;1-什么是MyBatis&quot;&gt;&lt;a href=&quot;#1-什么是MyBatis&quot;
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="MyBatis入门" scheme="http://yoursite.com/tags/MyBatis%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之异常处理</title>
    <link href="http://yoursite.com/2020/10/10/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/10/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-10-10T06:20:25.000Z</published>
    <updated>2020-10-28T12:02:51.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC异常处理的方式"><a href="#SpringMVC异常处理的方式" class="headerlink" title="SpringMVC异常处理的方式"></a>SpringMVC异常处理的方式</h2><p>​    SpringMVC也是通过解析器的方式对异常进行处理，这些处理器的根接口为<code>org.springframework.web.servlet.HandlerExceptionResolver</code>，SpringMVC提供了以下实现类：</p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB.png" alt="异常处理器体系"></p><p><strong>在没有配置<code>&lt;mvc:annotation-driven /&gt;</code>的情况下，会自动装配以下三个异常解析器：</strong></p><ul><li><code>AnnotationMethodHandlerExceptionResolver</code></li><li><code>ResponseStatusExceptionResolver</code></li><li><code>DefaultHandlerExceptionResolver</code></li></ul><p><strong>而在配置了<code>&lt;mvc:annotation-driven /&gt;</code>的情况下，会自动装配这三个异常解析器：</strong></p><ul><li><code>ExceptionHandlerExceptionResolver</code></li><li><code>ResponseStatusExceptionResolver</code></li><li><code>DefaultHandlerExceptionResolver</code></li></ul><p>遇到异常时会像解析视图一样按照解析器顺序循环解析异常，直接能够解析为止。不同的解析器用于不同的使用场景，下面基于<code>&lt;mvc:annotation-driven /&gt;</code>的情况下进行讲解。</p><h2 id="ExceptionHandlerExceptionResolver"><a href="#ExceptionHandlerExceptionResolver" class="headerlink" title="ExceptionHandlerExceptionResolver"></a>ExceptionHandlerExceptionResolver</h2><p>​    用于处理标记了<code>@ExceptionHandler</code>的方法，在处理异常时会匹配这些标签上的异常类型是否匹配，若匹配则调用该方法处理异常。</p><h3 id="1-处理控制器中的异常"><a href="#1-处理控制器中的异常" class="headerlink" title="1.处理控制器中的异常"></a>1.处理控制器中的异常</h3><p>​    若想要指定方法处理该控制器中所发生的异常，只需要在控制器中的方法上加上<code>@ExceptionHandler</code>即可，<code>@ExceptionHandler</code>的<strong>value值表示这个方法能够处理的异常类型</strong>，可以在这个方法的<strong>形参中使用对应的异常类型参数接收异常对象</strong>，这个方法的<strong>返回值扔和处理方法的一致</strong>最终都会转换为ModelAndView，但<strong>不会有默认的数据模型对象</strong>，可以用ModelAndView实现异常对象的传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//产生空指针异常，用于测试</span></span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        s.getBytes();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定这个方法为处理该控制器异常的方法，value值为处理异常的类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="comment">//在参数中使用对应的异常类型接受这个异常对象，注意参数列表只有这个有效参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exception</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常&quot;</span>);</span><br><span class="line">        <span class="comment">//在没有其他形参的情况下，可以使用ModelAndView传递异常信息</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;exception&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问<code>/test</code>时会跳转到<code>exception方法</code>中并进行异常处理，最终跳转到<code>error页面</code>中。</strong></p><h3 id="2-全局异常处理"><a href="#2-全局异常处理" class="headerlink" title="2.全局异常处理"></a>2.全局异常处理</h3><p>​    如果需要对全部的控制器的异常进行统一处理，可以定义一个类并在这个类上加上<code>@ControllerAdvice</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标记这个类中的处理异常方法作用于所有控制器</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理所有控制器的空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exception</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常&quot;</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;exception&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-异常处理优先级"><a href="#3-异常处理优先级" class="headerlink" title="3.异常处理优先级"></a>3.异常处理优先级</h3><p>​    在都符合可以处理的异常类型的情况下，优先匹配本控制器的异常处理方法再匹配全局的异常处理方法，在同一范围的情况下优先匹配范围精确（父类与子类之间优先匹配子类）的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//产生空指针异常，用于测试</span></span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        s.getBytes();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//优先级第一</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//优先级第二</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标记这个类中的处理异常方法作用于所有控制器</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优先级第三</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseStatusExceptionResolver"><a href="#ResponseStatusExceptionResolver" class="headerlink" title="ResponseStatusExceptionResolver"></a>ResponseStatusExceptionResolver</h2><p>​    用于处理标记了<code>@ResponseStatus</code>的方法或类，它的两个属性分别为<code>reason</code>表示页面描述信息已经<code>value</code>为页面的状态码，所以的状态码封装在<code>HttpStatus</code>这个枚举类中。当访问这个注解下的方法时会跳转到SpringMVC生成的错误页面当中。</p><h3 id="1-作用于方法"><a href="#1-作用于方法" class="headerlink" title="1.作用于方法"></a>1.作用于方法</h3><p>​    访问方法时跳转到错误页面中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseStatus(reason=&quot;发生异常了&quot;,value=HttpStatus.METHOD_NOT_ALLOWED)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p>​    <img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E9%A1%B5%E9%9D%A2.png" alt="异常页面"></p><h3 id="2-作用于类"><a href="#2-作用于类" class="headerlink" title="2.作用于类"></a>2.作用于类</h3><p>​    一般使用在自定义异常上，加上<code>@ResponseStatus</code>后抛出这个自定义异常时会跳转到错误页面中。</p><p><strong>自定义异常：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常使用ResponseStatus注解</span></span><br><span class="line"><span class="meta">@ResponseStatus(reason=&quot;发生异常了&quot;,value=HttpStatus.METHOD_NOT_ALLOWED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出这个异常时会跳转到错误页面</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a>DefaultHandlerExceptionResolver</h2><p>这个处理器是SpringMVC用于处理一些自身异常的处理器，它可以使一些异常发生时跳转到SpringMVC自己定义的页面中而不是服务器的错误页面。它可以处理比如：</p><ul><li>NoSuchRequestHandlingMethodException</li><li>HttpRequestMethodNotSupportedException</li><li>HttpMediaTypeNotSupportedException</li><li>HttpMediaTypeNotAcceptableException等等</li></ul><h2 id="SimpleMappingExceptionResolver"><a href="#SimpleMappingExceptionResolver" class="headerlink" title="SimpleMappingExceptionResolver"></a>SimpleMappingExceptionResolver</h2><p>​    基于文件配置的异常处理器，在前置控制器的配置文件中配置即可生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关联异常与目标错误页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- key为异常全类名，值为目标视图名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.NullPointerException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringMVC异常处理的方式&quot;&gt;&lt;a href=&quot;#SpringMVC异常处理的方式&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC异常处理的方式&quot;&gt;&lt;/a&gt;SpringMVC异常处理的方式&lt;/h2&gt;&lt;p&gt;​    SpringMVC
      
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之拦截器</title>
    <link href="http://yoursite.com/2020/10/09/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2020/10/09/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2020-10-09T09:16:25.000Z</published>
    <updated>2020-10-28T03:39:34.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h2><p>​    拦截器由SpringMVC所提供，用于在处理请求的方法执行前后进行操作。它与处理方法的关系类似于Filter与Servlet的关系。</p><a id="more"></a><p>​    <strong>拦截器中最关键的三个方法为：</strong></p><ul><li><p><code>preHandle</code>：这个方法在业务处理器<strong>处理请求之前被调用</strong>，在该方法中对用户请求 <code>request</code> 进行处理。这个方法的返回值为boolean类型，<strong>若返回true则放行，调用其他的拦截器或者是业务处理器去进行处理</strong>。<strong>若返回false则进行拦截</strong>。</p></li><li><p><code>postHandle</code>：这个方法在<strong>业务处理器处理完请求后</strong>，但是<code>DispatcherServlet</code> 向客户端<strong>返回响应前被调用</strong>，一般用于对<code>response</code>进行处理。</p></li><li><p><code>afterCompletion</code>：这个方法在 <code>DispatcherServlet</code> <strong>完全处理完请求后被调用</strong>，可以在该方法中进行一些资源清理的操作。需要注意的是，只要在<code>preHandle</code>中的返回值为true（即放行），则这个方法一定会执行。</p></li></ul><h2 id="拦截器的实现"><a href="#拦截器的实现" class="headerlink" title="拦截器的实现"></a>拦截器的实现</h2><h3 id="1-编写bean"><a href="#1-编写bean" class="headerlink" title="1.编写bean"></a>1.编写bean</h3><p>需要实现拦截器的功能，需要实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口或继承</p><p><code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter</code>类。    </p><p>​    <code>HandlerInterceptorAdapter</code>类只是对<code>HandlerInterceptor</code>接口的简单实现（没有实现功能），一般在不需要同时重写上述三个方法时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现HandlerInterceptor接口实现拦截器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstInterceptor----preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstInterceptor----postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstInterceptor----afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置bean"><a href="#2-配置bean" class="headerlink" title="2.配置bean"></a>2.配置bean</h3><p>​    除此之外还要在前端控制器的配置文件中进行配置，所有的拦截器的配置信息都在<code>&lt;mvc:interceptors&gt;</code>标签下，有两种配置方式：</p><ul><li><p>1.直接配置bean</p><p>默认拦截所有请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在此标签下配置所有的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式： 以bean标签配置默认拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2.在<code>&lt;mvc:interceptor&gt;</code>标签下配置</p><p>可以详细的配置拦截器信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在此标签下配置所有的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式： 在mvc:interceptor标签下配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截的请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.interceptor.SecondInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h3><ul><li><p><strong>控制器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理请求....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>目标页面：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">System.out.println</span>(&quot;跳转到页面&quot;); %&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>运行结果：</strong></p><blockquote><p>FirstInterceptor—-preHandle<br>处理请求….<br>FirstInterceptor—-postHandle<br>跳转到页面<br>FirstInterceptor—-afterCompletion</p></blockquote><h2 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h2><h3 id="1-执行顺序说明"><a href="#1-执行顺序说明" class="headerlink" title="1.执行顺序说明"></a>1.执行顺序说明</h3><p>​    多个拦截器的执行顺序与多个Filter的执行顺序类似。多个拦截器的执行情况如下：</p><ol><li><p>按照配置顺序依次执行<code>preHandle</code>方法，直到遇到false或没有下一个拦截器为止。</p></li><li><p>若<strong>拦截器全部放行</strong>则执行控制器的处理方法。</p></li><li><p>若<strong>处理方法顺利执行</strong>，在响应前，按照<strong>逆序</strong>执行<code>postHandle</code>方法。</p></li><li><p>在响应结束后，按照<strong>逆序执行所有已放行的</strong><code>afterCompletion</code>方法。</p></li></ol><p><strong>正常执行顺序：</strong></p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/%E6%AD%A3%E5%B8%B8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="正常执行顺序"></p><p><strong>若有拦截器未放行：</strong></p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/%E6%9C%AA%E6%94%BE%E8%A1%8C%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="未放行执行顺序"></p><h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h3><p>​    保持上述演示中的<code>FirstInterceptor</code>、控制器不变</p><p><code>SecondInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承HandlerInterceptorAdapter类实现拦截器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;SecondInterceptor----preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SecondInterceptor----postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SecondInterceptor----afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在此标签下配置所有的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式： 以bean标签配置默认拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式： 在mvc:interceptor标签下配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截的请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.interceptor.SecondInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>FirstInterceptor—-preHandle<br>SecondInterceptor—-preHandle<br>处理请求….<br>SecondInterceptor—-postHandle<br>FirstInterceptor—-postHandle<br>跳转到页面<br>SecondInterceptor—-afterCompletion<br>FirstInterceptor—-afterCompletion</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;拦截器概述&quot;&gt;&lt;a href=&quot;#拦截器概述&quot; class=&quot;headerlink&quot; title=&quot;拦截器概述&quot;&gt;&lt;/a&gt;拦截器概述&lt;/h2&gt;&lt;p&gt;​    拦截器由SpringMVC所提供，用于在处理请求的方法执行前后进行操作。它与处理方法的关系类似于Filter与Servlet的关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之视图解析</title>
    <link href="http://yoursite.com/2020/09/29/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/09/29/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/</id>
    <published>2020-09-29T04:18:32.000Z</published>
    <updated>2020-10-28T03:29:47.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回顾与补充"><a href="#回顾与补充" class="headerlink" title="回顾与补充"></a>回顾与补充</h2><p>​    在之前的演示当中在处理方法中以String类型作为返回值即可以转发的方式实现页面的跳转，可是要如何携带数据到目标页面，又如何以重定向的方式进行跳转呢？</p><a id="more"></a><h3 id="1-传递数据"><a href="#1-传递数据" class="headerlink" title="1.传递数据"></a>1.传递数据</h3><p>​    在之前的servlet中跳转的页面之间传递参数使用的是域对象，而在SpringMCV中也是这一方式。</p><ul><li><p><strong>方式一：</strong></p><p>前面提到过，SpringMVC是可以获取到Servlet中的原生API的，可以通过原生API实现数据的传递。</p></li><li><p><strong>方式二：</strong></p><p>​    SpringMVC在调用处理方法前会<strong>建一个隐含的模型对象作为模型数据的存储容器</strong>，在方法的参数中有为 <code>org.springframework.ui.Model</code>、<code>org.springframework.ui.ModelMap</code> 或<code>java.uti.Map</code>的类型时会将这个存储容器传入这个参数中，通过这个参数添加的数据<strong>会保存并最终同步到request域中</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userPost</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ZhangSan&quot;</span>);<span class="comment">//这个信息会同步到request域</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实际上，无论是这三个类型中的哪一个都为同一个隐含的模型对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userPost</span><span class="params">(Map map,Model model,ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(map==model);<span class="comment">//true</span></span><br><span class="line">        System.out.println(model==modelMap);<span class="comment">//ture</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//实际的类型为隐含模型对象的类型</span></span><br><span class="line">        System.out.println(map.getClass());</span><br><span class="line">        <span class="comment">//org.springframework.validation.support.BindingAwareModelMap</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>既然上述的类型可以转换，他们之间应该是存在继承关系的：</strong></p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B%E7%BB%A7%E6%89%BF.png" alt="参数模型继承"></p></li></ul><h3 id="2-转发与重定向"><a href="#2-转发与重定向" class="headerlink" title="2.转发与重定向"></a>2.转发与重定向</h3><p>​    想要规定跳转时的类型，只需要在返回的字符串前缀加上表示转发的<code>forward:</code>以及表示重定向的<code>redirect:</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userPost</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以重定向的方式跳转页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-直接跳转页面"><a href="#3-直接跳转页面" class="headerlink" title="3.直接跳转页面"></a>3.直接跳转页面</h3><p>​    如果我们希望当请求Servlet时直接跳转页面，可以不需要经过控制器，直接在前端控制器的配置文件中使用<code>&lt;mvc:view-controller&gt;</code>标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接跳转页面，path为请求路径，view-name为视图名，相当于处理方法中的返回值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启SpringMVC的注解驱动模式，若配置 mvc:view-controller不开启则会导致其他控制器失效  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><h3 id="1-ModelAndView"><a href="#1-ModelAndView" class="headerlink" title="1.ModelAndView"></a>1.ModelAndView</h3><p>​    在处理方法响应后得到的两个<strong>最关键</strong>的参数，存放数据的模型对象和<strong>“跳转路径”(前面演示中的字符串类型的返回值)**。这个</strong>“跳转路径”我们称之为逻辑视图名<strong>，它的最终</strong>目的是得到一个视图(View)对象<strong>，这个对象的作用是</strong>将模型里的数据以某种形式呈现给客户,主要就是完成转发或者是重定向的操作。**SpringMVC会将返回值及数据模型对象封装为<code>ModelAndView</code>对象，它既包含视图信息，也包含模型数据信息。</p><p>​    所以，处理方法返回值的类型除了字符串类型外还可以是<code>View</code>和<code>ModelAndView</code>类型。当然，和上面提到的一样无论返回值是什么类型，SpringMVC都会将其封装为<code>ModelAndView</code>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为String</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user1</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ZhangSan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为ModelAndView</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">User2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ZhangSan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-视图解析器"><a href="#2-视图解析器" class="headerlink" title="2.视图解析器"></a>2.视图解析器</h3><p>​    上述的视图对象实际由视图解析器负责实例化（将视图名转化为真正的视图对象），<strong>每一种视图对应着一种视图类，同时也对应着一个视图解析器。</strong></p><p><strong>视图解析过程大致有以下步骤(源码总结)：</strong></p><ul><li><p>获取IoC容器中的视图解析器列表，如果没有配置则使用默认的视图解析器（<code>InternalResourceViewResolver</code>）。</p></li><li><p>判断是否已经存在View对象，若存在则返回这个对象，不存在则根据视图名创建一个View对象</p></li><li><p>尝试根据视图名顺序使用视图解析器创建View对象，若创建成功则返回View对象，若不超过则返回null并调用下一个视图解析器。</p><ul><li>以<code>InternalResourceViewResolver</code>为例</li><li>首先判断视图名的前缀是否为<code>forward:</code>以及<code>redirect:</code>，如果是则创建不同的View对象，如果不是则调用父类方法以默认方式创建，拼接路径前后缀会在这一步执行。</li></ul></li><li><p>获取到View对象后调用它的render方法，这个方法会将数据模型中的数据循环取出放到request域中，并获取完整的跳转路径以及转发器对象进行页面的跳转，这个过程我们称之为页面的渲染。</p></li></ul><p>总结这个过程就是，<strong>视图解析器负责产生视图对象，而视图对象负责渲染页面。</strong></p><p><strong>常用的视图实现类：</strong></p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/%E5%B8%B8%E7%94%A8%E8%A7%86%E5%9B%BE.png" alt="常用视图"></p><p><strong>常用的视图解析器实现类：</strong></p><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90/%E5%B8%B8%E7%94%A8%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.png" alt="常用视图解析器"></p><p>​    <strong>每个视图解析器都实现了 Ordered 接口并开放出一个 order 属性，可以通过 order 属性指定解析器的优先顺序，order  越小优先级越高。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回顾与补充&quot;&gt;&lt;a href=&quot;#回顾与补充&quot; class=&quot;headerlink&quot; title=&quot;回顾与补充&quot;&gt;&lt;/a&gt;回顾与补充&lt;/h2&gt;&lt;p&gt;​    在之前的演示当中在处理方法中以String类型作为返回值即可以转发的方式实现页面的跳转，可是要如何携带数据到目标页面，又如何以重定向的方式进行跳转呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之处理请求数据</title>
    <link href="http://yoursite.com/2020/09/28/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2020/09/28/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</id>
    <published>2020-09-28T12:48:15.000Z</published>
    <updated>2020-10-22T08:46:37.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    SpringMVC会分析控制层中的处理方法进行参数的匹配并传入，你可以根据自己的需要编写参数列表获取想要的参数，SpringMVC为此提供了许多参数注解。</p><a id="more"></a><h2 id="1-获取请求参数"><a href="#1-获取请求参数" class="headerlink" title="1.获取请求参数"></a>1.获取请求参数</h2><ul><li><p>方式一：在参数列表使用与请求参数同名的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方式一，自动匹配请求中的username参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(String username)</span> </span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">&quot;username：&quot;</span>+username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求没有这个参数时，变量值为null。</p></li><li><p>方式二：使用<code>@RequestParam</code>注解绑定一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式二，匹配username参数并传入到name中</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span>String name)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;username：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@RequestMapping注解有三个属性：</strong></p><ul><li><p>value：参数名</p></li><li><p>required：是否必须。默认为 true, 表示请求参数中必须包含对应的参数，若不存在，将抛出异常</p></li><li><p>defaultValue: 默认值，当没有传递参数时使用该值</p></li></ul></li></ul><h2 id="2-获取请求头参数"><a href="#2-获取请求头参数" class="headerlink" title="2.获取请求头参数"></a>2.获取请求头参数</h2><p>​    使用<code>@RequestHeader</code>注解，与<code>@RequestParam</code>的使用方法以及属性含义均一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取请求头中的Host参数并传入到host中</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@RequestHeader(&quot;Host&quot;)</span>String host)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Host：&quot;</span>+host);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-获取Cookie值"><a href="#3-获取Cookie值" class="headerlink" title="3.获取Cookie值"></a>3.获取Cookie值</h2><p>使用<code>@CookieValue</code>注解，与<code>@RequestParam</code>的使用方法以及属性含义均一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Cookie的JSESSIONID</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span>String id)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;JSESSIONID：&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-获取Servlet原生API对象"><a href="#4-获取Servlet原生API对象" class="headerlink" title="4.获取Servlet原生API对象"></a>4.获取Servlet原生API对象</h2><p>​    直接在参数列表定义Servlet原生API的参数即可获取它的对象，SpringMVC支持一下三个类型：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul><p>以及从这三个对象独立出来的以下对象：</p><ul><li>java.security.Principal</li><li>Locale</li><li>InputStream</li><li>OutputStream</li><li>Reader</li><li>Writer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Request和Response</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(HttpServletRequest req,HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        System.out.println(req+<span class="string">&quot;/&quot;</span>+resp);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-将请求参数自动封装为对象"><a href="#5-将请求参数自动封装为对象" class="headerlink" title="5.将请求参数自动封装为对象"></a>5.将请求参数自动封装为对象</h2><p>​    除了上面的获取参数的功能外，springMVC中最方便的功能就是可以<strong>自动将请求参数根据java类中的成员变量名进行一一对应赋值并封装成对象作为参数传入</strong>，并且这个功能还能够给二级参数进行赋值，我们只需要在参数列表中写上这个java类的参数即可。</p><p><strong>例如创建一个User类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//包含一个Department类</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [name=&quot;</span> + name + <span class="string">&quot;, id=&quot;</span> + id + <span class="string">&quot;, department=&quot;</span> + department + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Department.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String did;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDid</span><span class="params">(String did)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Department [dname=&quot;</span> + dname + <span class="string">&quot;, did=&quot;</span> + did + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在控制层中的处理方法中以User作为参数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;    </span><br><span class="line">    <span class="comment">//获取Request和Response</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userPost</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>index.jsp：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        id:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为二级参数的属性赋值 --&gt;</span></span><br><span class="line">        dname:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;department.dname&quot;</span>&gt;</span></span><br><span class="line">        did:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;department.did&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试User封装参数&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>随便传入一些值，可以看到已经为我们封装成了对象</p><p>User [name=zhangsan, id=123, department=Department [dname=ruanjianbu, did=1001]]</p></blockquote><h2 id="处理中文乱码问题"><a href="#处理中文乱码问题" class="headerlink" title="处理中文乱码问题"></a>处理中文乱码问题</h2><p>​    在上面的测试中，可能发现，如果传入的是中文则可能会出现乱码的问题。以往处理请求出现的乱码，一般是在第一次获取参数前通过<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>的形式解决这个问题，SpringMVC基于这个方式为我们提供了一个过滤器<code>CharacterEncodingFilter</code>。</p><p>在web.xml配置它：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符编码filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">           org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否对响应的字符集也进行处理  默认为false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意的是，一定要保证<code>CharacterEncodingFilter</code>在其他filter前，因为若其他过滤器获取过参数，改变编码则不会生效。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    SpringMVC会分析控制层中的处理方法进行参数的匹配并传入，你可以根据自己的需要编写参数列表获取想要的参数，SpringMVC为此提供了许多参数注解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之REST风格的实现</title>
    <link href="http://yoursite.com/2020/09/27/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BREST%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/09/27/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BREST%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-09-27T11:48:15.000Z</published>
    <updated>2020-10-22T07:23:33.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是REST"><a href="#什么是REST" class="headerlink" title="什么是REST"></a>什么是REST</h2><p>​    REST全称为Representational State Transfer，<strong>表现层状态转化</strong>。它认为每次请求的目的都是获取或操作资源，所有在设计URL时应该与资源是一一对应的，对资源的操作应该通过同一资源的不同状态来完成。</p><a id="more"></a><p><strong>以对user的增删改查为例：</strong></p><p>非REST风格的URL下可能是这样设计：</p><ul><li>增加：/addUser</li><li>删除：/deleteUser？id=xxx</li><li>修改：/updateUser？id=xxx</li><li>查询：/selectUser？id=xxx</li></ul><p>而在REST风格：</p><p>​    在URL不变的情况下，通过不同的请求方式来区别</p><ul><li>增加：/user  以POST方式请求</li><li>删除：/user/id  以DELETE方式请求</li><li>修改：/user/id  以PUT方式请求</li><li>查询：/user/id  以GET方式请求</li></ul><p>上面仅仅是对REST风格的最基本讲解，完整详细的了解REST可以参考：<a href="http://kb.cnblogs.com/page/186516/">http://kb.cnblogs.com/page/186516/</a> </p><h2 id="REST风格URL在SpringMVC中的实现"><a href="#REST风格URL在SpringMVC中的实现" class="headerlink" title="REST风格URL在SpringMVC中的实现"></a>REST风格URL在SpringMVC中的实现</h2><p>以上述举例的User为例：</p><h3 id="1-控制层的实现"><a href="#1-控制层的实现" class="headerlink" title="1.控制层的实现"></a>1.控制层的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加：/user  以POST方式请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/user&quot;,method=RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;addUser..&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除：/user/id  以DELETE方式请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/user/&#123;id&#125;&quot;,method=RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteUser..&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改：/user/id  以PUT方式请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/user/&#123;id&#125;&quot;,method=RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;addUser..&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询：/user/id  以GET方式请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/user/&#123;id&#125;&quot;,method=RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;addUser..&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-请求实现"><a href="#2-请求实现" class="headerlink" title="2.请求实现"></a>2.请求实现</h3><p>​     在http请求时，只有GET和POST两种方式，如何实现以PUT和DELETE方式发送请求呢？</p><p>SpringMVC为我们提供了一个过滤器<code>HiddenHttpMethodFilter</code>,请求经过这个过滤器后会将POST请求根据请求信息中的_method进行修改。这样就实现了DELETE和PUT的请求方式。</p><ul><li><p>首先在web.xml中配置<code>HiddenHttpMethodFilter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springMVC01<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">           org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 转换请求方式的过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让这个过滤器过滤所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>请求演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;增加用户&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 以POST方式请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/123&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过_method 携带请求方式的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除用户&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/123&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新用户&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/123&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询用户&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="HiddenHttpMethodFilter分析"><a href="#HiddenHttpMethodFilter分析" class="headerlink" title="HiddenHttpMethodFilter分析"></a>HiddenHttpMethodFilter分析</h2><p>简单讲解一下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenHttpMethodFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将_method赋值给了其他变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_METHOD_PARAM = <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodParam = DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the parameter name to look for HTTP methods.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #DEFAULT_METHOD_PARAM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodParam</span><span class="params">(String methodParam)</span> </span>&#123;</span><br><span class="line">        Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.methodParam = methodParam;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取_method的值</span></span><br><span class="line">        String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">        <span class="comment">//判断是否为POST请求且有_method有值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            <span class="comment">//将_method的值转为大写，因为这个语句所以提交时大小写都支持</span></span><br><span class="line">            String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="comment">//根据这个 _method的值去新建Request对象进行替换</span></span><br><span class="line">            HttpServletRequest wrapper = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">            filterChain.doFilter(wrapper, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不是上面的情况直接放行</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面就是HiddenHttpMethodFilter对请求方式修改的全过程</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是REST&quot;&gt;&lt;a href=&quot;#什么是REST&quot; class=&quot;headerlink&quot; title=&quot;什么是REST&quot;&gt;&lt;/a&gt;什么是REST&lt;/h2&gt;&lt;p&gt;​    REST全称为Representational State Transfer，&lt;strong&gt;表现层状态转化&lt;/strong&gt;。它认为每次请求的目的都是获取或操作资源，所有在设计URL时应该与资源是一一对应的，对资源的操作应该通过同一资源的不同状态来完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之RequestMapping详解</title>
    <link href="http://yoursite.com/2020/09/26/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BRequestMapping%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/09/26/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BRequestMapping%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-26T10:16:25.000Z</published>
    <updated>2020-10-21T12:41:50.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    <code>@RequestMapping</code>的功能为指定控制器可以处理的URL，在HelloWorld中只演示了它的最基本的使用。实际上它还可以进行更详细的配置。</p><a id="more"></a><h2 id="RequestMapping的使用位置"><a href="#RequestMapping的使用位置" class="headerlink" title="RequestMapping的使用位置"></a>RequestMapping的使用位置</h2><h3 id="1-使用在方法上"><a href="#1-使用在方法上" class="headerlink" title="1.使用在方法上"></a>1.使用在方法上</h3><p>​    使用在方法上时就如之前演示的是指定控制器可以处理的URL。</p><h3 id="2-使用在类上"><a href="#2-使用在类上" class="headerlink" title="2.使用在类上"></a>2.使用在类上</h3><p>​    使用在类上时，效果为指定该类中的方法指定的URL全部基于这个路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//在类上使用，指定的URL请求全部基于类上的路径,默认为项目路径下</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/index/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestMapping的属性"><a href="#RequestMapping的属性" class="headerlink" title="RequestMapping的属性"></a>RequestMapping的属性</h2><p>​    value属性为URL路径，不单独讲解</p><h3 id="1-method"><a href="#1-method" class="headerlink" title="1.method"></a>1.method</h3><p>​    用于指定能够处理的请求方式，<code>RequestMapping</code>提供了一个枚举类<code>RequestMethod</code>包含了所有请求类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/hello的Post请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-params"><a href="#2-params" class="headerlink" title="2.params"></a>2.params</h3><p>​    用于指定能够处理的请求的参数要求，它是一个数组，可以包含多个条件，并且可以使用简单的表达式。</p><ul><li><p><strong>“param”形式</strong></p><p>只能处理<strong>带有</strong>param参数的请求。</p></li><li><p><strong>“！param”形式</strong></p><p>只能处理<strong>不带有</strong>param参数的请求。</p></li><li><p><strong>“param=xxx”形式</strong></p><p>只能处理param<strong>参数为xxx值</strong>的请求。</p></li><li><p><strong>“param！=xxx”形式</strong></p><p>只能处理param<strong>参数不为xxx值</strong>的请求。</p><p>注意，当参数为空时默认为空串，不带参数时默认为null，这两种情况均可处理。</p></li></ul><p><strong>当然 以上形式可以混合使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/hello的</span></span><br><span class="line">    <span class="comment">//username不等于zhangsan且password等于123的请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello&quot;,params= &#123;&quot;username!=zhangsan&quot;,&quot;password=123&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-headers"><a href="#3-headers" class="headerlink" title="3.headers"></a>3.headers</h3><p>​    用于指定能够处理的请求的请求头要求，他也为一个数组，使用方式与params一致。</p><h3 id="4-consumes"><a href="#4-consumes" class="headerlink" title="4.consumes"></a>4.consumes</h3><p>​    用于指定能够处理的请求的Content-Type类型要求</p><h3 id="5-produces"><a href="#5-produces" class="headerlink" title="5.produces"></a>5.produces</h3><p>​    指定响应头中Content-Type的类型</p><h2 id="Ant-路径风格"><a href="#Ant-路径风格" class="headerlink" title="Ant 路径风格"></a>Ant 路径风格</h2><p>​    RequestMapping支持Ant 路径风格，用它可以实现URL的模糊匹配功能。它有以下三种模糊匹配形式</p><ul><li><p>？</p><p><code>?</code>为单个字符的占位符，例如：0？可以表示任意0开头的任意两个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/以hello为前缀的任意6位地址</span></span><br><span class="line">    <span class="comment">//例如 hello1、hello2、helloa等等 但不能为：hello、hello12等</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>*</p><p><code>*</code>为任意个字符占位符,但它只能在这一级地址生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/以hello为前缀的任意位地址</span></span><br><span class="line">    <span class="comment">//例如 hello1、helloabcd、hello等等 但不能为 hello/a hello1/ab/a等等</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello*&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**</p><p><code>**</code>表示多层路径匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时，可以处理的URL为http://localhost:8080/springMVC01/以hello为前缀的任意位地址</span></span><br><span class="line">    <span class="comment">//例如 hello/a、hello/a/b/c、hello/abc/d等等 </span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello/**&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h2><p>​    在指定URL时可以通过<code>&#123;变量名&#125;</code>来替换这个地址的位置，在通过方法中<code>@PathVariable</code>注解来获取这个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当请求地址为http://localhost:8080/springMVC01/abc时username的值就为abc</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span>String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    &lt;code&gt;@RequestMapping&lt;/code&gt;的功能为指定控制器可以处理的URL，在HelloWorld中只演示了它的最基本的使用。实际上它还可以进行更详细的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门之HelloWorld</title>
    <link href="http://yoursite.com/2020/09/25/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/"/>
    <id>http://yoursite.com/2020/09/25/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/</id>
    <published>2020-09-25T09:16:25.000Z</published>
    <updated>2020-10-21T08:54:01.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><p>​    简单来说，SpringMVC就是一个Spring提供的MVC框架，它通过<code>DispatcherServlet</code>这个组件处理所有的求情和响应。基于这个<code>DispatcherServlet</code>可以使一个普通的java类在不需要任何继承的情况下实现servlet的功能。</p><p>SpringMVC基于以下jar包：</p><ul><li><p>Spring核心jar包</p></li><li><p>spring-web-RELEASE.jar</p></li><li><p>spring-webmvc-RELEASE.jar</p></li></ul><a id="more"></a><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>​    首先需要创建Web工程，引入相关jar包。以下演示基于2.5版本的xml文件配置的形式。</p><h3 id="1-配置DispatcherServlet"><a href="#1-配置DispatcherServlet" class="headerlink" title="1.配置DispatcherServlet"></a>1.配置DispatcherServlet</h3><p><code>DispatcherServlet</code>也叫做前端控制器，本质也是一个servlet，使用配置servlet的方式去配置它，需要注意的是它不需要创建一个名为<code>DispatcherServlet</code>的类，而是通过另一个xml文件去作为它的配置。</p><p><strong>web.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- DispatcherServlet的完整路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定配置DispatcherServlet的xml文件路径 ，省略则使用默认路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/springMVC-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet加载优先级设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置需要拦截的请求类型，默认为/ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是<strong>若没有指定配置DispatcherServlet的xml文件路径</strong>，则默认为WEB-INF下名为<code>&lt;servlet-name&gt;-servlet.xml</code>，上述演示的配置就为默认路径，可将<code>init-param</code>元素省略。</p><p><strong>springMVC-servlet.xml：</strong></p><p>​    springMVC-servlet.xml创建为Spring Bean的配置文件，在这个文件中配置前端控制器的信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建一个java类作为响应组件"><a href="#2-创建一个java类作为响应组件" class="headerlink" title="2.创建一个java类作为响应组件"></a>2.创建一个java类作为响应组件</h3><p>在com.ykailh.test包下创建HelloServletTest.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记这个类为控制层组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过RequestMapping注解将类中的方法作为响应请求的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//与请求的绑定关系与方法名无关，返回值类型为需要转发到的资源路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//响应后转发到/WEB-INF/views/a.jsp下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/a.jsp&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p><strong>index.jsp：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>测试SpringMVC<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>/WEB-INF/views/a.jsp：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>a页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><p>​    在演示中响应转发的方式为以字符串的形式返回资源路径，当一个类中有大量的转发需要到<strong>同一路径下</strong>时，可以使用视图解析器来<strong>提取资源路径的公共部分</strong>。</p><p>​    例如，在HelloServletTest类中有大量转发到/WEB-INF/views下的转发响应:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记这个类为控制层组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过RequestMapping注解将类中的方法作为响应请求的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/helloa&quot;)</span></span><br><span class="line">    <span class="comment">//与请求的绑定关系与方法名无关，返回值类型为需要转发到的资源路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//响应后转发到/WEB-INF/views/a.jsp下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/a.jsp&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hellob&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hellob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/b.jsp&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/helloc&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/views/c.jsp&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以在前端控制器的xml文件中配置一个视图解析器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 以配置bean的方式配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- prefix为拼接的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- suffix为拼接的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，响应返回的字符串会<strong>经过视图解析器拼接上前后缀形成完整的资源路径</strong>后再进行转发，所以此时的返回值可以简写：</p><p><strong>HelloServletTest.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记这个类为控制层组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServletTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过RequestMapping注解将类中的方法作为响应请求的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/helloa&quot;)</span></span><br><span class="line">    <span class="comment">//与请求的绑定关系与方法名无关，返回值类型为需要转发到的资源路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//响应后转发到/WEB-INF/views/a.jsp下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span> ;</span><br><span class="line">    <span class="comment">//使用视图解析器后只需要返回b即可访问/WEB-INF/views/b.jsp</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hellob&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hellob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/helloc&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;c&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问流程总结"><a href="#访问流程总结" class="headerlink" title="访问流程总结"></a>访问流程总结</h2><p>经过上述的配置后，当客户端有请求时会：</p><ol><li><p>被前端处理器拦截</p></li><li><p>拦截后在配置了@Controller注解中的类中的@RequestMapping方法寻找对应的响应方法。</p></li><li><p>响应方法对请求进行处理，在最后返回一个代表转发到的资源路径的字符串</p></li><li><p>返回的字符串经过视图解析器拼接成为完整的资源路径</p></li><li><p>根据这个资源路径进行跳转</p></li></ol><p><img src="/image/SpringMVC%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld/%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png" alt="请求流程"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是SpringMVC&quot;&gt;&lt;a href=&quot;#什么是SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;什么是SpringMVC&quot;&gt;&lt;/a&gt;什么是SpringMVC&lt;/h2&gt;&lt;p&gt;​    简单来说，SpringMVC就是一个Spring提供的MVC框架，它通过&lt;code&gt;DispatcherServlet&lt;/code&gt;这个组件处理所有的求情和响应。基于这个&lt;code&gt;DispatcherServlet&lt;/code&gt;可以使一个普通的java类在不需要任何继承的情况下实现servlet的功能。&lt;/p&gt;
&lt;p&gt;SpringMVC基于以下jar包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring核心jar包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring-web-RELEASE.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring-webmvc-RELEASE.jar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/categories/SpringMVC/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="SpringMVC入门" scheme="http://yoursite.com/tags/SpringMVC%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门之AOP</title>
    <link href="http://yoursite.com/2020/09/24/Spring%E5%85%A5%E9%97%A8%E4%B9%8BAOP/"/>
    <id>http://yoursite.com/2020/09/24/Spring%E5%85%A5%E9%97%A8%E4%B9%8BAOP/</id>
    <published>2020-09-24T07:36:41.000Z</published>
    <updated>2020-10-14T01:46:07.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h2><h3 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="1.什么是AOP"></a>1.什么是AOP</h3><p>​    Spring 框架的一个关键组件是<strong>面向方面的编程</strong>(AOP)框架。面向方面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>​    <strong>简单来说就是抽取公共功能，将分离非业务代码。</strong></p><a id="more"></a><h3 id="2-AOP的相关概念"><a href="#2-AOP的相关概念" class="headerlink" title="2.AOP的相关概念"></a>2.AOP的相关概念</h3><ul><li><p><strong>横切关注点</strong></p><p>​    从每个方法中抽取出来的同一类<strong>非核心业务</strong>。</p></li><li><p><strong>切面(Aspect)</strong></p><p>​    封装横切关注点信息的类。</p></li><li><p><strong>通知(Advice)</strong></p><p>​    切面必须要完成的各个具体工作</p></li><li><p><strong>目标(Target)</strong></p><p>​    被通知的对象</p></li><li><p><strong>代理(Proxy）</strong></p><p>​    向目标对象应用通知之后创建的代理对象</p></li><li><p><strong>连接点(Join point)</strong></p><p>​    横切关注点在程序代码中的具体体现，对应程序执行的某个特定位置。例如：类某个方法调用前、调用后、方法捕获到异常后等。</p></li><li><p><strong>切入点(pointcut)</strong></p><p>​    定位连接点的方式。每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物。如果把连接点看作数据库中的记录，那么切入点就是查询条件——AOP可以通过切入点定位到特定的连接点。切点通过<code>org.springframework.aop.Pointcut 接口</code>进行描述，它使用类和方法作为连接点的查询条件。</p></li></ul><h2 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h2><h3 id="1-演示用例-使用AOP之前"><a href="#1-演示用例-使用AOP之前" class="headerlink" title="1.演示用例(使用AOP之前)"></a>1.演示用例(使用AOP之前)</h3><p>实现计算器的整数加减乘除功能，首先创建一个接口<code>Math.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及它的实现类<code>MathImpl.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathImpl</span> <span class="keyword">implements</span> <span class="title">Math</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志：调用了add方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a - b;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志：调用了sub方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a * b;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志：调用了mul方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a / b;</span><br><span class="line">        System.out.println(<span class="string">&quot;日志：调用了div方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-基于xml文件实现AOP步骤"><a href="#2-基于xml文件实现AOP步骤" class="headerlink" title="2.基于xml文件实现AOP步骤"></a>2.基于xml文件实现AOP步骤</h3><ul><li><p><strong>第一步：导入jar包</strong></p><p>除核心jar包外AOP的实现还依赖于<code>spring-aop</code>和<code>spring-aspects</code>两个jar包，以及AspectJ相关jar包。</p><blockquote><p>AspectJ：Java社区里最完整最流行的AOP框架。是AOP的具体实现。</p><p>所需的三个jar包：</p><p>com.springsource.net.sf.cglib-2.2.0.jar</p><p>com.springsource.org.aopalliance-1.0.0.jar</p><p>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar </p></blockquote></li><li><p><strong>第二步：创建切面类、并创建通知方法</strong></p><p>将需要抽取出的非核心业务（横切关注点）抽取到一个类当中，这个类就是所谓的切面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    <span class="comment">//作为通知方法（和一般的方法没有区别）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>第三步：将目标类与切面类交由Spring容器管理。</strong></p><p>Spring中AOP的实现依赖于IoC。</p></li><li><p><strong>第四步：在xml中配置AOP。</strong></p><p>需要导入aop命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 扫描bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.aop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 在aop：config中配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置重用切入点 expression属性为切入点表达式，它的作用是指向需要通知的目标，后面会详细说明 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=<span class="string">&quot;execution(* com.ykailh.aop.*.*(..))&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;mathPointcut&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 指定mathAspects为切面并在切面中配置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;mathAspects&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置前置通知的方法及切入点, 共有五种通知类型，后面会详细说明--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mathPointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>完成配置，测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IoC容器</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;aop.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取MathImpl对象，切记类型为其接口类型</span></span><br><span class="line">        Math math = ac.getBean(<span class="string">&quot;mathImpl&quot;</span>,Math.class);</span><br><span class="line">        <span class="comment">//调用方法，测试效果</span></span><br><span class="line">        math.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>before()方法被调用<br>日志：调用了add方法</p></blockquote><p>后续可将日志功能用aop实现。</p></li></ul><h3 id="3-基于注解实现AOP"><a href="#3-基于注解实现AOP" class="headerlink" title="3.基于注解实现AOP"></a>3.基于注解实现AOP</h3><p>​    <strong>前三步与上述一致</strong></p><ul><li><p><strong>第四步：在切面以及切面需要设置通知的方法上加上相应的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//标记为前置通知，注解的value值为切入点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.ykailh.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before()方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>第五步：在xml文件中配置自动扫描aop注解</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 扫描bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.aop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描aop相关注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="相关概念详解"><a href="#相关概念详解" class="headerlink" title="相关概念详解"></a>相关概念详解</h2><p>以下演示和讲解使用aspectj的注解方式。</p><h3 id="1-切入点表达式"><a href="#1-切入点表达式" class="headerlink" title="1.切入点表达式"></a>1.切入点表达式</h3><p>​        <strong>格式：</strong><code>execution([权限修饰符] [返回值类型] [简单类名/全类名] [方法名]([参数列表]))</code></p><p>​        <strong>例如：</strong><code>execution(public int com.ykailh.aop.MathImpl.add(int, int))</code> 指向add方法。</p><p><strong>其中可以使用<code>*</code>表示任意类型，注意 访问修饰符和返回值类型视作一个整体，参数列表使用<code>..</code>表示任意参数。</strong></p><p>​        <strong>例如：</strong><code>execution(* com.ykailh.aop.*.*(..))</code>指向aop包下所有类的所有方法。</p><h3 id="2-Joinpoint参数"><a href="#2-Joinpoint参数" class="headerlink" title="2.Joinpoint参数"></a>2.Joinpoint参数</h3><p>​    <strong>在通知的参数列表中可以传入一个JoinPoint参数，它封装了所指向连接点的信息。</strong></p><blockquote><p>由org.aspectj.lang.JoinPoint包提供，常用方法有：</p><p>java.lang.Object[] getArgs()：获取连接点方法运行时的入参列表；<br>Signature getSignature() ：获取连接点的方法签名对象；<br>java.lang.Object getTarget() ：获取连接点所在的目标对象；<br>java.lang.Object getThis() ：获取代理对象本身； </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//标记为前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.ykailh.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过JoinPoint对象获取连接点信息</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">//获取参数列表</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();<span class="comment">//获取方法名</span></span><br><span class="line">            </span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;前置通知：执行方法：&quot;</span>+ methodName +<span class="string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试运行结果：</p><blockquote><p>调用add（1,2）</p><p>输出：</p><p>前置通知：执行方法：add参数列表：[1, 2]<br>日志：调用了add方法</p></blockquote><h3 id="3-通知类型"><a href="#3-通知类型" class="headerlink" title="3.通知类型"></a>3.通知类型</h3><ul><li><p><strong>前置通知：</strong></p><p>在方法执行之前执行的通知，使用<code>@Before</code>注解。</p></li><li><p><strong>后置通知:</strong></p><p>后置通知是在连接点完成之后执行的，即连接点返回结果或者抛出异常的时候，使用<code>@After</code>注解。</p></li><li><p><strong>返回通知：</strong></p><p>区别于后置通知，返回通知只在返回结果时执行，使用<code>@AfterReturning</code>注解。</p><p><code>@AfterReturning</code>可以在属性中设置returning属性，在该方法的形参列表中定义一个同名的形参接受返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//标记为返回通知，返回值赋值给为形参result</span></span><br><span class="line">    <span class="meta">@AfterReturning(value=&quot;execution(* com.ykailh.aop.*.*(..))&quot;,returning=&quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning()方法被执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值为：&quot;</span>+ result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试运行结果：</strong></p><blockquote><p>日志：调用了add方法<br>afterReturning()方法被调用<br>返回值为：3</p></blockquote></li><li><p><strong>异常通知：</strong></p><p>只在连接点抛出异常时才执行异常通知，使用<code>@AfterThrowing</code>注解。</p><p><code>@AfterThrowing</code>可以在属性中设置throwing属性，在该方法的形参列表中定义一个同名的形参接受异常，如果不为形参定义的异常类型或其子类则不会接受。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//标记为异常通知，异常类型赋值给形参e</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value=&quot;execution(* com.ykailh.aop.*.*(..))&quot;,throwing=&quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing()方法被执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常类型：&quot;</span>+ e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>环绕通知：</strong></p><p>​    环绕通知是所有通知类型中<strong>功能最为强大的</strong>，能够<strong>全面地控制连接点</strong>，使用<code>@Around</code>注解，它可以实现以上的四种通知。</p><p>​    对于环绕通知来说，连接点的参数类型必须是<code>ProceedingJoinPoint</code>。它是 <code>JoinPoint</code>的子接口，允许控制何时执行，是否执行连接点。</p><p>在使用时需要注意以下两点：</p><ul><li><p>在环绕通知中<strong>需要明确调用ProceedingJoinPoint的proceed()方法来执行被代理的方法</strong>。如果忘记这样做就会导致通知被执行了，但目标方法没有被执行。</p></li><li><p>环绕通知的方法<strong>需要返回目标方法执行之后的结果</strong>，即调用 joinPoint.proceed();的返回值，否则会出现空指针异常。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.ykailh.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用环绕通知，现在不同的位置就相当于不同的通知类型</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//前置通知的执行位置</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知中的前置通知&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> result = (<span class="keyword">int</span>) joinPoint.proceed();</span><br><span class="line">            <span class="comment">//返回通知的执行位置</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知中的返回通知&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//异常通知执行位置</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知中的异常通知&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知中的后置通知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为演示类使用了int所以无法返回null，开发中请使用包装类替代基本数据类型</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试运行结果：</strong></p><blockquote><p>调用add(1,2)</p><p>输出：</p><p>环绕通知中的前置通知<br>日志：调用了add方法<br>环绕通知中的返回通知<br>环绕通知中的后置通知</p><p>调用div(1,0)</p><p>输出：</p><p>环绕通知中的前置通知<br>环绕通知中的异常通知<br>环绕通知中的后置通知</p></blockquote></li></ul><h3 id="4-定义重用切入点"><a href="#4-定义重用切入点" class="headerlink" title="4.定义重用切入点"></a>4.定义重用切入点</h3><p>​    可以在方法上使用<code>@Pointcut</code>注解定义重用切入点，在后面需要使用时切入点表达式时可以直接指定该方法，使用他的切入点表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义重用切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.ykailh.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ponitcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用重用切入点</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-切面优先级"><a href="#5-切面优先级" class="headerlink" title="5.切面优先级"></a>5.切面优先级</h3><p>​    在有多个切面同时作用与一个切入点时可以通过<code>@Order</code>注解定义它们的优先级。他的value值需要为正整数，数值越小优先级越高，0的优先级最高，负数与0的效果一致， 默认值为int的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="meta">@Order(1)</span><span class="comment">//定义优先级为1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathAspects</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP简介&quot;&gt;&lt;a href=&quot;#AOP简介&quot; class=&quot;headerlink&quot; title=&quot;AOP简介&quot;&gt;&lt;/a&gt;AOP简介&lt;/h2&gt;&lt;h3 id=&quot;1-什么是AOP&quot;&gt;&lt;a href=&quot;#1-什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;1.什么是AOP&quot;&gt;&lt;/a&gt;1.什么是AOP&lt;/h3&gt;&lt;p&gt;​    Spring 框架的一个关键组件是&lt;strong&gt;面向方面的编程&lt;/strong&gt;(AOP)框架。面向方面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为&lt;strong&gt;横切关注点&lt;/strong&gt;，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;简单来说就是抽取公共功能，将分离非业务代码。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring入门" scheme="http://yoursite.com/tags/Spring%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门之基于注解的配置</title>
    <link href="http://yoursite.com/2020/09/23/Spring%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/23/Spring%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-23T06:25:10.000Z</published>
    <updated>2020-10-12T09:15:40.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    除了通过xml文件配置的方式外，Spring还提供了以注解的方式去配置。注解方式配置可以简化配置工作，更加优雅高效。</p><a id="more"></a><h2 id="基于注解配置bean"><a href="#基于注解配置bean" class="headerlink" title="基于注解配置bean"></a>基于注解配置bean</h2><h3 id="1-使用注解标识组件"><a href="#1-使用注解标识组件" class="headerlink" title="1.使用注解标识组件"></a>1.使用注解标识组件</h3><p>​    通过注解配置bean的第一步是，在需要让Spring管理的类上使用相应的注解标识这个类，针对不同组件有以下四个注解：</p><ul><li><p><strong>普通组件：@Component</strong></p><p>标识一个受Spring IOC容器管理的组件</p></li><li><p><strong>持久化层组件：@Repository</strong></p><p>标识一个受Spring IOC容器管理的持久化层组件</p></li><li><p><strong>业务逻辑层组件：@Service</strong></p><p>标识一个受Spring IOC容器管理的业务逻辑层组件</p></li><li><p><strong>表述层控制器组件：@Controller</strong></p><p>标识一个受Spring IOC容器管理的表述层控制器组件</p></li></ul><p>​    <strong>注意：</strong>事实上Spring并没有能力识别一个组件到底是不是它所标记的类型，即使将**@Respository<strong>注解用在一个表述层控制器组件上面也不会产生任何错误，所以</strong>@Respository<strong>、</strong>@Service<strong>、</strong>@Controller<strong>这几个注解仅仅是为了</strong>让开发人员自己明确当前的组件扮演的角色。**</p><p>​    这些组件的部分差异在后续SpringMVC中可能会体现，到时候再进行讲解。</p><p><strong>在User类上添加@Component注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-扫描组件"><a href="#2-扫描组件" class="headerlink" title="2.扫描组件"></a>2.扫描组件</h3><p>​    在标记完组件后，<strong>需要在配置文件中配置扫描组件</strong>，使Spring容器去扫描这些类并通过类上的注解自动完成bean的配置（可以理解为在xml文件自动生成了bean元素的内容）。</p><p>​    <strong>配置扫描组件需要使用到context命名空间，以及运行时需要在原jar包的基础上添加Spring-aop的jar包。</strong></p><p>在配置文件中使用<code>context:component-scan</code>配置扫描组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!-- 扫描组件必须指定的属性为base-package，表示要扫描的区域 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-扫描区域的筛选过滤"><a href="#3-扫描区域的筛选过滤" class="headerlink" title="3.扫描区域的筛选过滤"></a>3.扫描区域的筛选过滤</h3><p>​    某些情况下，只需要扫描指定区域下的部分组件，可以通过排除某些区域或指定特定区域来提高扫描的效率。</p><ul><li><p><strong>排除某些区域</strong></p><p>​    使用<code>context:component-scan</code>下的<code>context:exclude-filter</code>子元素指定需要排除的区域。在这个子元素中需要指定两个属性分别为<code>type</code>：指定要过滤的类别，<code>expression</code>：指定要过滤内容（配合type的表达式）。</p><p>其中type属性有五个类型选项：</p><table><thead><tr><th>类型名</th><th>含义</th></tr></thead><tbody><tr><td>annotation</td><td>过滤指定的注解</td></tr><tr><td>assignable</td><td>过滤指定的类及其子类</td></tr><tr><td>aspectj</td><td>根据AspectJ表达式进行过滤</td></tr><tr><td>regex</td><td>根据正则表达式进行过滤</td></tr><tr><td>custom</td><td>指定一个类通过编码的方式自定义过滤规则。该类必须实现org.springframework.core.type.filter.TypeFilter接口。</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定扫描区域为com.ykailh.test包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不扫描含义org.springframework.stereotype.Component注解的类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指定特定区域</strong></p><p>​    使用<code>context:component-scan</code>下的<code>context:include-filter</code>子元素指定需要扫瞄的区域，需要指定的属性与含义和<code>context:exclude-filter</code>一致。值得注意的是<code>context:component-scan</code>中有一个属性<code>use-default-filters</code>表示是否开启默认过滤（默认情况下为扫描整个包下的所有类），默认为turn。所有<strong>想要实现只扫描特定区域除了要通过<code>context:include-filter</code>子元素指定需要扫瞄的区域外还需要将属性<code>use-default-filters</code>设置为false。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定扫描区域为com.ykailh.test包并且关闭默认的扫描方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ykailh.test&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只扫描拥有org.springframework.stereotype.Component注解的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-补充"><a href="#4-补充" class="headerlink" title="4.补充"></a>4.补充</h3><ul><li><code>component-scan</code>下可以拥有若干个<code>include-filter</code>和<code>exclude-filter</code>子节点。</li><li>通过扫描配置的bean的默认id为首字母小写的类名，可以通过注解的value属性指定。</li></ul><h2 id="基于注解的自动装配"><a href="#基于注解的自动装配" class="headerlink" title="基于注解的自动装配"></a>基于注解的自动装配</h2><h3 id="1-实现装配过程"><a href="#1-实现装配过程" class="headerlink" title="1.实现装配过程"></a>1.实现装配过程</h3><p>​    在需要注入非字面量的属性上使用<code>@Autowire</code>注解，<code>@Autowire</code>装配时会先使用byType的方式进行装配，若装配失败则会再次通过byName的方式进行装配。</p><p><strong>Department.java:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User.java:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//使用注解实现自动装配可以不需要set方法</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-补充"><a href="#2-补充" class="headerlink" title="2.补充"></a>2.补充</h3><ul><li><p><code>@Autowire</code>注解默认情况下在装配失败时会抛出异常，可以将它的<code>required</code>属性设置为false进行关闭。</p></li><li><p>在存在多个bean符合注入条件时，可以配合另一个注解<code>@Qualifier</code>指定其中一个进行装配，在未指定时默认为属性名，这也就是在byType方式不成功时能够自动转换为byName的原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired(required=false)</span><span class="comment">//在装配失败时不抛出异常</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;depa&quot;)</span><span class="comment">//在byType存在多个匹配的bean时使用id为depa的bean</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>@Autowire</code>可以作用在方法上，作用与方法上时依据形参为标准。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//作用在方法上实现相同的效果（与set方法无关）</span></span><br><span class="line">    <span class="meta">@Autowired(required=false)</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;depa&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​    除了通过xml文件配置的方式外，Spring还提供了以注解的方式去配置。注解方式配置可以简化配置工作，更加优雅高效。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring入门" scheme="http://yoursite.com/tags/Spring%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门之依赖注入</title>
    <link href="http://yoursite.com/2020/09/22/Spring%E5%85%A5%E9%97%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/09/22/Spring%E5%85%A5%E9%97%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2020-09-22T05:03:20.000Z</published>
    <updated>2020-10-12T02:32:26.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解依赖注入"><a href="#理解依赖注入" class="headerlink" title="理解依赖注入"></a>理解依赖注入</h2><p>​    每个基于应用程序的 java 都有几个对象，由这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来<strong>增加这些类重用的可能性</strong>，并且在做单元测试时，测试独立于其他类的独立性。<code>依赖注入（或有时称为布线）</code>有助于把这些类<strong>粘合在一起</strong>，同时<strong>保持他们独立</strong>。</p><a id="more"></a><p>假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      spellChecker = <span class="keyword">new</span> SpellChecker();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们所做的就是创建一个<code> TextEditor</code> 和 <code>SpellChecker </code>之间的依赖关系。</p><p><strong>而在控制反转IoC的场景中，我们会这样做：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，TextEditor 不应该担心 SpellChecker 的实现。SpellChecker 将会独立实现，并且在 TextEditor 实例化的时候将提供给 TextEditor，我们<strong>将依赖关系配置到Spring的Xml文件中再注入到实体类中，整个过程是由 Spring 框架的控制</strong>。</p><h2 id="依赖注入的两个方式"><a href="#依赖注入的两个方式" class="headerlink" title="依赖注入的两个方式"></a>依赖注入的两个方式</h2><h3 id="1-基于set方法的依赖注入"><a href="#1-基于set方法的依赖注入" class="headerlink" title="1.基于set方法的依赖注入"></a>1.基于set方法的依赖注入</h3><p>​    通过在<code>Spring容器</code>的配置文件的<code>bean标签</code>下的<code>property标签</code>中配置依赖关系实现。例如之前演示过的User类的配置。</p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只保留成员属性和set/get方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicetionContext.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入的过程是通过<code>property标签</code>中的<code>name属性</code>的值在类中寻找格式为<strong>set+首字母大写的name属性的方法</strong>进行调用，<strong>和成员变量名没有必然的联系</strong>。</p><p><strong>修改User类中的成员变量名但保持set方法名和xml文件不变：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer idTest;</span><br><span class="line">    <span class="keyword">private</span> String nameTest;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idTest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idTest = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameTest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameTest = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [idTest=&quot;</span> + idTest + <span class="string">&quot;, nameTest=&quot;</span> + nameTest + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类Test.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IOC容器，并制定配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        User user = ac.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>User [idTest=1001, nameTest=zhangsan]</p></blockquote><p>虽然一般情况下不会故意这样使用，但要注意以下情况即当成员变量名为单个小写字母开头（如：aBcdEfg）的形式，<strong>通过IDE生成的set方法不会将首字母大写</strong>，这样就会导致在依赖注入时无法寻找到相应的set方法，导致异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String aBcdEfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所生成的set方法不符合Spring的规范</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setaBcdEfg</span><span class="params">(String aBcdEfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aBcdEfg = aBcdEfg;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 提示：No setter found for property &#x27;aBcdEfg&#x27; in class --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;aBcdEfg&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-基于构造方法的依赖注入"><a href="#2-基于构造方法的依赖注入" class="headerlink" title="2.基于构造方法的依赖注入"></a>2.基于构造方法的依赖注入</h3><p>​    通过在<code>Spring容器</code>的配置文件的<code>bean标签</code>下的<code>constructor-arg标签</code>中配置依赖关系实现。</p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>constructor-arg标签</code>中的value属性指定参数的值，Spring将根据参数数量来匹配构造方法。</p><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;ZhangSan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是在存在构造方法混淆的情况下，可以<strong>通过index以及type属性来指定相对应的下标和参数类型，进行更精确的匹配。</strong></p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double height;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Double height, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, height=&quot;</span> + height + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;ZhangSan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将这个参数指定为第一个参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> &gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 将这这个参数指定为Double类型 以区别id和height--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;173&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Double&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;LiSi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试类Test.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IOC容器，并制定配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        User user = ac.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        User user2 = ac.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>User [id=1001, height=null, name=ZhangSan]<br>User [id=null, height=173.0, name=LiSi]</p></blockquote><h3 id="3-p命名空间"><a href="#3-p命名空间" class="headerlink" title="3.p命名空间"></a>3.p命名空间</h3><p>​    为了简化XML文件的配置，越来越多的XML文件<strong>采用属性而非子元素配置信息</strong>。Spring从2.5版本开始引入了一个新的p命名空间，可以通过<code>bean</code>标签属性的方式配置Bean的属性。</p><p><img src="/image/Spring%E5%85%A5%E9%97%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/%E6%B7%BB%E5%8A%A0p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" alt="添加p命名空间"></p><p>添加之后的命名方式为在<code>bean标签</code>属性中使用<code>P:属性名</code>的方式来给属性赋值，<strong>实际上运用的也是基于set方法的依赖注入。</strong></p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double height;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(Double height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;ZhangSan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="非字面量的依赖注入"><a href="#非字面量的依赖注入" class="headerlink" title="非字面量的依赖注入"></a>非字面量的依赖注入</h2><p>​    字面量简单理解就是<strong>可以使用字符串形式直接表示其具体含义的值</strong>，它包含了<strong>基本数据类型及其封装类、String等</strong>类型。<strong>字面量可以使用value属性或value子节点的方式注入</strong>，即上面演示中所使用的方式。而对于非字面量的注入还有以下几种形式。</p><h3 id="1-null值"><a href="#1-null值" class="headerlink" title="1.null值"></a>1.null值</h3><p>如果需要将注入null值可以使用<code>property</code>元素的子元素<code>null</code>来表示null值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将name的值设为null --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-注入其他bean"><a href="#2-注入其他bean" class="headerlink" title="2.注入其他bean"></a>2.注入其他bean</h3><p><strong>如果需要将其他类作为参数注入到bean中需要先声明一个这个类的bean对象再将这个对象注入。</strong></p><p>创建一个<code>Department</code>类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDid</span><span class="params">(Integer did)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User类中存在Department的成员变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将Department类型的参数注入到user中有以下两个方式：</strong></p><ul><li><p><strong>引入外部bean</strong></p><p>通过ref属性来指定一个外部已经配置好的bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过ref 引入外部的id为department的bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注入内部bean</strong></p><p>通过在<code>property元素</code>内部定义bean来实现注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义一个内部bean --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>除此之外还可以给bean的级联属性赋值。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过ref 引入外部的id为department的bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入department后可以对其内部属性进行赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;department.did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-注入集合"><a href="#3-注入集合" class="headerlink" title="3.注入集合"></a>3.注入集合</h3><p>为方便演示，在<code>Department</code>类中增加两个成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,User&gt; userMap;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDid</span><span class="params">(Integer did)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.did = did;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, User&gt; <span class="title">getUserMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;Integer, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>注入List集合</strong></p><p>​    配置java.util.List类型的属性，需要指定<code>list标签</code>，在标签里包含一些元素。这些标签    可以通过<code>&lt;value&gt;</code>指定简单的常量值，通过<code>&lt;ref&gt;</code>指定对其他Bean的引用。通过<code>bean</code>指定内置bean定义。通过<code>&lt;null/&gt;</code>指定空元素。甚至可以内嵌其他集合。</p><p><strong>数组的定义和List一样，都使用<code>&lt;list&gt;</code>元素。</strong></p><p><strong>配置java.util.Set需要使用<code>&lt;set&gt;</code>标签，定义的方法与List一样。</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入List集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 通过ref标签的bean属性引用外部bean 一般属性使用value--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user3&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>注入Map集合</strong></p><p>Java.util.Map通过<code>&lt;map&gt;标签</code>定义，<code>&lt;map&gt;标签</code>里可以使用多个<code>&lt;entry&gt;</code>作为子标签。每个条目包含一个键和一个值。</p><p>​    必须在<code>&lt;key&gt;</code>标签里定义键。</p><p>​    因为键和值的类型没有限制，所以可以自由地为它们指定<code>&lt;value&gt;</code>、<code>&lt;ref&gt;</code>、<code>&lt;bean&gt;</code>或<code>&lt;null/&gt;</code>元素。</p><p>​    可以将Map的键和值作为<code>&lt;entry&gt;</code>的属性定义：简单常量使用key和value来定义；bean引用通过<code>key-ref</code>和<code>value-ref</code>属性定义。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入Map集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在属性中配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在子标签中配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user3&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>以引用的方式注入集合</strong></p><p>与bean一样，也可以通过先在外部定义再通过ref引用的方式。不过需要先引入util命名空间。</p><p><strong>以list为例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user1&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;user3&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>​    对于非字面量而言，Spring提供了自动匹配并引用的功能，只需要在bean标签中设置<code>autowire</code>属性即可实现，主要介绍<code>byName</code>和<code>byType</code>两种方式。</p><h3 id="1-byName"><a href="#1-byName" class="headerlink" title="1.byName"></a>1.byName</h3><p>​    byName的方式是<strong>通过成员变量名在该xml中寻找id一致的bean</strong>，再通过引用的方式注入到变量中。</p><p>沿用上面的User和Department类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置autowire为byName 自动匹配下面id为department的bean注入到department变量中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ZhangSanS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-byType"><a href="#2-byType" class="headerlink" title="2.byType"></a>2.byType</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置autowire为byType 自动匹配下面class为com.ykailh.test.Department的bean注入到department变量中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ZhangSan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置一个Department的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.Department&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;did&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搬砖部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><ul><li>使用autowire后将对这个bean中的所有未通过<code>property</code>元素指定的成员变量生效</li><li>byType可以识别需要注入属性的类的子类的bean（多态）。</li><li>将autowire指定为byType时要求只要有一个该类型或其子类的bean存在。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解依赖注入&quot;&gt;&lt;a href=&quot;#理解依赖注入&quot; class=&quot;headerlink&quot; title=&quot;理解依赖注入&quot;&gt;&lt;/a&gt;理解依赖注入&lt;/h2&gt;&lt;p&gt;​    每个基于应用程序的 java 都有几个对象，由这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来&lt;strong&gt;增加这些类重用的可能性&lt;/strong&gt;，并且在做单元测试时，测试独立于其他类的独立性。&lt;code&gt;依赖注入（或有时称为布线）&lt;/code&gt;有助于把这些类&lt;strong&gt;粘合在一起&lt;/strong&gt;，同时&lt;strong&gt;保持他们独立&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring入门" scheme="http://yoursite.com/tags/Spring%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门之IOC容器与bean</title>
    <link href="http://yoursite.com/2020/09/21/Spring%E5%85%A5%E9%97%A8%E4%B9%8BIOC%E5%AE%B9%E5%99%A8%E4%B8%8Ebean/"/>
    <id>http://yoursite.com/2020/09/21/Spring%E5%85%A5%E9%97%A8%E4%B9%8BIOC%E5%AE%B9%E5%99%A8%E4%B8%8Ebean/</id>
    <published>2020-09-21T04:03:20.000Z</published>
    <updated>2020-10-12T01:09:37.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><h3 id="1-IoC容器的概念"><a href="#1-IoC容器的概念" class="headerlink" title="1.IoC容器的概念"></a>1.IoC容器的概念</h3><p>​    Spring 容器是 Spring 框架的<strong>核心</strong>。容器将<strong>创建对象</strong>，把它们<strong>连接</strong>在一起，<strong>配置</strong>它们，并<strong>管理</strong>他们的<strong>整个生命周期</strong>从创建到销毁。</p><p>​    <strong>IOC 容器</strong>具有<strong>依赖注入功能</strong>的容器，它可以创建对象，IOC 容器负责实<strong>例化、定位、配置应用程序中的对象及建立这些对象间的依赖</strong>。通常new一个实例，控制权由程序员控制，而”控制反转”是指<strong>new实例工作</strong>不由程序员来做而是<strong>交给Spring容器</strong>来做。</p><a id="more"></a><h3 id="2-Ioc容器的实现"><a href="#2-Ioc容器的实现" class="headerlink" title="2.Ioc容器的实现"></a>2.Ioc容器的实现</h3><p>​    在通过IOC容器<strong>读取Bean的实例之前</strong>，需要先将<strong>IOC容器本身实例化</strong>。</p><p>Spring提供了IOC容器的两种实现方式：</p><ul><li><p><strong>BeanFactory：</strong></p><p>​    它是<strong>最简单的容器</strong>，给 DI 提供了基本的支持，一般<strong>面向Spring内部</strong>，大量使用在<strong>整合第三方框架</strong>的反向兼容上。</p></li><li><p><strong>ApplicationContext：</strong></p><p><code>ApplicationContext</code>为<code>BeanFactory</code>的子接口，相较于<code>BeanFactoy</code>增加了许多功能，通常情况下都建议使用<code>ApplicationContext</code>容器。</p><p><code>ApplicationContext</code>还包含三个主要实现类：</p><ul><li><p><code>ClassPathXmlApplicationContext</code></p><p>用于加载<strong>对应类路径下</strong>的XML格式的配置文件，你<strong>不需要</strong>提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可（例如HelloWorld中将Xml文件放置到项目下）。</p></li><li><p><code>FileSystemXmlApplicationContext</code></p><p>用于加载<strong>文件系统中</strong>的XML格式的配置文件，你<strong>需要</strong>提供给构造器 XML 文件的<strong>完整路径</strong>。</p></li><li><p><code>WebXmlApplicationContext</code></p><p>该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</p></li></ul></li></ul><p><img src="/image/Spring%E5%85%A5%E9%97%A8%E4%B9%8BIOC%E5%AE%B9%E5%99%A8%E4%B8%8Ebean/IoC%E5%AE%B9%E5%99%A8%E7%BB%93%E6%9E%84.png" alt="IoC容器结构"></p><h3 id="3-获取Bean实例对象的方式"><a href="#3-获取Bean实例对象的方式" class="headerlink" title="3.获取Bean实例对象的方式"></a>3.获取Bean实例对象的方式</h3><p>​    创建容器的实例化对象，再通过这个对象调用<code>getBean</code>方法来获取Bean的实例化对象，介绍三种<code>getBean</code>重载形式。</p><ul><li><p><strong>通过名称（id）获取</strong>：<code>getBean(String)</code></p><p>该方法的返回值类型为<code>Object</code>类型，在获取后需要将它转化为所需的类型。</p></li><li><p><strong>通过名称和类型获取Bean</strong>：<code>getBean(String,class)</code></p><p>返回值为calss类型，相较于第一种方法更加安全，在编译时就可以发现错误。</p></li><li><p><strong>通过类型获取Bean：</strong><code>getBean(class)</code></p><p>要求Xml中有且只有一个该类型的Bean，否则会报<code>BeanDefinitionStoreException</code>的异常。</p></li></ul><h2 id="Bean的相关内容"><a href="#Bean的相关内容" class="headerlink" title="Bean的相关内容"></a>Bean的相关内容</h2><h3 id="1-Bean的定义"><a href="#1-Bean的定义" class="headerlink" title="1.Bean的定义"></a>1.Bean的定义</h3><p>​    Bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。可以使用<strong>Xml文件</strong>和<strong>注解</strong>两个配置方式，以下演示全部基于Xml文件的形式演示，注解方式会有单独进行讲解。</p><p>​    Bean的配置与之前在helloworld中一致，都是通过Bean标签进行配置，它还包含了一下属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td>name</td><td>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。</td></tr><tr><td>scope</td><td>这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。</td></tr><tr><td>constructor-arg</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>properties</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>autowiring mode</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>lazy-initialization mode</td><td>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td>initialization 方法</td><td>在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr><tr><td>destruction 方法</td><td>当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr></tbody></table><h3 id="2-Bean的作用域"><a href="#2-Bean的作用域" class="headerlink" title="2.Bean的作用域"></a>2.Bean的作用域</h3><p>​    Bean的作用域指明了<strong>IoC容器中生产Bean的方式</strong>，在Xml文件中通过Bean标签的scope，<code>Spring</code>框架支持一下五个作用域：</p><p>注意，如果你使用 <code>web-aware ApplicationContext </code>时，其中三个是可用的。   </p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该运用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p><strong>暂时先讨论前两个范围，当我们将讨论有关 web-aware Spring ApplicationContext 时，其余三个将被讨论。</strong></p><p>延续helloworld中的User对象（只包含id和name两个成员属性），在Xml中配置两个对象分别为<code>singleton</code>和<code>prototype</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别获取两次对象，对比它们的哈希值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IOC容器，并制定配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        User user1A = ac.getBean(<span class="string">&quot;user1&quot;</span>, User.class);</span><br><span class="line">        User user1B = ac.getBean(<span class="string">&quot;user1&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user1A == user1B);</span><br><span class="line">        </span><br><span class="line">        User user2A = ac.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        User user2B = ac.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user2A == user2B);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>true<br>false</p></blockquote><ul><li><p>作用域为<code>singleton</code>的每次获取对象都返回的是同一个对象，若没有设置<code>scope</code>则默认为<code>singleton</code>。</p></li><li><p><code>作用域为singleton</code>时，实例化对象随着IoC容器的创建而创建，而<code>prototype</code>是在获取对象时创建。</p></li></ul><h3 id="3-Bean的生命周期"><a href="#3-Bean的生命周期" class="headerlink" title="3.Bean的生命周期"></a>3.Bean的生命周期</h3><p>​    <strong>Spring IOC容器对bean的生命周期进行管理的过程：</strong></p><p>​    ① 通过构造器或工厂方法创建bean实例</p><p>​    ② 为bean的属性设置值和对其他bean的引用</p><p>​    ③ 调用bean的初始化方法</p><p>​    ④  bean可以使用了</p><p>​    ⑤ 当容器关闭时，调用bean的销毁方法</p><p>可以通过<code>init-method</code>以及<code>destroy-method</code>属性指定初始化和销毁方法。</p><p><strong>User.java:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用set方法（依赖注入）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;toString方法被执行&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化与销毁方法（是普通的成员方法，与方法名无关）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>applicationContext.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Test.java:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建IOC容器，并制定配置文件，因为默认作用域为singleton，所以在创建容器时依次调用了构造方法和set方法和init方法</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取User的实例化对象</span></span><br><span class="line">        User user = ac.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        <span class="comment">//调用toString方法模拟使用过程</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//关闭容器，bean被销毁，调用销毁方法</span></span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>…日志信息…</p><p>调用构造方法<br>调用set方法（依赖注入）<br>init方法被执行<br>toString方法被执行<br>destroy方法被执行</p></blockquote><h3 id="4-后置处理器"><a href="#4-后置处理器" class="headerlink" title="4.后置处理器"></a>4.后置处理器</h3><p>​    后置处理器是一个<code>BeanPostProcessor</code>接口的实现类，它所定义的两个方法<code>postProcessBeforeInitialization </code>和<code>postProcessAfterInitialization</code>分别于<strong>Bean初始化前后执行</strong>，丰富了Bean的生命周期。这两个方法拥有两个形参分别<strong>为<code>Object</code> 形式的bean对象以及字符串形式的beanName（id）</strong>，以及需要一个<strong>Object类型返回值</strong>。可以理解为将bean对象放入到这两个方法中进行改造再将改造后的对象进行返回。</p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义一个后置处理器<code>PostProcessorExample</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostProcessorExample</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        User user = (User) bean;</span><br><span class="line">        user.setId(user.getId()+<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;后置处理器的初始化前方法生效，将id增加100&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后方法生效，判断beanName是否为user2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;user2&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;否&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义后需要将后置处理器以Bean的形式配置到xml文件中，该后置处理器对该文件下的所有其他Bean有效。</strong></p><p><strong>applicationContext.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置后置处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.PostProcessorExample&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Test.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IOC容器，并制定配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><blockquote><p>后置处理器的初始化前方法生效，将id增加100<br>User [id=1101, name=zhangsan]<br>执行初始化方法<br>初始化后方法生效，判断beanName是否为user2<br>否<br>后置处理器的初始化前方法生效，将id增加100<br>User [id=1102, name=lisi]<br>执行初始化方法<br>初始化后方法生效，判断beanName是否为user2<br>是</p></blockquote><p><strong>对user、user2均有效，且顺序为一个bean加载完成后再接着加载下一个bean</strong></p><h3 id="5-FactoryBean"><a href="#5-FactoryBean" class="headerlink" title="5.FactoryBean"></a>5.FactoryBean</h3><p>​    这是一个特殊的bean，是Spring对工厂设计模式所提供的一个支持。这个bean的实体类需要实现<code>org.springframework.beans.factory.FactoryBean接口</code>，与普通bean的最大区别为在通过IoC容器的<code>getbean</code>方法获取对象时获取的不是这个工厂bean本身，而是获取这个bean调用<code>getObject</code>所返回的对象。</p><p><strong>User.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建一个生产User对象的工厂类UserFactory：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂bean需要实现FactoryBean接口当中的三个抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//返回所生产的对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1001</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;FactoryBeanTest&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回生产对象的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//是否设置为单例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在xml文件中配置工厂bean：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.UserFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;factoryBean.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需要注意如果需要指定Class请指定为所生产Bean的class</span></span><br><span class="line">        <span class="comment">//getBean(&quot;factory&quot;,User.class);而不是UserFactory.class，否则会抛出异常。</span></span><br><span class="line">        </span><br><span class="line">        Object bean = ac.getBean(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        System.out.println(bean.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>class com.ykailh.test.User</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IoC容器&quot;&gt;&lt;a href=&quot;#IoC容器&quot; class=&quot;headerlink&quot; title=&quot;IoC容器&quot;&gt;&lt;/a&gt;IoC容器&lt;/h2&gt;&lt;h3 id=&quot;1-IoC容器的概念&quot;&gt;&lt;a href=&quot;#1-IoC容器的概念&quot; class=&quot;headerlink&quot; title=&quot;1.IoC容器的概念&quot;&gt;&lt;/a&gt;1.IoC容器的概念&lt;/h3&gt;&lt;p&gt;​    Spring 容器是 Spring 框架的&lt;strong&gt;核心&lt;/strong&gt;。容器将&lt;strong&gt;创建对象&lt;/strong&gt;，把它们&lt;strong&gt;连接&lt;/strong&gt;在一起，&lt;strong&gt;配置&lt;/strong&gt;它们，并&lt;strong&gt;管理&lt;/strong&gt;他们的&lt;strong&gt;整个生命周期&lt;/strong&gt;从创建到销毁。&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;IOC 容器&lt;/strong&gt;具有&lt;strong&gt;依赖注入功能&lt;/strong&gt;的容器，它可以创建对象，IOC 容器负责实&lt;strong&gt;例化、定位、配置应用程序中的对象及建立这些对象间的依赖&lt;/strong&gt;。通常new一个实例，控制权由程序员控制，而”控制反转”是指&lt;strong&gt;new实例工作&lt;/strong&gt;不由程序员来做而是&lt;strong&gt;交给Spring容器&lt;/strong&gt;来做。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring入门" scheme="http://yoursite.com/tags/Spring%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门之Spring简介</title>
    <link href="http://yoursite.com/2020/09/20/Spring%E5%85%A5%E9%97%A8%E4%B9%8BSpring%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2020/09/20/Spring%E5%85%A5%E9%97%A8%E4%B9%8BSpring%E7%AE%80%E4%BB%8B/</id>
    <published>2020-09-20T04:01:20.000Z</published>
    <updated>2020-10-10T04:04:36.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单了解Spring"><a href="#简单了解Spring" class="headerlink" title="简单了解Spring"></a>简单了解Spring</h2><h3 id="1-什么是Spring"><a href="#1-什么是Spring" class="headerlink" title="1.什么是Spring"></a>1.什么是Spring</h3><p>​    Spring是一个<strong>开源框架</strong>，它可以通过简单的配置实现以前<strong>EJB容器</strong>（不了解可以跳过）的功能，它最核心的两个思想一个是<strong>IoC（控制反转）</strong>，一个是<strong>AOP（面向切面编程）</strong>。</p><a id="more"></a><blockquote><p>对于很多新的初学者，可能是第一次接触到框架的概念，简单来说框架就是一个半成品的组件，它对一些底层的代码进行了封装，使之变得简单易用。相当于框架已经帮助你完成了许多基础工作，你只需要集中精力完成系统的业务逻辑。</p></blockquote><h3 id="2-Spring的优良特性"><a href="#2-Spring的优良特性" class="headerlink" title="2.Spring的优良特性"></a>2.Spring的优良特性</h3><ul><li><p><strong>非侵入式：</strong>基于Spring开发的应用中的对象可以<strong>不依赖</strong>于Spring的API。</p></li><li><p><strong>控制反转：IOC——Inversion of Control</strong>，指的是<strong>将对象的创建权交给 Spring 去创建</strong>。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</p></li><li><p><strong>依赖注入：DI——Dependency Injection</strong>，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值，<strong>它是IOC思想最经典的实现方式之一</strong>。</p></li><li><p><strong>面向切面编程：AOP——Aspect Oriented Programming</strong>，它关注的是横跨多个点的业务逻辑以外的功能，是对<strong>面向对象编程（OOP）</strong>的补充。</p></li><li><p><strong>容器：</strong>Spring 是一个容器，因为它包含并且管理应用对象的<strong>生命周期</strong>。</p></li><li><p><strong>组件化：</strong>Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用<strong>XML和Java注解组合</strong>这些对象。</p></li><li><p><strong>一站式：</strong>在 IOC 和 AOP 的基础上可以<strong>整合各种企业应用的开源框架和优秀的第三方类库</strong>（实际上 Spring 自身也提供了表述层的 SpringMVC 和持久层的 Spring JDBC）</p></li></ul><blockquote><p>这些特性可能只看概念可能体会不到这些好处，以后在学习和实际使用中加深理解。</p></blockquote><h2 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h2><p>​    Spring 有可能成为所有企业应用程序的一站式服务点，然而，Spring 是<strong>模块化</strong>的，<strong>允许你挑选和选择适用于你的模块，不必要把剩余部分也引入</strong>。</p><p><img src="/image/Spring%E5%85%A5%E9%97%A8%E4%B9%8BSpring%E7%AE%80%E4%BB%8B/Spring%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Spring的体系结构"></p><h3 id="1-核心容器"><a href="#1-核心容器" class="headerlink" title="1.核心容器"></a>1.核心容器</h3><p>核心容器由 <strong>spring-core，spring-beans，spring-context，spring-context-support和spring-expression</strong>（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成，它们的细节如下：</p><ul><li><strong>spring-core</strong> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。<strong>spring-context-support</strong> 提供了对第三方库集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><h3 id="2-数据访问-集成"><a href="#2-数据访问-集成" class="headerlink" title="2.数据访问/集成"></a>2.数据访问/集成</h3><ul><li><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li><li><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li><li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li><li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细）</li></ul><h3 id="3-Web"><a href="#3-Web" class="headerlink" title="3.Web"></a>3.Web</h3><ul><li><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li><li><strong>Web-MVC</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li><li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li></ul><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h3><ul><li><strong>AOP</strong> 模块提供了面向方面（切面）的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。</li><li><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li><li><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li></ul><h2 id="Spring环境配置"><a href="#Spring环境配置" class="headerlink" title="Spring环境配置"></a>Spring环境配置</h2><p>​    <strong>Spring所需安装以下程序;</strong></p><ul><li><p>JDK以及任意一个IDE，学习到框架这部分应该已经安装了这些。</p></li><li><p>安装 Apache Commons Logging API ：<strong><a href="http://commons.apache.org/logging/">http://commons.apache.org/logging/</a></strong> </p></li><li><p>安装 Spring 框架库，可以根据自己使用的IDE百度对应的简化操作。</p></li></ul><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p><strong>1.创建一个java项目，并导入Spring必须的jar包。</strong></p><p><img src="/image/Spring%E5%85%A5%E9%97%A8%E4%B9%8BSpring%E7%AE%80%E4%BB%8B/%E6%B7%BB%E5%8A%A0jar%E5%8C%85.png" alt="添加jar包"></p><p><strong>2.编写实体类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建一个<strong>Spring bean configurationFile文件</strong>，这是一个<strong>xml文件</strong>，用于配置Spring所管理的类。</p><p>通过<code>bean</code>标签的属性<code>id</code>设置唯一标识，<code>calss</code>为全类名。</p><p>再通过<code>property</code>标签为成员属性赋值（也就是依赖注入），<code>name</code>为属性名，<code>value</code>为属性值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ykailh.test.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.创建一个测试类，并使用Spring的IOC容器管理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建IOC容器，并制定配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过id值获取对象</span></span><br><span class="line">        User user = (User)ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote><p>User [id=1001, name=zhangsan]</p></blockquote><p>参考：<a href="https://www.w3cschool.cn/wkspring/">Spring教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单了解Spring&quot;&gt;&lt;a href=&quot;#简单了解Spring&quot; class=&quot;headerlink&quot; title=&quot;简单了解Spring&quot;&gt;&lt;/a&gt;简单了解Spring&lt;/h2&gt;&lt;h3 id=&quot;1-什么是Spring&quot;&gt;&lt;a href=&quot;#1-什么是Spring&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Spring&quot;&gt;&lt;/a&gt;1.什么是Spring&lt;/h3&gt;&lt;p&gt;​    Spring是一个&lt;strong&gt;开源框架&lt;/strong&gt;，它可以通过简单的配置实现以前&lt;strong&gt;EJB容器&lt;/strong&gt;（不了解可以跳过）的功能，它最核心的两个思想一个是&lt;strong&gt;IoC（控制反转）&lt;/strong&gt;，一个是&lt;strong&gt;AOP（面向切面编程）&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring入门" scheme="http://yoursite.com/tags/Spring%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之Servlet</title>
    <link href="http://yoursite.com/2020/09/05/Web%E5%9F%BA%E7%A1%80%E4%B9%8BServlet/"/>
    <id>http://yoursite.com/2020/09/05/Web%E5%9F%BA%E7%A1%80%E4%B9%8BServlet/</id>
    <published>2020-09-05T08:30:18.000Z</published>
    <updated>2020-10-20T12:21:23.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><p>​    简单来说，Servlet是一个运行在服务器上的一个java程序，它可以接受客户端发送的请求并响应数据返回给客户端。</p><a id="more"></a><h2 id="Hello-Servlet"><a href="#Hello-Servlet" class="headerlink" title="Hello Servlet"></a>Hello Servlet</h2><p>​    Servlet首先需要创建一个动态的Web项目，需要注意的是在3.0以及以上版本引入了注解方式配置方式，下面演示的是基于2.5版本的xml文件配置方式。</p><h3 id="1-创建一个java类并实现Servlet接口"><a href="#1-创建一个java类并实现Servlet接口" class="headerlink" title="1.创建一个java类并实现Servlet接口"></a>1.创建一个java类并实现Servlet接口</h3><p>​    <strong>HelloServlet.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//destroy,在Servlet销毁时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;destroy方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取Servlet的启动信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取Servlet的基本信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//init,在Servlet初始化时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;init方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在web-xml中配置Servlet"><a href="#2-在web-xml中配置Servlet" class="headerlink" title="2.在web.xml中配置Servlet"></a>2.在web.xml中配置Servlet</h3><p>​    相当于告诉服务器Servlet的具体信息。</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置servlet的基本信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">      <span class="comment">&lt;!-- servlet-name 为这个servlet取名，通常情况下与对应的类名相同--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这个servlet所对应的类路径 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ykailh.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- 配置servlet的响应信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- 访问的servlet名 ，与上面配置的一致 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置在访问什么路径时触发servlet &#x27;/&#x27;在服务器中被解析为http://ip地址:端口号/项目路径 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test_servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就配置好了一个servlet。</p><h3 id="3-servlet的执行过程"><a href="#3-servlet的执行过程" class="headerlink" title="3.servlet的执行过程"></a>3.servlet的执行过程</h3><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BServlet/servlet%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="servlet执行过程"></p><h2 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h2><p>​    参考：<a href="https://www.runoob.com/servlet/servlet-life-cycle.html">https://www.runoob.com/servlet/servlet-life-cycle.html</a></p><p><strong>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</strong></p><ul><li>创建Servlet，调用Servlet构造器。</li><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><h3 id="1-init-方法"><a href="#1-init-方法" class="headerlink" title="1.init() 方法"></a>1.init() 方法</h3><p>​    init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。</p><p>​    Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。</p><h3 id="2-service-方法"><a href="#2-service-方法" class="headerlink" title="2.service() 方法"></a>2.service() 方法</h3><p>​    service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><h3 id="3-destroy-方法"><a href="#3-destroy-方法" class="headerlink" title="3.destroy() 方法"></a>3.destroy() 方法</h3><p>​    destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><h2 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h2><h3 id="1-体系结构图"><a href="#1-体系结构图" class="headerlink" title="1.体系结构图"></a>1.体系结构图</h3><p>​    除了Servlet接口外它还用于两个实现抽象类：<code>GenericServlet</code>以及<code>HttpServlet</code>他们的关系以及实现的内容如下：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BServlet/servlet%E4%BD%93%E7%B3%BB.png" alt="servlet体系"></p><p>可以看到HttpServlet已经将service方法转换为了不同请求方式所对于的两个方法doGet和doPost，在实际开发中通常都是直接继承HttpServlet来实现Servlet。</p><h3 id="2-继承HttpServlet来实现Servlet"><a href="#2-继承HttpServlet来实现Servlet" class="headerlink" title="2.继承HttpServlet来实现Servlet"></a>2.继承HttpServlet来实现Servlet</h3><p>​    <strong>HelloServlet2.java：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ykailh.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;处理Get请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">&quot;处理Post请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置方式保持一致，web.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ykailh.servlet.HelloServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-ServletConfig类"><a href="#3-ServletConfig类" class="headerlink" title="3.ServletConfig类"></a>3.ServletConfig类</h3><p>​    ServletConfig类为Servlet的配置信息类，它与Servlet一样由Web容器（演示使用的为Tomcat）创建，他的主要作用为：</p><ul><li><p><strong>获取Servlet的别名，即<code>servlet-name</code>中配置的名称。</strong></p></li><li><p><strong>获取初始化参数init-param</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.ykailh.servlet.HelloServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 配置初始化参数 ，可以配置多个--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 初始化参数的name --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 初始化参数的value --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0.0.0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test_servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取ServletContext对象</strong></p></li></ul><p>HelloServlet2.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init方法中的参数中含有ServletConfig对象，若在其他方法可使用getServletConfig方法获取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//注意，重写init方法时必须调用父类的init方法，否则会导致部分方法失效</span></span><br><span class="line">        <span class="keyword">super</span>.init(config);</span><br><span class="line">        <span class="comment">//获取Servlet别名</span></span><br><span class="line">        String servletName = config.getServletName();</span><br><span class="line">        <span class="comment">//根据初始化参数的name值获取它的value值</span></span><br><span class="line">        String ip = config.getInitParameter(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = config.getServletContext();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-ServletContext类"><a href="#4-ServletContext类" class="headerlink" title="4.ServletContext类"></a>4.ServletContext类</h3><p>​    每个Web工程只有一个ServletContext对象随着Web工程的启动而创建，停止而销毁，它主要有以下四个作用：</p><ul><li><p>获取web.xml中配置的上下文参数 context-param：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 与初始化参数的配置方法类似 都是key-Value结构，同样可以配置多个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0.0.0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获得当前的工程路径</p></li><li><p>获得工程部署后的绝对路径</p></li><li><p>作为数据域存取数据</p><table><thead><tr><th>作用</th><th>方法名</th></tr></thead><tbody><tr><td>存储</td><td>setAttribute(key,value)</td></tr><tr><td>获取</td><td>getAttribute(key)</td></tr><tr><td>删除</td><td>removeAttribute(key)</td></tr></tbody></table></li></ul><p><strong>演示：</strong></p><p>HelloServlet2.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用getServletContext方法实际上还是使用ServletConfig对象来获取    </span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//获取配置中的上下文参数</span></span><br><span class="line">        context.getInitParameter(<span class="string">&quot;ip&quot;</span>);<span class="comment">//127.0.0.0</span></span><br><span class="line">        <span class="comment">//获取工程路径</span></span><br><span class="line">        String contextPath = context.getContextPath();<span class="comment">// /test_servlet</span></span><br><span class="line">        <span class="comment">//获取绝对路径,以“/”为参数，会被服务器解析</span></span><br><span class="line">        String realPath = context.getRealPath(<span class="string">&quot;/&quot;</span>);<span class="comment">// E:\... wtpwebapps\test_servlet\</span></span><br><span class="line">        <span class="comment">//存储值</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;context&quot;</span>);</span><br><span class="line">        <span class="comment">//获取值,在整个web项目中都可以获取到</span></span><br><span class="line">        context.getAttribute(<span class="string">&quot;name&quot;</span>);<span class="comment">//context</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-HttpServletRequest类"><a href="#5-HttpServletRequest类" class="headerlink" title="5.HttpServletRequest类"></a>5.HttpServletRequest类</h3><p>在上面的doGet/Post方法中可以看到参数中有<code>HttpServletRequest</code>的参数，每当有请求进入服务器，就会把HTTP协议信息拆解封装到<code>HttpServletRequest</code>对象中，传递到service方法（doGet/Post）。它的常用方法如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getRequestURI</td><td>获取请求的路径资源</td></tr><tr><td>getRequestURL</td><td>获取请求获取URL</td></tr><tr><td>getRemoteHost</td><td>获取请求客户端Ip地址</td></tr><tr><td>getHeader</td><td>获取请求头</td></tr><tr><td>getParameter</td><td>获取请求单个参数</td></tr><tr><td>getParameterValues</td><td>获取请求多个参数</td></tr><tr><td>getMethod</td><td>获取请求方式</td></tr><tr><td>setAttribute</td><td>设置数据域</td></tr><tr><td>getAttribute</td><td>获取数据域</td></tr><tr><td>getRequestDispatcher</td><td>获取请求转发对象</td></tr></tbody></table><h3 id="6-HttpServletResponse类"><a href="#6-HttpServletResponse类" class="headerlink" title="6.HttpServletResponse类"></a>6.HttpServletResponse类</h3><p>​    与<code>HttpServletRequest</code>类的情况类似，服务器将返回给客户端的信息封装到了<code>HttpServletResponse</code>类中。</p><p><strong>最值得注意的是向客户端输出数据有字节流和字符流两个IO流，每次只能同时使用一个。</strong></p><h2 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h2><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BServlet/%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="转发与重定向"></p><h3 id="1-转发"><a href="#1-转发" class="headerlink" title="1.转发"></a>1.转发</h3><p>​    转发指的是服务器收到请求后跳转到服务器的其他资源的行为。</p><p>Servlet1.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet1响应&quot;</span>);</span><br><span class="line">        <span class="comment">//获取转发对象并调用forward方法进行转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet2.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2响应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><p>浏览器地址栏没有变化</p></li><li><p>共享Request域中的数据</p></li><li><p>可以转发到WEB-INF目录下</p></li><li><p>不能访问工程以外的资源</p><p><strong>以上特点的根本原因为转发只发生一次请求。</strong></p></li></ul><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><p>​    服务器接收到请求后在响应报文中告知客户端需要跳转的路径（302状态码，响应头中的路径），客户端根据这些信息再次发送请求。</p><p>保持Servlet2不变，Servlet1.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet1响应&quot;</span>);</span><br><span class="line">        <span class="comment">//设置重定向响应信息</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/test_servlet/servlet2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><p>浏览器地址栏变为重定向结果</p></li><li><p>不能共享Request域中的数据</p></li><li><p>不能转发到WEB-INF目录下</p></li><li><p>可以访问工程以外的资源</p></li></ul><p><strong>以上特点的根本原因为重定向产生了一次新的请求。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Servlet&quot;&gt;&lt;a href=&quot;#什么是Servlet&quot; class=&quot;headerlink&quot; title=&quot;什么是Servlet&quot;&gt;&lt;/a&gt;什么是Servlet&lt;/h2&gt;&lt;p&gt;​    简单来说，Servlet是一个运行在服务器上的一个java程序，它可以接受客户端发送的请求并响应数据返回给客户端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之jQuery</title>
    <link href="http://yoursite.com/2020/09/04/Web%E5%9F%BA%E7%A1%80%E4%B9%8BjQuery/"/>
    <id>http://yoursite.com/2020/09/04/Web%E5%9F%BA%E7%A1%80%E4%B9%8BjQuery/</id>
    <published>2020-09-04T07:10:06.000Z</published>
    <updated>2020-10-27T01:33:46.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h2><p>​    jQuery是一个JavaScript函数库，可以简化JavaScript的代码。并且jQuery已经接近了大多数浏览器的兼容问题。</p><a id="more"></a><h2 id="jQuery基本语法"><a href="#jQuery基本语法" class="headerlink" title="jQuery基本语法"></a>jQuery基本语法</h2><p>​    使用jQuery之前需要导入jQuery的js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-核心方法"><a href="#1-核心方法" class="headerlink" title="1.核心方法"></a>1.核心方法</h3><p>​    jQuery的核心方法为<code>$()</code>，它能够根据传入的不同参数实现不同JavaScript的功能，代码比JavaScript更简洁。</p><ul><li><p><strong>传入参数为函数：</strong></p><p>在页面加载完成时执行这个函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用jQuery</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//效果类似但不完全相同</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入参数为HTML字符串：</p><p>根据这个字符串创建元素节点jQuery对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;    &lt;h1&gt;标题1&lt;/h1&gt;&quot;</span>).appendTo(<span class="string">&quot;body&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入参数为选择器字符串：</p><p>根据选择器返回节点对象</p></li><li><p>将传入参数为DOM对象时：</p><p>把DOM对象转换为jQuery对象</p></li></ul><h3 id="2-jQuery对象"><a href="#2-jQuery对象" class="headerlink" title="2.jQuery对象"></a>2.jQuery对象</h3><p>​    通过jQuery的APi所创建出来的都为jQuery对象。jQuery对象的<strong>本质为DOM的数组加上一系列的功能函数。</strong>jQuery对象不能直接使用DOM对象的属性和方法，jQuery对象的命名一般以$符号开头。</p><ul><li><p><strong>DOM对象转换为jQuery对象</strong></p><p>与上面提到的一致，将DOM对象作为参数放到jQuery核心函数中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取DOM对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//转换为jQuery对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $dom = $(dom);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>jQuery与DOM对象的转换<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>jQuery对象转换为DOM对象</strong></p><p>因为jQuery对象就是DOM的数组，使用直接通过下标获取即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取jQuery对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $dom = $(<span class="string">&quot;#test&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//转换为DOM对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dom = $dom[<span class="number">0</span>];        </span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>jQuery与DOM对象的转换<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-加载完成的区别"><a href="#3-加载完成的区别" class="headerlink" title="3.加载完成的区别"></a>3.加载完成的区别</h3><p>​    上面提到<code>$(function()&#123;&#125;)</code>与<code>window.onload = function()&#123;&#125;</code>的效果类似，都是页面加载完成后执行，但其实还是有所区别。</p><ul><li><p><strong>执行时间区别</strong></p><p><code>$(function()&#123;&#125;)</code>是在浏览器内核解析完页面标签并创建好DOM对象后执行。</p><p><code>window.onload = function()&#123;&#125;</code>，则还需要等待浏览器加载需要显示的内容才执行。</p><p>所以是<code>$(function()&#123;&#125;)</code>先执行。</p></li><li><p>执行次数区别</p><p>每新写一个<code>window.onload = function()&#123;&#125;</code>就会覆盖上一个，所以只会执行一次。</p><p>而<code>$(function()&#123;&#125;)</code>可以依次多次执行。</p></li></ul><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><p>​    选择器用于获取目标对象，详细的选择器以及使用方法参考jQuery的<a href="https://jquery.cuishifeng.cn/index.html">API文档</a>。</p><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h3><p>​    最常用的选择器</p><table><thead><tr><th>选择器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>#id</td><td>根据元素id获取对象</td><td>$(“#id”)</td></tr><tr><td>element</td><td>根据标签名获取对象的集合</td><td>$(“div”)</td></tr><tr><td>*</td><td>获取所以元素对象的集合</td><td>$(“*”)</td></tr><tr><td>selector1,selector2,selectorN</td><td>获取多个选择器合并后的结果</td><td>$(“div,span,p.myClass”)</td></tr></tbody></table><h3 id="2-层级选择器"><a href="#2-层级选择器" class="headerlink" title="2.层级选择器"></a>2.层级选择器</h3><p>​    用于处理父子类元素的关系</p><table><thead><tr><th>选择器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>ancestor descendant</td><td>匹配ancestor元素内的所有descendant元素</td><td>$(“form input”)</td></tr><tr><td>parent &gt; child</td><td>匹配parent元素中的child子元素</td><td>$(“form &gt; input”)</td></tr><tr><td>prev + next</td><td>匹配所有紧接在 prev 元素后的 next 元素</td><td>$(“label + input”)</td></tr><tr><td>prev ~ siblings</td><td>匹配 prev 元素之后的所有 siblings 元素</td><td>$(“form ~ input”)</td></tr></tbody></table><h3 id="3-基本过滤器"><a href="#3-基本过滤器" class="headerlink" title="3.基本过滤器"></a>3.基本过滤器</h3><p>​    添加筛选标签的条件</p><table><thead><tr><th>过滤器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>:first</td><td>获取匹配的第一个元素</td><td>$(‘li:first’);</td></tr><tr><td>:last</td><td>获取匹配的最后个元素</td><td>$(‘li:last’)</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td><td>$(“input:not(:checked)”)</td></tr><tr><td>:even</td><td>匹配所有索引值为偶数的元素，从 0 开始计数</td><td>$(“tr:even”)</td></tr><tr><td>:odd</td><td>匹配所有索引值为奇数的元素，从 0 开始计数</td><td>$(“tr:odd”)</td></tr><tr><td>:eq(index)</td><td>匹配一个给定索引值的元素</td><td>$(“tr:eq(1)”)</td></tr><tr><td>:gt(index)</td><td>匹配所有大于给定索引值的元素</td><td>$(“tr:gt(0)”)</td></tr><tr><td>:lt(index)</td><td>匹配所有小于给定索引值的元素</td><td>$(“tr:lt(2)”)</td></tr><tr><td>:header</td><td>匹配如 h1, h2, h3之类的标题元素</td><td>$(“:header”)</td></tr><tr><td>:animated</td><td>匹配所有正在执行动画效果的元素</td><td>$(“:animated”)</td></tr></tbody></table><h3 id="4-内容过滤器"><a href="#4-内容过滤器" class="headerlink" title="4.内容过滤器"></a>4.内容过滤器</h3><p>​    添加筛选内容的条件</p><table><thead><tr><th>过滤器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>:contains(text)</td><td>匹配包含给定文本的元素</td><td>$(“div:contains(‘John’)”)</td></tr><tr><td>:empty</td><td>匹配所有不包含子元素或者文本的空元素</td><td>(“td:empty”)</td></tr><tr><td>:parent</td><td>匹配含有子元素或者文本的元素</td><td>$(“td:parent”)</td></tr><tr><td>:has(selector)</td><td>匹配含有selector元素的元素</td><td>$(“div:has(p)”)</td></tr></tbody></table><h3 id="5-属性过滤器"><a href="#5-属性过滤器" class="headerlink" title="5.属性过滤器"></a>5.属性过滤器</h3><p>​    添加筛选属性的条件</p><table><thead><tr><th>过滤器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>[attribute]</td><td>匹配包含给定属性的元素。</td><td>$(“div[id]”)</td></tr><tr><td>[attribute=value]</td><td>匹配给定的属性是某个特定值的元素</td><td>$(“input[name=’newsletter’]”)</td></tr><tr><td>[attribute!=value]</td><td>匹配所有不含有指定的属性，或者属性不等于特定值的元素。</td><td>$(“input[name!=’newsletter’]”)</td></tr><tr><td>[attribute^=value]</td><td>匹配给定的属性是以某些值开始的元素</td><td>$(“input[name^=’news’]”)</td></tr><tr><td>[attribute$=value]</td><td>匹配给定的属性是以某些值结尾的元素</td><td>$(“input[name$=’letter’]”)</td></tr><tr><td>[attribute*=value]</td><td>匹配给定的属性是以包含某些值的元素</td><td>$(“input[name*=’man’]”)</td></tr><tr><td>[selector1][selector2][selectorN]</td><td>复合属性选择器，需要同时满足多个条件时使用。</td><td>$(“input[id][name$=’man’]”)</td></tr></tbody></table><h3 id="6-表单过滤器"><a href="#6-表单过滤器" class="headerlink" title="6.表单过滤器"></a>6.表单过滤器</h3><p>​    作用与表单元素的过滤器</p><table><thead><tr><th>过滤器</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>:input</td><td>匹配所有 input, textarea, select 和 button 元素</td><td>$(“:input”)</td></tr><tr><td>:input的type属性</td><td>匹配对应type属性值的元素，例如密码框(:password)</td><td>$(“:password”)</td></tr><tr><td>:enabled</td><td>匹配所有可用元素</td><td>$(“input:enabled”)</td></tr><tr><td>:disabled</td><td>匹配所有不可用元素</td><td>$(“input:disabled”)</td></tr><tr><td>:checked</td><td>匹配所有选中的被选中元素(复选框、单选框等，select中的option)</td><td>$(“input:checked”)</td></tr><tr><td>:selected</td><td>匹配所有选中的option元素</td><td>$(“input:selected”)</td></tr></tbody></table><h2 id="jQuery筛选"><a href="#jQuery筛选" class="headerlink" title="jQuery筛选"></a>jQuery筛选</h2><h3 id="1-过滤"><a href="#1-过滤" class="headerlink" title="1.过滤"></a>1.过滤</h3><p>​    用于筛选内容，使用方式类似于调用方法，一般用于在筛选的结果中再次过滤。使用方法为jQuery.方法名</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>eq(index|-index)</td><td>获取当前链式操作中第N个jQuery对象，返回jQuery对象，当参数大于等于0时为正向选取，比如0代表第一个，1代表第二个。当参数为负数时为反向选取，比如-1为倒数第一个。</td></tr><tr><td>first()</td><td>获取第一个元素</td></tr><tr><td>last()</td><td>获取最后个元素</td></tr><tr><td>hasClass(class)</td><td>检查当前的元素是否含有某个特定的类，如果有，则返回true。</td></tr><tr><td>filter(expr|obj|ele|fn)</td><td>筛选出与指定表达式匹配的元素集合。</td></tr><tr><td>is(expr|obj|ele|fn)</td><td>根据选择器、DOM元素或 jQuery 对象来检测匹配元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。</td></tr><tr><td>has(expr|ele)</td><td>保留包含特定后代的元素，去掉那些不含有指定后代的元素。</td></tr><tr><td>not(expr|ele|fn)</td><td>从匹配元素的集合中删除与指定表达式匹配的元素</td></tr></tbody></table><h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>children(<em>[expr]</em>)</td><td>取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。</td></tr><tr><td>next(<em>[expr]</em>)</td><td>取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。</td></tr><tr><td>nextAll(<em>[expr]</em>)</td><td>查找当前元素之后所有的同辈元素。</td></tr><tr><td>closest(expr|object|element)</td><td>closest会首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，一层一层往上，直到找到匹配选择器的元素。如果什么都没找到则返回一个空的jQuery对象。</td></tr><tr><td>find(expr|obj|ele)</td><td>搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。</td></tr><tr><td>nextUntil([exp|ele][,fil])</td><td>查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止。</td></tr><tr><td>offsetParent()</td><td>返回第一个匹配元素用于定位的父节点。</td></tr><tr><td>parent(<em>[expr]</em>)</td><td>取得一个包含着所有匹配元素的唯一父元素的元素集合。</td></tr><tr><td>parents(<em>[expr]</em>)</td><td>取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。可以通过一个可选的表达式进行筛选。</td></tr><tr><td>parentsUntil([expr|element][,filter])</td><td>查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。</td></tr><tr><td>prev(<em>[expr]</em>)</td><td>取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。</td></tr><tr><td>prevAll(<em>[expr]</em>)</td><td>查找当前元素之前所有的同辈元素。</td></tr><tr><td>prevUntil([exp|ele][,fil])</td><td>查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止。</td></tr><tr><td>siblings(<em>[expr]</em>)</td><td>取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。可以用可选的表达式进行筛选。</td></tr></tbody></table><h2 id="jQuery属性"><a href="#jQuery属性" class="headerlink" title="jQuery属性"></a>jQuery属性</h2><h3 id="1-操作文本"><a href="#1-操作文本" class="headerlink" title="1.操作文本"></a>1.操作文本</h3><ul><li><p><strong>html()</strong></p><p>类似于DOM对象的innerHTML属性</p><p>当无参时，为获取调用对象的标签内的值。</p><p>当有参时，为设置改标签的内容为参数值。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            //获取第一个div标签内的内容    ,结果为<span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;div&quot;</span>).html());</span></span><br><span class="line"><span class="javascript">            <span class="comment">//修改所有div标签的值</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;span&gt;span3&lt;/span&gt;&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>text()</strong></p><p>类似于DOM对象的innerText属性，无参为获取有参为设置。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取div标签内的文本内容    ,结果为 span1 span2</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;div&quot;</span>).text());</span></span><br><span class="line"><span class="handlebars"><span class="xml">            //设置标签内的内容为参数的文本形式。结果：<span class="tag">&lt;<span class="name">div</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;aaa&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>val()</strong></p><p>用于设置和获取表单项的value的属性值，与DOM对象的value属性类型，无参为获取有参为设置。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取文本框的value值</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;#username&quot;</span>).val());</span></span><br><span class="line"><span class="javascript">            <span class="comment">//修改文本框的value值</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username&quot;</span>).val(<span class="string">&quot;修改文本框的值&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文本框默认值&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-操作属性"><a href="#2-操作属性" class="headerlink" title="2.操作属性"></a>2.操作属性</h3><ul><li><p><strong>attr()</strong></p><p>用于设置和获取属性的值，获取时参数为属性名，设置是参数为属性名和要设置的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取name属性的值</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;#username&quot;</span>).attr(<span class="string">&quot;name&quot;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//修改name属性的值</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username&quot;</span>).attr(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;testname&quot;</span>);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是attr方法在获取没有设置的属性时，会显示undefined。但对于比如checked这样具有默认值的属性时，这样显示就会有歧义，所以jQuery还提供了一个prop方法，解决了这个问题。</p></li><li><p><strong>prop()</strong></p><p>相较于attr方法，prop方法对如checked、readOnly、selected、disabled等属性的显示进行了矫正外。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//结果为undefined</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;#username&quot;</span>).attr(<span class="string">&quot;checked&quot;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//结果为false</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;#username&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>));</span></span><br><span class="line">        &#125;)    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>attr还可以对自定义属性进行操作，所以在使用中如果为上述情况使用prop方法，否则一律使用attr方法。</strong></p></li></ul><h2 id="jQuery文档处理"><a href="#jQuery文档处理" class="headerlink" title="jQuery文档处理"></a>jQuery文档处理</h2><p>​    动态的对元素进行增删改。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>appendTo(content)</td><td>作为子元素追加到另一个指定的元素末尾。</td></tr><tr><td>prependTo(content)</td><td>作为子元素追加到另一个指定的元素所以子元素前。</td></tr><tr><td>insertAfter(content)</td><td>作为同级元素添加到另一个指定的元素前。</td></tr><tr><td>insertBefore(content)</td><td>作为同级元素添加到另一个指定的元素后。</td></tr><tr><td>replaceWith(content|fn)</td><td>将所有匹配的元素替换成指定的HTML或DOM元素。所有匹配元素替换为一个指定元素</td></tr><tr><td>replaceAll(selector)</td><td>用匹配的元素替换掉所有 selector匹配到的元素。几个匹配元素就替换几个指定元素</td></tr><tr><td>remove(<em>[expr]</em>)</td><td>从DOM中删除所有匹配的元素。（删除节点，但保留jQuery对象）</td></tr><tr><td>empty()</td><td>删除匹配的元素集合中所有的子节点。（清空节点）</td></tr></tbody></table><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><h3 id="1-事件方法"><a href="#1-事件方法" class="headerlink" title="1.事件方法"></a>1.事件方法</h3><p>​    将事件与function绑定，绑定方式大同小异，简单举例几个：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>click([[data],fn])</td><td>点击事件</td></tr><tr><td>mouseover([[data],fn])</td><td>鼠标移入</td></tr><tr><td>mouseout([[data],fn])</td><td>鼠标移除</td></tr><tr><td>on(events,[selector],[data],fn)</td><td>在选择元素上绑定一个或多个事件的事件处理函数。</td></tr><tr><td>one(type,[data],fn)</td><td>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。</td></tr><tr><td>off(events,[selector],[fn])</td><td>解除绑定，与on()相反</td></tr></tbody></table><h3 id="2-事件的冒泡"><a href="#2-事件的冒泡" class="headerlink" title="2.事件的冒泡"></a>2.事件的冒泡</h3><p>在父子元素同时监听一个事件时，在子元素触发事件时会连带触发父元素的事件，这种情况就叫冒泡。</p><p>一般情况下我们是不想这种情况发生的，为了解决这个问题只需要在函数中return false即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    span&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../libs/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//div绑定点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;div点击事件触发&quot;</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            <span class="comment">//span绑定点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;span&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;span事件触发&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//return false 不会有冒泡现象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        div内容<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span内容<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        div内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式相关"><a href="#样式相关" class="headerlink" title="样式相关"></a>样式相关</h2><h3 id="1-CSS相关"><a href="#1-CSS相关" class="headerlink" title="1.CSS相关"></a>1.CSS相关</h3><p>​    用于动态设置css样式</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>addClass(class|fn)</td><td>为每个匹配的元素添加指定的类名。</td></tr><tr><td>removeClass([class|fn])</td><td>从所有匹配的元素中删除全部或者指定的类。</td></tr><tr><td>toggleClass(class|fn[,sw])</td><td>如果存在（不存在）就删除（添加）一个类。</td></tr><tr><td>offset([coordinates])</td><td>获取或设置匹配元素在当前视口的相对偏移。</td></tr></tbody></table><h3 id="2-jQuery效果"><a href="#2-jQuery效果" class="headerlink" title="2.jQuery效果"></a>2.jQuery效果</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>show([speed,[easing],[fn]])</td><td>显示隐藏的匹配元素。</td></tr><tr><td>hide([speed,[easing],[fn]])</td><td>隐藏显示的元素</td></tr><tr><td>toggle([speed],[easing],[fn])</td><td>如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的</td></tr><tr><td>fadeIn([speed],[easing],[fn])</td><td>通过不透明度的变化来实现所有匹配元素的淡入效果</td></tr><tr><td>fadeOut([speed],[easing],[fn])</td><td>通过不透明度的变化来实现所有匹配元素的淡出效果</td></tr><tr><td>fadeToggle([speed,[easing],[fn]])</td><td>通过不透明度的变化来开关所有匹配元素的淡入和淡出效果</td></tr><tr><td>fadeTo([[speed],opacity,[easing],[fn]])</td><td>把所有匹配元素的不透明度以渐进方式调整到指定的不透明度</td></tr></tbody></table><ul><li><strong>参数含义：</strong></li></ul><p><strong>speed:</strong> 隐藏/显示 效果的速度。默认是 “0”毫秒。可能的值：slow，normal，fast。”</p><p><strong>easing:</strong>(Optional) 用来指定切换效果，默认是”swing”，可用参数”linear”</p><p>**fn:**在动画完成时执行的函数，每个元素执行一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是jQuery&quot;&gt;&lt;a href=&quot;#什么是jQuery&quot; class=&quot;headerlink&quot; title=&quot;什么是jQuery&quot;&gt;&lt;/a&gt;什么是jQuery&lt;/h2&gt;&lt;p&gt;​    jQuery是一个JavaScript函数库，可以简化JavaScript的代码。并且jQuery已经接近了大多数浏览器的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之JavaScript</title>
    <link href="http://yoursite.com/2020/09/03/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJavaScript/"/>
    <id>http://yoursite.com/2020/09/03/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJavaScript/</id>
    <published>2020-09-03T10:32:13.000Z</published>
    <updated>2020-10-19T11:49:15.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Web基础系列</strong>主要对Java开发中Web相关的内容(如<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等)进行<strong>最基本的讲解</strong>，本系列其他文章请参考<a href="https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/">Web基础</a> 。</p><p>本文主要对<code>JavaScript</code>进行简单的了解，想要更详细的了解HTML可以参考这个教程<a href="https://www.runoob.com/js/js-tutorial.html">JS教程</a> 。</p><a id="more"></a><h2 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h2><p>​    JavaScript是一门脚本语言，通常情况下配合HTML、CSS使用，实现页面的交互功能。它具有以下几个特性：</p><ul><li><p><strong>基于对象</strong></p><p>JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也    能使用现有的对象。</p></li><li><p><strong>简单</strong></p><p>JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做    出严格的要求,是基于Java基本语句和控制的脚本语言。</p></li><li><p><strong>动态性</strong></p><p>JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务    器就可以对用户的输入做出响应。</p></li><li><p><strong>跨平台性</strong></p><p>JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因    此一个JavaScript脚本在编写后可以带到任意机器上使用,前提是机器上的浏览器支    持JavaScript脚本语言,目前JavaScript已被大多数的浏览器所支持。</p></li></ul><h2 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h2><h3 id="1-编写方式"><a href="#1-编写方式" class="headerlink" title="1.编写方式"></a>1.编写方式</h3><p>​    编写位置在HTML的hard或body元素的<code>&lt;script&gt;</code>标签中</p><ul><li><p>方式一：直接编写在标签中</p></li><li><p>方式二：先编写js文件再通过</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    js代码...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方式二 ，src属性中可以为相对路径或绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>test.js:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...js代码</span><br></pre></td></tr></table></figure><p><strong>需要注意：两种方式不能够混合使用。</strong></p><h3 id="2-数据类型及变量定义"><a href="#2-数据类型及变量定义" class="headerlink" title="2.数据类型及变量定义"></a>2.数据类型及变量定义</h3><ul><li><p><strong>数据类型：</strong></p><table><thead><tr><th>类型名</th><th>对应类型</th></tr></thead><tbody><tr><td>number</td><td>数值类型</td></tr><tr><td>string</td><td>字符串类型</td></tr><tr><td>object</td><td>对象类型</td></tr><tr><td>boolean</td><td>布尔类型</td></tr><tr><td>function</td><td>函数类型</td></tr></tbody></table></li><li><p><strong>变量定义：</strong></p></li></ul><p>​    JavaScript为弱类型语言，在声明变量时不需要指定数据类型，使用var关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="comment">//声明变量并初始化</span></span><br><span class="line"><span class="keyword">var</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化为数值类型依然可以赋值其他类型的值，体现弱类型特性</span></span><br><span class="line">j = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>特殊值：</strong></p><p>JavaScript中存在三个特殊值：</p><table><thead><tr><th align="left">特殊值</th><th>含义</th></tr></thead><tbody><tr><td align="left">undefined</td><td>未定义。为初始化变量的默认值</td></tr><tr><td align="left">null</td><td>空值。</td></tr><tr><td align="left">NaN</td><td>非数字、非数值。在非数字类型运算时出现</td></tr></tbody></table></li></ul><h3 id="3-比较运算"><a href="#3-比较运算" class="headerlink" title="3.比较运算"></a>3.比较运算</h3><p>​    JavaScript中的大于小于等等比较均与java一致，唯一不同的是一下两种情况：</p><p>​    ==：简单比较字面值</p><p>​    ===：除了比较字面值外还会比较数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">a == b <span class="comment">//只比较字面量，结果为turn</span></span><br><span class="line">a === b <span class="comment">//除字面量外还比较数据类型，结果为false</span></span><br></pre></td></tr></table></figure><h3 id="4-逻辑运算"><a href="#4-逻辑运算" class="headerlink" title="4.逻辑运算"></a>4.逻辑运算</h3><p>​    与java不同，JavaScript更类似于c语言的<strong>所有数据类型都可以当做布尔类型</strong>来使用，其中：</p><p>​    <strong>0、null、undefined、””(空字符串)都被认为是false。</strong></p><p>​    JavaScript的逻辑运算结果也与java不同。</p><ul><li><p><strong>&amp;&amp; 且运算</strong></p><ul><li><p>当表达式全为turn时，结果为最后一个表达式的值。</p></li><li><p>遇到表达式为false时，结束运算，结果为这个表达式的值。</p></li></ul></li><li><p><strong>|| 或运算</strong></p><ul><li><p>当表达式全为false时，结果为最后一个表达式的值。</p></li><li><p>遇到表达式为turn时，结束运算，结果为这个表达式的值。</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alert为弹窗函数</span></span><br><span class="line">alert(b &amp;&amp; a);<span class="comment">//abc</span></span><br><span class="line">alert(a &amp;&amp; d &amp;&amp; b);<span class="comment">//null</span></span><br><span class="line">alert(c || d);<span class="comment">//null</span></span><br><span class="line">alert(c || a || d);<span class="comment">//abc</span></span><br></pre></td></tr></table></figure><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h3><p>​    JavaScript中的数组可以存放任意类型的值，同时数组的长度根据实际存储情况自动发生改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];<span class="comment">//定义一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;abc&quot;</span>,<span class="number">123</span>,<span class="literal">true</span>];<span class="comment">//定义一个数组并初始化</span></span><br><span class="line"></span><br><span class="line">alert(arr.length);<span class="comment">//0</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&quot;abcd&quot;</span>;<span class="comment">//可以进行赋值操作，数组长度自动改变。</span></span><br><span class="line">alert(arr.length);<span class="comment">//4</span></span><br><span class="line">alert(arr[<span class="number">2</span>]);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><p>​    使用function，由于JavaScript为弱类型语言，在定义函数时直接指定参数名即可。定义具有返回值的方法和普通方法的语法一致，直接使用return返回即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个有参方法,另一种写法</span></span><br><span class="line"><span class="keyword">var</span> method2 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个有返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">alert(method3(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><strong>注意：JavaScript中不存在方法的重载，以重载的形式定义函数，会覆盖掉上一个同名函数。</strong></p><ul><li><p><strong>隐藏参数(arguments)</strong></p><p>JavaScript中定义的方法都有一个隐藏参数arguments，它类似于java中的可变参数，参数存储于以arguments为名的数组存，所以即使调用方法时传入和参数列表不对应的参数个数方法依然可以执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个求和函数，其中有两个形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    alert(num1);<span class="comment">//第一个参数</span></span><br><span class="line">    alert(num2);<span class="comment">//第二个参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">        result += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">6</span>));<span class="comment">//40</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-对象"><a href="#7-对象" class="headerlink" title="7.对象"></a>7.对象</h3><p>​    对象定义语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对象定义格式：</span></span><br><span class="line"><span class="comment"> * 方式一：</span></span><br><span class="line"><span class="comment"> * var 对象名 = new object()</span></span><br><span class="line"><span class="comment"> * 对象名.属性名 = 值;//定义对象属性</span></span><br><span class="line"><span class="comment"> * 对象名.方法名 = function()&#123;&#125;//定义对象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zs = <span class="keyword">new</span> object();</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line">zs.name = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">zs.age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//定义方法，可以在方法中使用this关键字</span></span><br><span class="line">zs.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;姓名：&quot;</span>+ <span class="built_in">this</span>.name +<span class="string">&quot;年龄：&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方式二：</span></span><br><span class="line"><span class="comment"> * var 对象名 = &#123;</span></span><br><span class="line"><span class="comment"> * 属性名 : 值,//定义对象属性,使用逗号间隔</span></span><br><span class="line"><span class="comment"> * 方法名 : function()&#123;&#125;//定义对象方法</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zs2 = &#123;</span><br><span class="line">    name:ZhangSan,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;姓名：&quot;</span>+ <span class="built_in">this</span>.name +<span class="string">&quot;年龄：&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-事件"><a href="#8-事件" class="headerlink" title="8.事件"></a>8.事件</h3><p>​    事件是设备与页面进行交互的响应。</p><ul><li><p><strong>常用事件</strong></p><ul><li><p><strong>onload(加载完成事件)</strong></p><p>常用于页面JS代码初始化操作。</p></li><li><p><strong>onclick(单击事件)</strong></p><p>常用于按钮点击响应</p></li><li><p><strong>onblur(失去焦点时间)</strong></p><p>常用于输入框失去焦点后验证输入内容是否合法</p></li><li><p><strong>onchange(内容发生改变)</strong></p><p>常用于下拉列表和输入框改变内容后操作</p></li><li><p><strong>onsubmit(表单提交事件)</strong></p><p>常用于表单提交前，验证表单项是否合法</p></li></ul></li><li><p><strong>事件注册</strong></p><p>事件注册分为静态注册和动态注册两种，静态注册是直接通过标签中的属性注册事件。动态注册是先获取元素的对象在通过这个对象来注册事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//静态函数所调用的函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击按钮后执行</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;点击静态按钮&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//动态注册,在加载完成后再进行注册</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//通过document对象获取按钮元素的对象，document是JavaScript提供的一个对象，它包含了页面的信息。</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> buttonObject = <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//通过对象.事件 = function()&#123;&#125;的方式注册事件</span></span></span><br><span class="line"><span class="javascript">        buttonObject.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;点击动态按钮&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过onlick属性注册事件，可以直接写代码，但为了代码可读性一般是封装到一个函数中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun()&quot;</span>&gt;</span>静态注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>动态注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>事件对象</strong></p><p>jQuery提供了一个事件对象，他封装了事件触发的详细信息，想要获取它只需要在绑定事件的函数的参数列表定义一个参数，这个参数一般命名为event。</p><p>他的详细属性含义请参考：<a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp%EF%BC%9B">https://www.w3school.com.cn/jsref/dom_obj_event.asp；</a></p></li></ul><h3 id="9-DOM"><a href="#9-DOM" class="headerlink" title="9.DOM"></a>9.DOM</h3><p>​    DOM（Document Object Model）文本对象模型，是将文本对象化后的结果。当网页被加载时，浏览器会创建页面的文档对象模型。</p><p>​    上述演示中所使用的<code>document</code>对象是<strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树的结果，它包含了HTML所有元素的对象化信息，使用他可以让JavaScript拥有获取和操作HTML内容的能力。</p><ul><li><p><strong>document常用方法</strong></p><ul><li><p><strong>getElementById(elementId):</strong></p><p>通过标签id属性查找dom对象</p></li><li><p><strong>getElementByName(elementId):</strong></p><p>通过标签name属性查找dom对象</p></li><li><p><strong>getElementByTagName(tagname):</strong></p><p>通过标签名属性查找dom对象</p></li></ul><p><strong>这三个方法建议按从上到下的优先级使用</strong></p><ul><li><p><strong>createElement(tagName)</strong></p><p>根据标签名创建一个标签对象</p></li></ul><p>更多方法和属性建议查阅API文档</p></li><li><p><strong>document属性</strong></p><p>后来，在 HTML DOM Level 3，加入了更多对象、集合和属性。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">document.anchors</td><td align="left">返回拥有 name 属性的所有 <code>&lt;a&gt; </code>元素。</td></tr><tr><td align="left">document.applets</td><td align="left">返回所有 <code>&lt;applet&gt; </code>元素（HTML5 不建议使用）</td></tr><tr><td align="left">document.baseURI</td><td align="left">返回文档的绝对基准 URI</td></tr><tr><td align="left">document.body</td><td align="left">返回 <code>&lt;body&gt; </code>元素</td></tr><tr><td align="left">document.cookie</td><td align="left">返回文档的 cookie</td></tr><tr><td align="left">document.doctype</td><td align="left">返回文档的 doctype</td></tr><tr><td align="left">document.documentElement</td><td align="left">返回 <code>&lt;html&gt; </code>元素</td></tr><tr><td align="left">document.documentMode</td><td align="left">返回浏览器使用的模式</td></tr><tr><td align="left">document.documentURI</td><td align="left">返回文档的 URI</td></tr><tr><td align="left">document.domain</td><td align="left">返回文档服务器的域名</td></tr><tr><td align="left">document.domConfig</td><td align="left">废弃。返回 DOM 配置</td></tr><tr><td align="left">document.embeds</td><td align="left">返回所有<code>&lt;embed&gt;</code>元素</td></tr><tr><td align="left">document.forms</td><td align="left">返回所有 <code>&lt;form&gt; </code>元素</td></tr><tr><td align="left">document.head</td><td align="left">返回 <code>&lt;head&gt; </code>元素</td></tr><tr><td align="left">document.images</td><td align="left">返回所有 <code>&lt;img&gt; </code>元素</td></tr><tr><td align="left">document.implementation</td><td align="left">返回 DOM 实现</td></tr><tr><td align="left">document.inputEncoding</td><td align="left">返回文档的编码（字符集）</td></tr><tr><td align="left">document.lastModified</td><td align="left">返回文档更新的日期和时间</td></tr><tr><td align="left">document.links</td><td align="left">返回拥有 href 属性的所有 <code>&lt;area&gt; </code>和 <code>&lt;a&gt; </code>元素</td></tr><tr><td align="left">document.readyState</td><td align="left">返回文档的（加载）状态</td></tr><tr><td align="left">document.referrer</td><td align="left">返回引用的 URI（链接文档）</td></tr><tr><td align="left">document.scripts</td><td align="left">返回所有 <code>&lt;script&gt; </code>元素</td></tr><tr><td align="left">document.strictErrorChecking</td><td align="left">返回是否强制执行错误检查</td></tr><tr><td align="left">document.title</td><td align="left">返回 <code>&lt;title&gt; </code>元素</td></tr><tr><td align="left">document.URL</td><td align="left">返回文档的完整 URL</td></tr></tbody></table></li><li><p><strong>HTML DOM属性</strong></p><p>每个HTML的元素都可以理解为一个节点，主要关注的是标签属性的节点信息。</p><table><thead><tr><th>属性名</th><th></th></tr></thead><tbody><tr><td>childNodes</td><td>当前节点的所有子节点</td></tr><tr><td>firstChild</td><td>当前节点的第一个子节点</td></tr><tr><td>lastChild</td><td>当前节点的最后一个子节点</td></tr><tr><td>parentNode</td><td>当前节点的父节点</td></tr><tr><td>nextSibling</td><td>当前节点的下一个节点</td></tr><tr><td>previousSibling</td><td>当前节点的上一个节点</td></tr><tr><td>className</td><td>标签的class属性</td></tr><tr><td>innerHTML</td><td>标签内的内容</td></tr><tr><td>innerText</td><td>标签内的文本</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Web基础系列&lt;/strong&gt;主要对Java开发中Web相关的内容(如&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;等)进行&lt;strong&gt;最基本的讲解&lt;/strong&gt;，本系列其他文章请参考&lt;a href=&quot;https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/&quot;&gt;Web基础&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;本文主要对&lt;code&gt;JavaScript&lt;/code&gt;进行简单的了解，想要更详细的了解HTML可以参考这个教程&lt;a href=&quot;https://www.runoob.com/js/js-tutorial.html&quot;&gt;JS教程&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之CSS</title>
    <link href="http://yoursite.com/2020/09/02/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/"/>
    <id>http://yoursite.com/2020/09/02/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/</id>
    <published>2020-09-02T09:30:20.000Z</published>
    <updated>2020-09-17T01:35:07.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Web基础系列</strong>主要对Java开发中Web相关的内容(如<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等)进行<strong>最基本的讲解</strong>，本系列其他文章请参考<a href="https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/">Web基础</a> 。</p><p>​    本文主要对<code>CSS</code>进行简单的了解，想要更详细的了解HTML可以参考这个教程<a href="https://www.runoob.com/css/css-tutorial.html">CSS教程</a> 。</p><a id="more"></a><h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><p>​    <strong>CSS</strong>的全称为（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets）<strong>层叠样式表</strong>，它决定了HTML元素的显示方式。CSS 规则由两个主要部分构成：<strong>选择器</strong>，以及<strong>一条或多条声明</strong>:</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/CSS%E6%A0%BC%E5%BC%8F.jpg" alt="CSS格式"></p><h2 id="CSS的插入"><a href="#CSS的插入" class="headerlink" title="CSS的插入"></a>CSS的插入</h2><p>​    根据CSS<strong>插入</strong>HTML文件的<strong>方式不同</strong>，分为<strong>外部样式表</strong>、<strong>内部样式表</strong>、<strong>内联样式</strong>。不同的方式有不同的插入格式。</p><ul><li><p><strong>外部样式表</strong></p><p>​    将CSS语句写在一个后缀名为<code>.css</code>的文件中，然后在<code>&lt;head&gt;</code>标签内通过<code>&lt;link&gt;</code>标签引入CSS文件，<code>&lt;link&gt;</code>中的<code>rel</code>属性设置为<code>&quot;stylesheet&quot;</code>，<code>href</code>设置为CSS文件的路径。</p><p>CSS文件示例(mystyle.css)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><p>HTML引入CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS外部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内部样式表</strong></p><p>​    将CSS语句直接写在HTML文件<code>&lt;head&gt;</code>标签内的<code>&lt;style&gt;</code>标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS内部样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内联样式</strong></p><p>直接通过标签的<code>style</code>属性定义该标签内容的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS内联样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&quot;color:red&quot;</span>&gt;</span>h1标签内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">&quot;font-size:30px&quot;</span>&gt;</span>p标签内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    普通文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面三种方式都可以实现相同的效果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E6%A0%B7%E5%BC%8F%E8%A1%A8.png" alt="样式表"></p><p>这三个样式同时存在时的优先级为：<strong>内联样式</strong>  &gt; <strong>内部样式表</strong> &gt; <strong>外部样式表</strong></p><p>保持mystyle.css不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>样式优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:yellow;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&quot;color:green&quot;</span>&gt;</span>测试优先级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="样式优先级"></p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>​    主要介绍以下几种css选择器：</p><ul><li><p>标签选择器</p><p>格式为：<code>标签名&#123;声明..&#125;</code>，对所有同名标签有效上面演示中均为标签选择器</p></li><li><p>类选择器</p><p>格式为：<code>.类名&#123;声明..&#125;</code>,对所有标签中属性<code>class</code>的值为该类名的元素有效。</p><p>可以使用<code>标签名.类名&#123;声明&#125;</code>来选择该标签内<code>class</code>的值为该类名的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择class值为classname的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.classname</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择p标签中class值为classname的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-class">.a</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;classname&quot;</span>&gt;</span>class为classname的h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;classname&quot;</span>&gt;</span>class为classname的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&quot;a&quot;</span>&gt;</span>class为a的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="类选择器"></p></li><li><p>id选择器</p><p>格式为：<code>#id值&#123;声明..&#125;</code>，只对id为此id值的元素有效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择id值为p1的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#p1</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择id值为p2的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#p2</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>id值为p1的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>id值为p2的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/id%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="id选择器"></p></li><li><p>属性选择器</p><p>格式为：<code>[属性名]&#123;声明..&#125;</code>选择具有该属性的元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择具有id属性的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[id]</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="css">    <span class="comment">/*选择具有class属性的元素*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[class]</span>&#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>id值为p1的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>id值为p2的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="属性选择器"></p></li><li><p>组合选择器</p><ul><li><code>标签(名)1 标签(名)2</code>，选择标签1元素内的标签2元素。</li><li><code>标签(名)1&gt;标签(名)2</code>，选择标签1元素内的标签2元素中的直接子元素。</li><li><code>标签(名)1+标签(名)2</code>，选择紧接在标签1元素后的元素，且二者有相同父元素.</li><li><code>标签(名)1~标签(名)2</code>，选择标签1元素后的所有标签2元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*以div p 为例，后续演示只有此处不同，省略代码*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div前的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div内的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>span内的p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div后的p元素1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div后的p元素2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>div p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A81.png" alt="组合选择器1"></p><p><code>div&gt;p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A82.png" alt="组合选择器2"></p><p><code>div+p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A83.png" alt="组合选择器3"></p><p><code>div~p</code>结果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BCSS/%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A84.png" alt="组合选择器4"></p></li></ul><h2 id="CSS常用样式"><a href="#CSS常用样式" class="headerlink" title="CSS常用样式"></a>CSS常用样式</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Web基础系列&lt;/strong&gt;主要对Java开发中Web相关的内容(如&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;等)进行&lt;strong&gt;最基本的讲解&lt;/strong&gt;，本系列其他文章请参考&lt;a href=&quot;https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/&quot;&gt;Web基础&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​    本文主要对&lt;code&gt;CSS&lt;/code&gt;进行简单的了解，想要更详细的了解HTML可以参考这个教程&lt;a href=&quot;https://www.runoob.com/css/css-tutorial.html&quot;&gt;CSS教程&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Web基础之HTML</title>
    <link href="http://yoursite.com/2020/09/01/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/"/>
    <id>http://yoursite.com/2020/09/01/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/</id>
    <published>2020-09-01T09:16:20.000Z</published>
    <updated>2020-09-08T07:14:09.727Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>Web基础系列</strong>主要对Java开发中Web相关的内容(如<code>HTML</code>、<code>CSS</code>、<code>JavaScrip</code>t等)进行<strong>最基本的讲解</strong>，本系列其他文章请参考<a href="https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/">Web基础</a> 。</p><p>​    本文主要对<code>HTML</code>进行简单的了解，想要更详细的了解HTML可以参考这个教程<a href="https://www.runoob.com/html/html-tutorial.html">HTML教程</a> 。</p><p>​                                                                                                                                                        <strong><em>基于HTML5演示</em></strong></p><a id="more"></a><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><p>​    <strong>HTML</strong>的全称为（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）<strong>超文本标记语言</strong>，是用来描述网页的一种标记语言。HTML文件以<code>.html</code> 或 <code>.htm</code>结尾，最基本的HTML文件主要包括以下几个部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其中：</strong></p><ul><li><p><code>&lt;!DOCTYPE html&gt;    </code>为<strong>HTML5</strong>的<strong>版本声明</strong>，其他版本的HTML的声明会略有不同</p></li><li><p><code>&lt;html&gt; &lt;/html&gt;</code> 为HTML的<strong>根标签</strong>。</p></li><li><p><code>&lt;head&gt; &lt;/head&gt;</code> 为头部标签，包含了HTML文件的主要信息。可以在头部标签中添加以下标签。</p><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/tag-head.html">&lt;head&gt;</a></td><td align="left">定义了文档的信息</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-title.html">&lt;title&gt;</a></td><td align="left">定义了文档的标题</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-base.html">&lt;base&gt;</a></td><td align="left">定义了页面链接标签的默认链接地址</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-link.html">&lt;link&gt;</a></td><td align="left">定义了一个文档和外部资源之间的关系</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-meta.html">&lt;meta&gt;</a></td><td align="left">定义了HTML文档中的元数据</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-script.html">&lt;script&gt;</a></td><td align="left">定义了客户端的脚本文件</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/tag-style.html">&lt;style&gt;</a></td><td align="left">定义了HTML文档的样式文件</td></tr></tbody></table></li><li><p><code>&lt;body&gt; &lt;/body&gt;</code> 包含HTML的主要内容，例如示例中的<code>Hello World!</code>，使用浏览器打开的效果为：</p><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAHTML.png" alt="我的第一个HTML"></p></li></ul><h2 id="HTML中的标签"><a href="#HTML中的标签" class="headerlink" title="HTML中的标签"></a>HTML中的标签</h2><p>​    HTML标签通常以<strong>开始标签</strong>（<code>&lt;标签名&gt;，如&lt;p&gt;</code>）起始，以<strong>结束标签</strong>（<code>&lt;/标签名&gt;，如&lt;/p&gt;</code>）终止，<strong>标签的内容</strong>写在开始标签与结束标签之间，开始标签与结束标签以成对的形式出现。具有空内容的标签称为<strong>空标签</strong>（<code>&lt;标签名/&gt; 如 &lt;br/&gt;</code>），空标签的结束标记在开始标签中，所以又称为<strong>自结束标签</strong>。</p><p>​    在标签内还可以添加标签的属性，一般出现在开始标签当中，如<code>&lt;div id = &quot;1&quot;&gt;</code>，每个标签可以添加的属性都各不相同，下面为适用于大多数 HTML 元素的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="left">id</td><td align="left">定义元素的唯一id</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内样式（inline style）</td></tr><tr><td align="left">title</td><td align="left">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><p>​    以下为一些常用的标签演示，更详细的标签列表请参考<a href="https://www.runoob.com/tags/ref-byfunc.html">HTML标签列表</a>。</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>​    <code>&lt;h1&gt; ~ &lt;h6&gt;</code>,标签分别代表<strong>1~6级标题</strong>，<strong>不同等级的标题</strong>对应着<strong>不同的字体大小</strong>，标题均有<strong>加粗效果</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>演示标题效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是普通文本的效果</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是h1的效果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是h2的效果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是h3的效果<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是h4的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是h5的效果<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是h6的效果<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%A0%87%E9%A2%98%E6%95%88%E6%9E%9C.png" alt="标题效果"></p><h3 id="2-段落与换行"><a href="#2-段落与换行" class="headerlink" title="2.段落与换行"></a>2.段落与换行</h3><p>​    对应<code>&lt;p&gt;</code>与<code>&lt;br/&gt;</code>，其中换行标签属于自结束标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>段落与换行<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>对代码中对文字</span><br><span class="line">    换行是没有效果的，这是段落一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    需要使用换行符进行<span class="tag">&lt;<span class="name">br</span>/&gt;</span>这是换行效果</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>换行的间隔要大于普通的换行，这是段落二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落中依旧可以使用换行<span class="tag">&lt;<span class="name">br</span>/&gt;</span>这是段落三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%AE%B5%E8%90%BD%E4%B8%8E%E6%8D%A2%E8%A1%8C.png" alt="段落与换行"></p><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><p>​    列表分为<strong>有序列表</strong>（<code>&lt;ol&gt;</code>）与<strong>无序列表</strong>(<code>&lt;ul&gt;</code>)，使用<code>&lt;li&gt;</code>定义列表项。不同的<code>type</code>属性对应不同的样式</p><ul><li>有序列表默认为数字排序，type属性为<code>a/A</code>时为小写/大写字母排序，为<code>I</code>时为罗马数字。</li><li>无序列表默认为实心圆，type属性为<code>circle</code>时为空心圆，为<code>square</code>时为实心正方形。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>段落与换行<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>默认的有序、无序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>指定样式的有序、无序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> = <span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表第三项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E5%88%97%E8%A1%A8.png" alt="列表"></p><h3 id="4-插入图片"><a href="#4-插入图片" class="headerlink" title="4.插入图片"></a>4.插入图片</h3><p>​    使用<code>&lt;img&gt;</code>标签插入图片，<code>&lt;img&gt;</code>标签是自结束标签，其最重要的属性为<code>src</code>，它指定插入图片的URL路径。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- title属性为鼠标悬停在图片范围内时的提示，alt属性为图片加载失败的提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>成功示例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/测试图片.png&quot;</span> <span class="attr">title</span> = <span class="string">&quot;鼠标悬停提示&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>失败示例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">src</span>=<span class="string">&quot;错误路径&quot;</span> &gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.png" alt="插入图片"></p><h3 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5.超链接"></a>5.超链接</h3><p>​    使用<code>&lt;a&gt;</code>标签定义超链接，其最重要的属性为<code>href</code>它指定链接目标的URL路径。标签内容为超链接的名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--主页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- target 属性定义了打开链接的方式，常用下面两个</span></span><br><span class="line"><span class="comment">        _self:在当前页面打开。</span></span><br><span class="line"><span class="comment">        _blank:在新页面打开。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;链接目标.html&quot;</span> <span class="attr">target</span> = <span class="string">&quot;_blank&quot;</span>&gt;</span> 这是一个超链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接目标页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>链接目标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是链接目标</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击前：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%B6%85%E9%93%BE%E6%8E%A5%E7%82%B9%E5%87%BB%E5%89%8D.png" alt="超链接点击前"></p><p>点击后：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%B6%85%E9%93%BE%E6%8E%A5%E7%82%B9%E5%87%BB%E5%90%8E.png" alt="超链接点击后"></p><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h3><p>​    表格由<code>&lt;table&gt;</code>标签来定义，使用<code>&lt;tr&gt;</code>定义行，在行中使用<code>th</code>定义表头，<code>td</code>定义单元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- border 表示边框宽度，width 为宽  height为长  align 表示位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1&quot;</span> <span class="attr">width</span> = <span class="string">&quot;500px&quot;</span> <span class="attr">height</span> = <span class="string">&quot;300px&quot;</span>  <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- colspan 表示跨列距离  rowspan表示跨行距离 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1 x 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2 x 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>31<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><h3 id="7-表单"><a href="#7-表单" class="headerlink" title="7.表单"></a>7.表单</h3><pre><code> 使用`&lt;form&gt;`制作表单，`&lt;input&gt;`表单项。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- action属性为提交的目标页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;提交页面.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- input 的不同type属性代表了不同的表单项样式 常用的有：</span></span><br><span class="line"><span class="comment">                 text：文本框</span></span><br><span class="line"><span class="comment">                  password：密码框</span></span><br><span class="line"><span class="comment">                radio：单选框</span></span><br><span class="line"><span class="comment">                checkbox：多选框</span></span><br><span class="line"><span class="comment">                  reset：重置按钮</span></span><br><span class="line"><span class="comment">                  submit：提交按钮</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- name属性才可以提交数据到目标位置 --&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- name属性相同的情况下视为同一范围内的选项 </span></span><br><span class="line"><span class="comment">            无value值时提交选中状态，有value值时提交value的值</span></span><br><span class="line"><span class="comment">            checked可以用来设置默认选中状态</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">              </span><br><span class="line">        爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>篮球</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>/&gt;</span>足球</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;volleyball&quot;</span>/&gt;</span>排球</span><br><span class="line">              <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 下拉框使用select定义 --&gt;</span></span><br><span class="line">    喜欢的明星：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fbb&quot;</span>&gt;</span>范冰冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zy&quot;</span>&gt;</span>杨颖<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zzy&quot;</span>&gt;</span>章子怡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按钮默认名称为重置/提交 可以通过value进行修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>提交页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>表单提交成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单效果：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E5%8D%95.png" alt="表单"></p><p>提交后后：</p><p>​    <img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4.png" alt="表单提交"></p><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>​    想要显示HTML的<strong>保留字符</strong>或<strong>特殊字符</strong>显示空格时需要使用到字符实体，HTML中的字符实体一般以<code>&amp;</code>符号开头，以<code>;</code>结尾，例如以下这些：需要注意的是字符实体是<strong>对大小写敏感</strong>的。</p><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">实体名称</th><th align="left">实体编号</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&nbsp;</td><td align="left">&#160;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&lt;</td><td align="left">&#60;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&gt;</td><td align="left">&#62;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;</td><td align="left">&#38;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&quot;</td><td align="left">&#34;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&apos; (IE不支持)</td><td align="left">&#39;</td></tr><tr><td align="left">￠</td><td align="left">分</td><td align="left">&cent;</td><td align="left">&#162;</td></tr><tr><td align="left">£</td><td align="left">镑</td><td align="left">&pound;</td><td align="left">&#163;</td></tr><tr><td align="left">¥</td><td align="left">人民币/日元</td><td align="left">&yen;</td><td align="left">&#165;</td></tr><tr><td align="left">€</td><td align="left">欧元</td><td align="left">&euro;</td><td align="left">&#8364;</td></tr><tr><td align="left">§</td><td align="left">小节</td><td align="left">&sect;</td><td align="left">&#167;</td></tr><tr><td align="left">©</td><td align="left">版权</td><td align="left">&copy;</td><td align="left">&#169;</td></tr><tr><td align="left">®</td><td align="left">注册商标</td><td align="left">&reg;</td><td align="left">&#174;</td></tr><tr><td align="left">™</td><td align="left">商标</td><td align="left">&trade;</td><td align="left">&#8482;</td></tr><tr><td align="left">×</td><td align="left">乘号</td><td align="left">&times;</td><td align="left">&#215;</td></tr><tr><td align="left">÷</td><td align="left">除号</td><td align="left">&divide;</td><td align="left">&#247;</td></tr></tbody></table><p>​    完整的HTML实体可以参考： <a href="https://www.runoob.com/tags/ref-entities.html">HTML 实体参考手册</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>字符实体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示小于号和大于号 --&gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span> br <span class="symbol">&amp;gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 在代码中编写的空格无法显示，想要显示需要使用字符实体 --&gt;</span></span><br><span class="line">    A            B <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    A<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>B</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/image/Web%E5%9F%BA%E7%A1%80%E4%B9%8BHTML/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.png" alt="字符实体"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>标签<strong>不区分大小写</strong>，但为了<strong>规范代码</strong>，请<strong>一律小写</strong>。</li><li>标签<strong>可以嵌套</strong>使用，但<strong>不可以交叉嵌套</strong>。</li><li>标签必须正确关闭，自结束标签为在起始标签中的标签名后加<code>/</code>虽然可以支持省略但不建议这样做，非自结束标签则记得写上结束标签。</li><li>属性必须要有值，且必须使用双引号，对于属性值中有双引号的情况可以使用单引号。</li><li>注释不能嵌套。</li><li>部分浏览器可以<strong>自动纠正</strong>一些不规范代码，如属性值无双引号，交叉嵌套的纠正等等，但一定<strong>不要依赖于这个功能</strong>。</li></ul><p><strong><em>以上内容仅作为入门，因为不是专业前端，所以可以在之后的学习中慢慢补充。</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;Web基础系列&lt;/strong&gt;主要对Java开发中Web相关的内容(如&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScrip&lt;/code&gt;t等)进行&lt;strong&gt;最基本的讲解&lt;/strong&gt;，本系列其他文章请参考&lt;a href=&quot;https://ykailh.github.io/tags/Web%E5%9F%BA%E7%A1%80/&quot;&gt;Web基础&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​    本文主要对&lt;code&gt;HTML&lt;/code&gt;进行简单的了解，想要更详细的了解HTML可以参考这个教程&lt;a href=&quot;https://www.runoob.com/html/html-tutorial.html&quot;&gt;HTML教程&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;​                                                                                                                                                        &lt;strong&gt;&lt;em&gt;基于HTML5演示&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web基础" scheme="http://yoursite.com/tags/Web%E5%9F%BA%E7%A1%80/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之函数</title>
    <link href="http://yoursite.com/2020/08/22/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/22/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-22T11:38:46.000Z</published>
    <updated>2020-09-03T03:00:56.702Z</updated>
    
    <content type="html"><![CDATA[<p>​    MySQL函数主要分为<strong>单行函数</strong>以及<strong>分组函数</strong>两种，其中单行函数又以作用对象不同分为字符串函数、数值函数等。以下按照类型进行演示。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><p>​    单行函数<strong>只对一行进行变换，每行返回一个结果</strong>，它的<strong>参数</strong>可以是一字段或一个表达式或一个值，可以<strong>嵌套使用</strong>。</p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><h4 id="1-查看ASCII-码、字符数、字节数"><a href="#1-查看ASCII-码、字符数、字节数" class="headerlink" title="1.查看ASCII 码、字符数、字节数"></a>1.查看ASCII 码、字符数、字节数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ASCII(s)</td><td>返回字符串 s 的第一个字符的 ASCII 码。</td></tr><tr><td>CHAR_LENGTH(s) / CHARACTER_LENGTH(s)</td><td>返回字符串 s 的字符数</td></tr><tr><td>LENGTH(s)</td><td>返回字符串 s 的字节数，与字符集有关</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ASCII(s) ,返回&quot;ykailh&quot;第一个字母的 ASCII 码</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ASCII</span>(<span class="string">&#x27;ykailh&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| ASCII(&#x27;ykailh&#x27;) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">|             121 |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CHAR_LENGTH(s)/CHARACTER_LENGTH(s)，返回&quot;张三&quot;的字符数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>),<span class="keyword">CHARACTER_LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line">| CHAR_LENGTH(&#x27;张三&#x27;)   | CHARACTER_LENGTH(&#x27;张三&#x27;)   |</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line">|                     2 |                          2 |</span><br><span class="line">+<span class="comment">-----------------------+----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LENGTH(s)，返回&quot;张三&quot;的字节数（UTF-8字符集）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| LENGTH(&#x27;张三&#x27;)   |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">|                6 |</span><br><span class="line">+<span class="comment">------------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串的拼接"><a href="#2-字符串的拼接" class="headerlink" title="2.字符串的拼接"></a>2.字符串的拼接</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>CONCAT(s1,s2…sn)</td><td>字符串 s1,s2 等多个字符串合并为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2…sn)</td><td>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td></tr><tr><td>LPAD(s1,len,s2)</td><td>在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len，若len小于s1的长度则裁剪掉超出len长度的部分。</td></tr><tr><td>RPAD(s1,len,s2)</td><td>在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len，若len小于s1的长度则裁剪掉超出len长度的部分。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CONCAT(s1,s2...sn)，拼接&#x27;hello&#x27;和&#x27;world&#x27;。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| CONCAT(&#x27;hello&#x27;,&#x27;world&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| helloworld              |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CONCAT_WS(x, s1,s2...sn)，拼接&#x27;ykailh&#x27;、&#x27;gethub&#x27;、&#x27;io&#x27;并以&#x27;.&#x27;作为间隔。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT_WS</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;ykailh&#x27;</span>,<span class="string">&#x27;gethub&#x27;</span>,<span class="string">&#x27;io&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| CONCAT_WS(&#x27;.&#x27;,&#x27;ykailh&#x27;,&#x27;gethub&#x27;,&#x27;io&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| ykailh.gethub.io                      |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LPAD(s1,len,s2) ,在&#x27;abc&#x27;前拼接&#x27;x&#x27;直到字符串的长度为6以及2.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;x&#x27;</span>),<span class="keyword">LPAD</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| LPAD(&#x27;abc&#x27;,6,&#x27;x&#x27;) | LPAD(&#x27;abc&#x27;,2,&#x27;x&#x27;) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| xxxabc            | ab                |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RPAD(s1,len,s2),在&#x27;abc&#x27;前拼接&#x27;x&#x27;直到字符串的长度为6以及2.</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;abc&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;x&#x27;</span>),RPAD(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| RPAD(&#x27;abc&#x27;,6,&#x27;x&#x27;) | RPAD(&#x27;abc&#x27;,2,&#x27;x&#x27;) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| abcxxx            | ab                |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br></pre></td></tr></table></figure><h4 id="3-子字符串的位置"><a href="#3-子字符串的位置" class="headerlink" title="3.子字符串的位置"></a>3.子字符串的位置</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>FIELD(s,s1,s2…)</td><td>返回第一个字符串 s 在字符串列表(s1,s2…)中的位置,没有则返回0</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回在字符串s2中与s1匹配的字符串的位置,s2中需以<code>,</code>作为字符串的间隔</td></tr><tr><td>LOCATE(s1,s)</td><td>从字符串 s 中获取 s1 的开始位置，无匹配则返回0</td></tr><tr><td>POSITION(s1 IN s)</td><td>从字符串 s 中获取 s1 的开始位置,效果与LOCATE(s1,s)相同</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#FIELD(s,s1,s2...)，返回&#x27;b&#x27;在&#x27;a&#x27;、&#x27;b&#x27;、&#x27;c&#x27;中的位置以及在&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;c&#x27;,&#x27;d&#x27;中的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">FIELD</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),<span class="keyword">FIELD</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line">| FIELD(&#x27;b&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;) | FIELD(&#x27;b&#x27;, &#x27;a&#x27;, &#x27;ab&#x27;, &#x27;c&#x27;,&#x27;d&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line">|                         2 |                              0 |</span><br><span class="line">+<span class="comment">---------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FIND_IN_SET(s1,s2)，返回&#x27;b&#x27;在&#x27;a,b,c&#x27;中的位置以及在&#x27;abc&#x27;中的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a,b,c&#x27;</span>),FIND_IN_SET(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line">| FIND_IN_SET(&#x27;b&#x27;,&#x27;a,b,c&#x27;) | FIND_IN_SET(&#x27;b&#x27;,&#x27;abc&#x27;) |</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line">|                        2 |                      0 |</span><br><span class="line">+<span class="comment">--------------------------+------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LOCATE(s1,s)/POSITION(s1 IN s)，获取&#x27;bc&#x27;在&#x27;abcd&#x27;中以及&#x27;ac&#x27;在&#x27;abcd&#x27;中开始的位置。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCATE</span>(<span class="string">&#x27;bc&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>),<span class="keyword">LOCATE</span>(<span class="string">&#x27;ac&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>),<span class="keyword">POSITION</span>(<span class="string">&#x27;bc&#x27;</span> <span class="keyword">IN</span> <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line">| LOCATE(&#x27;bc&#x27;,&#x27;abcd&#x27;) | LOCATE(&#x27;ac&#x27;,&#x27;abcd&#x27;) | POSITION(&#x27;bc&#x27; IN &#x27;abcd&#x27;) |</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line">|                   2 |                   0 |                        2 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+--------------------------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-获取子字符串"><a href="#4-获取子字符串" class="headerlink" title="4.获取子字符串"></a>4.获取子字符串</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>LEFT(s,n)</td><td>返回字符串 s 的前 n 个字符</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串 s 的后 n 个字符</td></tr><tr><td>MID(s,n,len)</td><td>从字符串 s 的 n 位置截取长度为 len 的子字符串，若从n开始到s结束长度不满足len则按实际长度存储，不会补空格。</td></tr><tr><td>SUBSTR(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串，同 MID(s,n,len)</td></tr><tr><td>SUBSTRING(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串，同 SUBSTRING(s,n,len)</td></tr><tr><td>SUBSTRING_INDEX(s, delimiter, number)</td><td>返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#LEFT(s,n)，返回&#x27;ykailh&#x27;的前两个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;ykailh&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| LEFT(&#x27;ykailh&#x27;,2) |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| yk               |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RIGHT(s,n)，获取&#x27;abcd&#x27;中的后2个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| RIGHT(&#x27;abcd&#x27;,2) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| cd              |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MID(s,n,len)/SUBSTR(s, start, length)/SUBSTRING(s, start, length)</span></span><br><span class="line"><span class="comment">#截取&#x27;ykailh&#x27;第1个字符开始，长度为4的字符串。</span></span><br><span class="line"><span class="comment">#截取&#x27;ykailh&#x27;第5个字符开始，长度为4的字符串，若从5开始不足长度4则按照实际保存，不会补空格。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MID</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">1</span>, <span class="number">4</span>),<span class="keyword">SUBSTR</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">5</span>, <span class="number">4</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">SUBSTRING</span>(<span class="string">&#x27;ykailh&#x27;</span>, <span class="number">8</span>, <span class="number">4</span>));</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line">| MID(&#x27;ykailh&#x27;, 1, 4) | SUBSTR(&#x27;ykailh&#x27;, 5, 4) | CHAR_LENGTH(SUBSTRING(&#x27;ykailh&#x27;, 8, 4)) |</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line">| ykai                | lh                     |                                      0 |</span><br><span class="line">+<span class="comment">---------------------+------------------------+----------------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#SUBSTRING_INDEX(s, delimiter, number)，</span></span><br><span class="line"><span class="comment">#分别返回&#x27;a*b*c&#x27;第一个&#x27;*&#x27;号左边的字符，倒数第一个&#x27;*&#x27;号右边的字符</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">&#x27;a*b*c&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="number">1</span>),SUBSTRING_INDEX(<span class="string">&#x27;a*b*c&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="number">-1</span>);</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br><span class="line">| SUBSTRING_INDEX(&#x27;a*b*c&#x27;,&#x27;*&#x27;,1) | SUBSTRING_INDEX(&#x27;a*b*c&#x27;,&#x27;*&#x27;,-1) |</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br><span class="line">| a                              | c                               |</span><br><span class="line">+<span class="comment">--------------------------------+---------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="5-字符串的替换"><a href="#5-字符串的替换" class="headerlink" title="5.字符串的替换"></a>5.字符串的替换</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>INSERT(s1,x,len,s2)</td><td>字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td></tr><tr><td>LCASE(s) / LOWER(s)</td><td>将字符串 s 的所有字母变成小写字母</td></tr><tr><td>UCASE(s) / UPPER(s)</td><td>将字符串 s 的所有字母变成大写字母</td></tr><tr><td>REPLACE(s,s1,s2)</td><td>将字符串 s2 替代字符串 s 中的字符串 s1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#INSERT(s1,x,len,s2)，用&#x27;abc&#x27;替换&#x27;123456789&#x27;中的部分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>),<span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line">| <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>) | <span class="keyword">INSERT</span>(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">&#x27;abc&#x27;</span>) |</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line">| abc23456789                   | abc789                        |</span><br><span class="line">+<span class="comment">-------------------------------+-------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LCASE(s)/LOWER(s)，将&#x27;aBCd&#x27;全部变为小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LCASE</span>(<span class="string">&#x27;aBCd&#x27;</span>),<span class="keyword">LOWER</span>(<span class="string">&#x27;aBCd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| LCASE(&#x27;aBCd&#x27;) | LOWER(&#x27;aBCd&#x27;) |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| abcd          | abcd          |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#UCASE(s)/UPPER(s)，将&#x27;aBCd&#x27;全部变为大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UCASE</span>(<span class="string">&#x27;aBCd&#x27;</span>),<span class="keyword">UPPER</span>(<span class="string">&#x27;aBCd&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| UCASE(&#x27;aBCd&#x27;) | UPPER(&#x27;aBCd&#x27;) |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line">| ABCD          | ABCD          |</span><br><span class="line">+<span class="comment">---------------+---------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#REPLACE(s,s1,s2) 将&#x27;123321&#x27;中的&#x27;2&#x27;替换为&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| <span class="keyword">REPLACE</span>(<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| <span class="number">1</span>b33b1                    |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="6-获取空格、删除两端空格、字符串"><a href="#6-获取空格、删除两端空格、字符串" class="headerlink" title="6.获取空格、删除两端空格、字符串"></a>6.获取空格、删除两端空格、字符串</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>SPACE(n)</td><td>返回 n 个空格</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串 s 开始处的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串 s 结尾处的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串 s 开始和结尾处的空格</td></tr><tr><td>TRIM(【BOTH 、LEADING、TRAILING】s1 FROM s)</td><td>去掉字符串s开始与结尾/开始/结尾的s1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SPACE(n)，在&#x27;a&#x27;&#x27;b&#x27;之间拼接5个空格。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;a&#x27;</span>,<span class="keyword">SPACE</span>(<span class="number">5</span>),<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#LTRIM(s)，去掉&#x27;  ykailh  &#x27;开头处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">LTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| LTRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(LTRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| ykailh              |                                8 |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RTRIM(s)，去掉&#x27;  ykailh  &#x27;结尾处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">RTRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">| RTRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(RTRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line">|   ykailh            |                                8 |</span><br><span class="line">+<span class="comment">---------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRIM(s)，去掉&#x27;  ykailh  &#x27;开头和结尾处的空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>),<span class="keyword">CHAR_LENGTH</span>(<span class="keyword">TRIM</span>(<span class="string">&#x27;  ykailh  &#x27;</span>));</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line">| TRIM(&#x27;  ykailh  &#x27;) | CHAR_LENGTH(TRIM(&#x27;  ykailh  &#x27;)) |</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line">| ykailh             |                               6 |</span><br><span class="line">+<span class="comment">--------------------+---------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRIM([BOTH 、LEADING、TRAILING] s1 FROM s),去掉&#x27;##ykailh##&#x27;开头和结尾/开头/结尾的&#x27;#&#x27;号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="keyword">BOTH</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>),<span class="keyword">TRIM</span>(<span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>);<span class="comment">#可以省略`BOTH`</span></span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line">| TRIM(BOTH &#x27;<span class="comment">#&#x27; FROM &#x27;##ykailh##&#x27;) | TRIM(&#x27;#&#x27; FROM &#x27;##ykailh##&#x27;) |</span></span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line">| ykailh                           | ykailh                      |</span><br><span class="line">+<span class="comment">----------------------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="keyword">LEADING</span> <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>),<span class="keyword">TRIM</span>(TRAILING <span class="string">&#x27;#&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;##ykailh##&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br><span class="line">| TRIM(LEADING &#x27;<span class="comment">#&#x27; FROM &#x27;##ykailh##&#x27;) | TRIM(TRAILING &#x27;#&#x27; FROM &#x27;##ykailh##&#x27;) |</span></span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br><span class="line">| ykailh<span class="comment">##                            | ##ykailh                             |</span></span><br><span class="line">+<span class="comment">-------------------------------------+--------------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="7-字符串的重复、翻转、比较"><a href="#7-字符串的重复、翻转、比较" class="headerlink" title="7.字符串的重复、翻转、比较"></a>7.字符串的重复、翻转、比较</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>REPEAT(s,n)</td><td>将字符串 s 重复 n 次</td></tr><tr><td>REVERSE(s)</td><td>将字符串s的顺序反过来</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#REPEAT(s,n)，将&#x27;abc&#x27;重复3次</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPEAT</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEAT(&#x27;abc&#x27;,3) |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| abcabcabc       |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#REVERSE(s)，将&#x27;abc&#x27;进行翻转</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| REVERSE(&#x27;abc&#x27;) |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| cba            |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#STRCMP(s1,s2)，分别比较&#x27;a&#x27;与&#x27;b&#x27;、&#x27;a&#x27;,&#x27;b&#x27;与&#x27;a&#x27;的大小</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STRCMP</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>),<span class="keyword">STRCMP</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>),<span class="keyword">STRCMP</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>); </span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br><span class="line">| STRCMP(&#x27;a&#x27;, &#x27;b&#x27;) | STRCMP(&#x27;a&#x27;, &#x27;a&#x27;) | STRCMP(&#x27;b&#x27;, &#x27;a&#x27;) |</span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br><span class="line">|               -1 |                0 |                1 |</span><br><span class="line">+<span class="comment">------------------+------------------+------------------+</span></span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><h4 id="1-幂相关"><a href="#1-幂相关" class="headerlink" title="1.幂相关"></a>1.幂相关</h4><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">EXP(x)</td><td align="left">返回 e 的 x 次方</td></tr><tr><td align="left">POW(x,y) / POWER(x,y)</td><td align="left">返回 x 的 y 次方</td></tr><tr><td align="left">SQRT(x)</td><td align="left">返回x的平方根</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#EXP(x)，获取e的3次方</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXP</span>(<span class="number">3</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| EXP(3)             |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 20.085536923187668 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#POW(x,y) / POWER(x,y) ，获取2的3次方，3的3次方</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">POW</span>(<span class="number">2</span>,<span class="number">3</span>),<span class="keyword">POWER</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">| POW(2,3) | POWER(3,3) |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">|        8 |         27 |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SQRT(x)，获取2的平方根,3的平方根</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SQRT</span>(<span class="number">2</span>),<span class="keyword">SQRT</span>(<span class="number">3</span>);</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| SQRT(2)            | SQRT(3)            |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 1.4142135623730951 | 1.7320508075688772 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-对数相关"><a href="#2-对数相关" class="headerlink" title="2.对数相关"></a>2.对数相关</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>LN(x) / LOG(x)</td><td>返回x的自然对数，以 e 为底。</td></tr><tr><td>LOG(base, x)</td><td>返回x的自然对数，以base为底。</td></tr><tr><td>LOG10(x)</td><td>返回以 10 为底的对数</td></tr><tr><td>LOG2(x)</td><td>返回以 2 为底的对数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回以e为底1的对数，4为底4的对数，10为底100的对数，2为底8的对数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LN</span>(<span class="number">1</span>),<span class="keyword">LOG</span>(<span class="number">4</span>,<span class="number">4</span>),<span class="keyword">LOG10</span>(<span class="number">100</span>),<span class="keyword">LOG2</span>(<span class="number">8</span>);</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br><span class="line">| LN(1) | LOG(4,4) | LOG10(100) | LOG2(8) |</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br><span class="line">|     0 |        1 |          2 |       3 |</span><br><span class="line">+<span class="comment">-------+----------+------------+---------+</span></span><br></pre></td></tr></table></figure><h4 id="3-绝对值、最值、近值"><a href="#3-绝对值、最值、近值" class="headerlink" title="3.绝对值、最值、近值"></a>3.绝对值、最值、近值</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回 x 的绝对值</td></tr><tr><td>GREATEST(expr1, expr2, expr3, …)</td><td>返回列表中的最大值</td></tr><tr><td>LEAST(expr1, expr2, expr3, …)</td><td>返回列表中的最小值</td></tr><tr><td>CEIL(x) / CEILING(x)</td><td>返回大于或等于 x 的最小整数（向上取整）</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于 x 的最大整数（向下取整）</td></tr><tr><td>ROUND(x)</td><td>返回离 x 最近的整数（只考虑十分位的四舍五入）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ABS(x)，返回-1,0,1，NULL的绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-1</span>),<span class="keyword">ABS</span>(<span class="number">0</span>),<span class="keyword">ABS</span>(<span class="number">1</span>),<span class="keyword">ABS</span>(<span class="literal">NULL</span>);</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line">| ABS(-1) | ABS(0) | ABS(1) | ABS(NULL) |</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line">|       1 |      0 |      1 |      NULL |</span><br><span class="line">+<span class="comment">---------+--------+--------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取1,6,8,0中的最大值与最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GREATEST</span>(<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>),<span class="keyword">LEAST</span>(<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line">| GREATEST(1, 6, 8, 0) | LEAST(1, 6, 8, 0) |</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line">|                    8 |                 0 |</span><br><span class="line">+<span class="comment">----------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分别相当于向上取整、向下取整和只考虑十分位的四舍五入</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">1.68</span>),<span class="keyword">CEILING</span>(<span class="number">1.32</span>),<span class="keyword">FLOOR</span>(<span class="number">1.68</span>),<span class="keyword">ROUND</span>(<span class="number">1.68</span>),<span class="keyword">ROUND</span>(<span class="number">1.32</span>);</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br><span class="line">| CEIL(1.68) | CEILING(1.32) | FLOOR(1.68) | ROUND(1.68) | ROUND(1.32) |</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br><span class="line">|          2 |             2 |           1 |           2 |           1 |</span><br><span class="line">+<span class="comment">------------+---------------+-------------+-------------+-------------+</span></span><br></pre></td></tr></table></figure><h4 id="4-取余、取符号、截取、随机数、格式化、圆周率"><a href="#4-取余、取符号、截取、随机数、格式化、圆周率" class="headerlink" title="4.取余、取符号、截取、随机数、格式化、圆周率"></a>4.取余、取符号、截取、随机数、格式化、圆周率</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>MOD(x,y)</td><td>返回 x 除以 y 以后的余数</td></tr><tr><td>SIGN(x)</td><td>返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td></tr><tr><td>RAND()</td><td>返回 0 到 1 的随机数</td></tr><tr><td>FORMAT(x,n)</td><td>函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td></tr><tr><td>PI()</td><td>返回圆周率(3.141593）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MOD(x,y)，获取5和2、-3和2、-3和-2相除的余数，</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">5</span>,<span class="number">2</span>),<span class="keyword">MOD</span>(<span class="number">-3</span>,<span class="number">2</span>),<span class="keyword">MOD</span>(<span class="number">-3</span>,<span class="number">-2</span>);</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line">| MOD(5,2) | MOD(-3,2) | MOD(-3,-2) |</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line">|        1 |        -1 |         -1 |</span><br><span class="line">+<span class="comment">----------+-----------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SIGN(x)，获取-6,0,8，NULL的符号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">-6</span>),<span class="keyword">SIGN</span>(<span class="number">0</span>),<span class="keyword">SIGN</span>(<span class="number">8</span>),<span class="keyword">SIGN</span>(<span class="literal">NULL</span>);</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line">| SIGN(-6) | SIGN(0) | SIGN(8) | SIGN(NULL) |</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line">|       -1 |       0 |       1 |       NULL |</span><br><span class="line">+<span class="comment">----------+---------+---------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TRUNCATE(x,y)，获取1.123、1.126截取两位小数后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.123</span>,<span class="number">2</span>),<span class="keyword">TRUNCATE</span>(<span class="number">1.126</span>,<span class="number">2</span>);</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">| <span class="keyword">TRUNCATE</span>(<span class="number">1.123</span>,<span class="number">2</span>) | <span class="keyword">TRUNCATE</span>(<span class="number">1.126</span>,<span class="number">2</span>) |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line">|              <span class="number">1.12</span> |              <span class="number">1.12</span> |</span><br><span class="line">+<span class="comment">-------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RAND()，获取一个0-1的随机数，获取一个0-100的随机整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>(),<span class="keyword">RAND</span>() * <span class="number">100</span> <span class="keyword">DIV</span> <span class="number">1</span>;</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| RAND()             | RAND() * 100 DIV 1 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 0.4843776090856433 |                 84 |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FORMAT(x,n)，将123456789.666格式化为&quot;#,###.##&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FORMAT</span>(<span class="number">123456789.666</span>, <span class="number">2</span>);</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| FORMAT(123456789.666, 2) |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| 123,456,789.67           |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PI()，获取圆周率</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PI</span>();</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| PI()     |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 3.141593 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><h4 id="5-三角函数相关"><a href="#5-三角函数相关" class="headerlink" title="5.三角函数相关"></a>5.三角函数相关</h4><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>SIN(x)</td><td>求正弦值(参数是弧度)</td><td><code>SELECT SIN(RADIANS(30)); -- 0.5</code></td></tr><tr><td>COS(x)</td><td>求余弦值(参数是弧度)</td><td><code>SELECT COS(2); -- -0.4161468365471424</code></td></tr><tr><td>TAN(x)</td><td>求正切值(参数是弧度)</td><td><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td></tr><tr><td>COT(x)</td><td>求余切值(参数是弧度)</td><td><code>SELECT COT(6);  -- -3.436353004180128</code></td></tr><tr><td>ASIN(x)</td><td>求反正弦值(参数是弧度)</td><td><code>SELECT ASIN(0.25); -- 0.25268025514207865</code></td></tr><tr><td>ACOS(x)</td><td>求反余弦值(参数是弧度)</td><td><code>SELECT ACOS(0.25); -- 1.318116071652818</code></td></tr><tr><td>ATAN(x)</td><td>求反正切值(参数是弧度)</td><td><code>SELECT ATAN(2.5); -- 1.1902899496825317</code></td></tr><tr><td>ATAN2(n, m)</td><td>求反正切值(参数是弧度)</td><td><code>SELECT ATAN2(-0.8, 2); -- -0.3805063771123649</code></td></tr><tr><td>DEGREES(x)</td><td>将弧度转换为角度</td><td><code>SELECT DEGREES(3.1415926535898) -- 180</code></td></tr><tr><td>RADIANS(x)</td><td>将角度转换为弧度</td><td><code>SELECT RADIANS(180) -- 3.1415926535898</code></td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><h4 id="1-系统时间"><a href="#1-系统时间" class="headerlink" title="1.系统时间"></a>1.系统时间</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>NOW()  / SYSDATE() / CURRENT_TIMESTAMP()/ LOCALTIME() / LOCALTIMESTAMP()</td><td>返回当前日期和时间</td></tr><tr><td>CURDATE() / CURRENT_DATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME() / CURRENT_TIME()</td><td>返回当前时间</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回当前日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>(),<span class="keyword">SYSDATE</span>(),<span class="keyword">CURRENT_TIMESTAMP</span>();</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| NOW()               | SYSDATE()           | CURRENT_TIMESTAMP() |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line">| 2020-08-21 20:41:34 | 2020-08-21 20:41:34 | 2020-08-21 20:41:34 |</span><br><span class="line">+<span class="comment">---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">#返回当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>(),<span class="keyword">CURRENT_DATE</span>();</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line">| CURDATE()  | CURRENT_DATE() |</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line">| 2020-08-21 | 2020-08-21     |</span><br><span class="line">+<span class="comment">------------+----------------+</span></span><br><span class="line"><span class="comment">#返回当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>(),<span class="keyword">CURRENT_TIME</span>();</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br><span class="line">| CURTIME() | CURRENT_TIME() |</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br><span class="line">| 20:43:42  | 20:43:42       |</span><br><span class="line">+<span class="comment">-----------+----------------+</span></span><br></pre></td></tr></table></figure><h4 id="2-提取日期信息"><a href="#2-提取日期信息" class="headerlink" title="2.提取日期信息"></a>2.提取日期信息</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>DATE(d)</td><td>从日期或日期时间表达式中提取日期值</td></tr><tr><td>LAST_DAY(d)</td><td>返回给给定日期的那一月份的最后一天</td></tr><tr><td>TIME(d)</td><td>提取传入表达式的时间部分</td></tr><tr><td>YEAR(d)</td><td>返回年份</td></tr><tr><td>QUARTER(d)</td><td>返回日期d是第几季节，返回 1 到 4</td></tr><tr><td>MONTH(d)</td><td>返回日期d中的月份值，1 到 12</td></tr><tr><td>MONTHNAME(d)</td><td>返回日期当中的月份名称，如 November</td></tr><tr><td>WEEK(d)</td><td>计算日期 d 是本年的第几个星期，范围是 0 到 53(默认一周从周日开始)</td></tr><tr><td>WEEKOFYEAR(d)</td><td>计算日期 d 是本年的第几个星期，范围是 0 到 53(默认一周从周1开始)</td></tr><tr><td>YEARWEEK(date, [mode])</td><td>返回年份及第几周（0到53），mode 可以设置一周的开始默认为周日， 0 表示周天，1表示周一，以此类推</td></tr><tr><td>DAYOFYEAR(d)</td><td>返回日期值 d 为本年第几天</td></tr><tr><td>DAY(d)/DAYOFMONTH(d)</td><td>返回日期值 d 为本月第几天</td></tr><tr><td>DAYNAME(d)</td><td>返回日期 d 是星期几，如 Monday,Tuesday</td></tr><tr><td>DAYOFWEEK(d)</td><td>日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td></tr><tr><td>WEEKDAY(d)</td><td>日期 d 是星期几，0 表示星期一，1 表示星期二</td></tr><tr><td>HOUR(t)</td><td>返回 t 中的小时值</td></tr><tr><td>MINUTE(t)</td><td>返回 t 中的分钟值</td></tr><tr><td>SECOND(t)</td><td>返回 t 中的秒钟值</td></tr><tr><td>MICROSECOND(date)</td><td>返回日期参数所对应的微秒数</td></tr><tr><td>EXTRACT(type FROM d)</td><td>从日期 d 中获取指定的值，type 指定返回的值。</td></tr></tbody></table><ul><li><code>EXTRACT(type FROM d)</code>中<code>type</code>可取的值：</li></ul><table><thead><tr><th>type</th><th>描述</th></tr></thead><tbody><tr><td>MICROSECOND</td><td>返回日期中的微秒</td></tr><tr><td>SECOND</td><td>返回日期中的秒</td></tr><tr><td>MINUTE</td><td>返回日期中的分</td></tr><tr><td>HOUR</td><td>返回日期中的时</td></tr><tr><td>DAY</td><td>返回日期中的天</td></tr><tr><td>WEEK</td><td>返回日期为当年的第几周</td></tr><tr><td>MONTH</td><td>返回日期中的月</td></tr><tr><td>QUARTER</td><td>返回日期中的季度</td></tr><tr><td>YEAR</td><td>返回日期中的年</td></tr><tr><td>SECOND_MICROSECOND</td><td>返回日期中的秒和微秒</td></tr><tr><td>MINUTE_MICROSECOND</td><td>返回日期中的分和微秒</td></tr><tr><td>MINUTE_SECOND</td><td>返回日期中的分和微秒</td></tr><tr><td>HOUR_MICROSECOND</td><td>返回日期中的小时和微秒</td></tr><tr><td>HOUR_SECOND</td><td>返回日期中的小时和秒</td></tr><tr><td>HOUR_MINUTE</td><td>返回日期中的小时和分</td></tr><tr><td>DAY_MICROSECOND</td><td>返回日期中的日和微秒</td></tr><tr><td>DAY_SECOND</td><td>返回日期中的日和秒</td></tr><tr><td>DAY_MINUTE</td><td>返回日期中的日和分</td></tr><tr><td>DAY_HOUR</td><td>返回日期中的日和时</td></tr><tr><td>YEAR_MONTH</td><td>返回日期中的年和月</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日期和时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">DATE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">LAST_DAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="built_in">TIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line">| DATE(&#x27;2020-08-21 20:41:34&#x27;) | LAST_DAY(&#x27;2020-08-21 20:41:34&#x27;) | TIME(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line">| 2020-08-21                  | 2020-08-31                      | 20:41:34                    |</span><br><span class="line">+<span class="comment">-----------------------------+---------------------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#年、季度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">QUARTER</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line">| YEAR(&#x27;2020-08-21 20:41:34&#x27;) | QUARTER(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line">|                        2020 |                              3 |</span><br><span class="line">+<span class="comment">-----------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),MONTHNAME(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line">| MONTH(&#x27;2020-08-21 20:41:34&#x27;) | MONTHNAME(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line">|                            8 | August                           |</span><br><span class="line">+<span class="comment">------------------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#周</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">WEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">WEEKOFYEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">YEARWEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line">| WEEK(&#x27;2020-08-21 20:41:34&#x27;) | WEEKOFYEAR(&#x27;2020-08-21 20:41:34&#x27;) | YEARWEEK(&#x27;2020-08-21 20:41:34&#x27;,1) |</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line">|                          33 |                                34 |                            202034 |</span><br><span class="line">+<span class="comment">-----------------------------+-----------------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFYEAR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAYOFMONTH</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line">| DAYOFYEAR(&#x27;2020-08-21 20:41:34&#x27;) | DAY(&#x27;2020-08-21 20:41:34&#x27;) | DAYOFMONTH(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line">|                              234 |                         21 |                                21 |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#星期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYNAME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">DAYOFWEEK</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">WEEKDAY</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line">| DAYNAME(&#x27;2020-08-21 20:41:34&#x27;) | DAYOFWEEK(&#x27;2020-08-21 20:41:34&#x27;) | WEEKDAY(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line">| Friday                         |                                6 |                              4 |</span><br><span class="line">+<span class="comment">--------------------------------+----------------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时、分、秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">MINUTE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">SECOND</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line">| HOUR(&#x27;2020-08-21 20:41:34&#x27;) | MINUTE(&#x27;2020-08-21 20:41:34&#x27;) | SECOND(&#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line">|                          20 |                            41 |                            34 |</span><br><span class="line">+<span class="comment">-----------------------------+-------------------------------+-------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#EXTRACT(type FROM d)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>( YEAR_MONTH <span class="keyword">FROM</span> <span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">EXTRACT</span>( DAY_HOUR <span class="keyword">FROM</span> <span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br><span class="line">| EXTRACT( YEAR_MONTH FROM &#x27;2020-08-21 20:41:34&#x27;) | EXTRACT( DAY_HOUR FROM &#x27;2020-08-21 20:41:34&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br><span class="line">|                                          202008 |                                          2120 |</span><br><span class="line">+<span class="comment">-------------------------------------------------+-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="3-日期的相关计算"><a href="#3-日期的相关计算" class="headerlink" title="3.日期的相关计算"></a>3.日期的相关计算</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ADDDATE(d,n)</td><td>计算起始日期 d 加上 n 天的日期</td></tr><tr><td>SUBDATE(d,n)</td><td>日期 d 减去 n 天后的日期</td></tr><tr><td>ADDTIME(t,n)</td><td>时间 t 加上 n 秒的时间</td></tr><tr><td>SUBTIME(t,n)</td><td>时间 t 减去 n 秒的时间</td></tr><tr><td>DATE_ADD(d，INTERVAL expr type)</td><td>计算起始日期 d 加上一个时间段后的日期</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)</td><td>计算起始日期 d 减去一个时间段后的日期</td></tr><tr><td>TIMESTAMP(expression, [interval])</td><td>单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td></tr><tr><td>PERIOD_DIFF(period1, period2)</td><td>返回两个时段之间的月份差值</td></tr><tr><td>PERIOD_ADD(period, number)</td><td>为 年-月 组合日期添加一个时段</td></tr><tr><td>DATEDIFF(d1,d2)</td><td>计算日期 d1，d2 之间相隔的天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>计算时间差值</td></tr></tbody></table><ul><li><code>DATE_ADD/DATE_SUB(d，INTERVAL expr type)</code>中type可取的值与<code>EXTRACT(type FROM d)</code>中的<code>type</code>一致</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增减天数，增加/减少5天</span></span><br><span class="line"><span class="keyword">SELECT</span> ADDDATE(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">5</span>),<span class="keyword">SUBDATE</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line">| ADDDATE(&#x27;2020-08-21 20:41:34&#x27;,5) | SUBDATE(&#x27;2020-08-21 20:41:34&#x27;,5) |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line">| 2020-08-26 20:41:34              | 2020-08-16 20:41:34              |</span><br><span class="line">+<span class="comment">----------------------------------+----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增减秒，增加/减少50秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ADDTIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">50</span>),<span class="keyword">SUBTIME</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="number">50</span>);</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line">| ADDTIME(&#x27;2020-08-21 20:41:34&#x27;,50) | SUBTIME(&#x27;2020-08-21 20:41:34&#x27;,50) |</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line">| 2020-08-21 20:42:24               | 2020-08-21 20:40:44               |</span><br><span class="line">+<span class="comment">-----------------------------------+-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增减日期，如增加5年、减少3月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="built_in">INTERVAL</span> <span class="number">5</span> <span class="keyword">YEAR</span>),<span class="keyword">DATE_SUB</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="built_in">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| DATE_ADD(&#x27;2020-08-21 20:41:34&#x27;,INTERVAL 5 YEAR) | DATE_SUB(&#x27;2020-08-21 20:41:34&#x27;,INTERVAL 3 MONTH) |</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| 2025-08-21 20:41:34                             | 2020-05-21 20:41:34                              |</span><br><span class="line">+<span class="comment">-------------------------------------------------+--------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TIMESTAMP(expression, [interval])</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TIMESTAMP</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="built_in">TIMESTAMP</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line">| TIMESTAMP(&#x27;2020-08-21 20:41:34&#x27;) | TIMESTAMP(&#x27;2020-08-21 20:41:34&#x27;,&#x27;6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line">| 2020-08-21 20:41:34              | 2020-08-22 02:41:34                        |</span><br><span class="line">+<span class="comment">----------------------------------+--------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PERIOD_DIFF(period1, period2),时段月份差</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PERIOD_DIFF</span>(<span class="number">202008</span>,<span class="number">202004</span>),<span class="keyword">PERIOD_DIFF</span>(<span class="number">201709</span>,<span class="number">202107</span>);</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line">| PERIOD_DIFF(202008,202004) | PERIOD_DIFF(201709,202107) |</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line">|                          4 |                        -46 |</span><br><span class="line">+<span class="comment">----------------------------+----------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#PERIOD_ADD(period, number)，时段添加</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PERIOD_ADD</span>(<span class="number">202008</span>,<span class="number">04</span>);</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">| PERIOD_ADD(202008,4) |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line">|               202012 |</span><br><span class="line">+<span class="comment">----------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#DATEDIFF(d1,d2)，日期天数差</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">&#x27;2017-09-16&#x27;</span>,<span class="string">&#x27;2021-07-01&#x27;</span>),<span class="keyword">DATEDIFF</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;2020-04-30 6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line">| DATEDIFF(&#x27;2017-09-16&#x27;,&#x27;2021-07-01&#x27;) | DATEDIFF(&#x27;2020-08-21 20:41:34&#x27;,&#x27;2020-04-30 6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line">|                               -1384 |                                                  113 |</span><br><span class="line">+<span class="comment">-------------------------------------+------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TIMEDIFF(time1, time2)，时间差，最大值为 838:59:59</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIMEDIFF</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;2020-08-19 6:00:00&#x27;</span>),<span class="keyword">TIMEDIFF</span>(<span class="string">&#x27;20:41:34&#x27;</span>,<span class="string">&#x27;6:00:00&#x27;</span>);</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line">| TIMEDIFF(&#x27;2020-08-21 20:41:34&#x27;,&#x27;2020-08-19 6:00:00&#x27;) | TIMEDIFF(&#x27;20:41:34&#x27;,&#x27;6:00:00&#x27;) |</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line">| 62:41:34                                             | 14:41:34                       |</span><br><span class="line">+<span class="comment">------------------------------------------------------+--------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-日期格式转换"><a href="#4-日期格式转换" class="headerlink" title="4.日期格式转换"></a>4.日期格式转换</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>MAKEDATE(year, day-of-year)</td><td>基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td></tr><tr><td>MAKETIME(hour, minute, second)</td><td>组合时间，参数分别为小时、分钟、秒</td></tr><tr><td>TO_DAYS(d)</td><td>计算日期 d 距离 0000 年 1 月 1 日的天数</td></tr><tr><td>FROM_DAYS(n)</td><td>计算从 0000 年 1 月 1 日开始 n 天后的日期</td></tr><tr><td>TIME_TO_SEC(t)</td><td>将时间 t 转换为秒</td></tr><tr><td>SEC_TO_TIME(s)</td><td>将以秒为单位的时间 s 转换为时分秒的格式</td></tr><tr><td>TIME_FORMAT(t,f)</td><td>按表达式 f的要求显示日期 t</td></tr><tr><td>DATE_FORMAT(d,f)</td><td>按表达式 f的要求显示日期 d</td></tr><tr><td>STR_TO_DATE(string, format_mask)</td><td>将字符串转变为日期</td></tr></tbody></table><p><code>DATE_FORMAT(datetime,fmt) </code>等的<strong>格式符及含义：</strong></p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份（01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数（1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制（01,02..）</td><td>%h和%I</td><td>两位数字表示小时，12小时制（01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制（1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数(0=Sunday,1=Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MAKEDATE(year, day-of-year)，将2020年的第100天转换成日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAKEDATE</span>(<span class="number">2020</span>,<span class="number">100</span>);</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| MAKEDATE(2020,100) |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 2020-04-09         |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MAKETIME(hour, minute, second)，将时分秒组合成时间，超出单位上限则返回NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAKETIME</span>(<span class="number">20</span>,<span class="number">41</span>,<span class="number">34</span>),<span class="keyword">MAKETIME</span>(<span class="number">20</span>,<span class="number">61</span>,<span class="number">34</span>);</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| MAKETIME(20,41,34) | MAKETIME(20,61,34) |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line">| 20:41:34           | NULL               |</span><br><span class="line">+<span class="comment">--------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参考0000年1月1日的天数和日期的转换</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TO_DAYS</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>),<span class="keyword">FROM_DAYS</span>(<span class="number">738023</span>);</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line">| TO_DAYS(&#x27;2020-08-21 20:41:34&#x27;) | FROM_DAYS(738023) |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line">|                         738023 | 2020-08-21        |</span><br><span class="line">+<span class="comment">--------------------------------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间与秒的转换</span></span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(<span class="string">&#x27;20:41:34&#x27;</span>),<span class="keyword">SEC_TO_TIME</span>(<span class="number">74494</span>);</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line">| TIME_TO_SEC(&#x27;20:41:34&#x27;) | SEC_TO_TIME(74494) |</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line">|                   74494 | 20:41:34           |</span><br><span class="line">+<span class="comment">-------------------------+--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIME_FORMAT</span>(<span class="string">&#x27;20:41:34&#x27;</span>,<span class="string">&#x27;%h:%i:%s %p&#x27;</span>),<span class="keyword">DATE_FORMAT</span>(<span class="string">&#x27;2020-08-21 20:41:34&#x27;</span>,<span class="string">&#x27;%M %D %Y %T&#x27;</span>);</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| TIME_FORMAT(&#x27;20:41:34&#x27;,&#x27;%h:%i:%s %p&#x27;) | DATE_FORMAT(&#x27;2020-08-21 20:41:34&#x27;,&#x27;%M %D %Y %T&#x27;) |</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line">| 08:41:34 PM                           | August 21st 2020 20:41:34                        |</span><br><span class="line">+<span class="comment">---------------------------------------+--------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将字符串转换为日期时间格式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;08:41:34 PM&#x27;</span>, <span class="string">&#x27;%h:%i:%s %p&#x27;</span>),<span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;August 21st 2020 20:41:34&#x27;</span>, <span class="string">&#x27;%M %D %Y %T&#x27;</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br><span class="line">| STR_TO_DATE(&#x27;08:41:34 PM&#x27;, &#x27;%h:%i:%s %p&#x27;) | STR_TO_DATE(&#x27;August 21st 2020 20:41:34&#x27;, &#x27;%M %D %Y %T&#x27;) |</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br><span class="line">| 20:41:34                                  | 2020-08-21 20:41:34                                     |</span><br><span class="line">+<span class="comment">-------------------------------------------+---------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,t ,f)</td><td>如果value是真，返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN result1 WHEN 条件2 THEN result2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE  expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示先创建一个员工表，包含id，薪资，级别三个字段,并添加5条数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees(</span><br><span class="line">    uid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">    salary <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">UNSIGNED</span>,</span><br><span class="line">    <span class="keyword">level</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">6000</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">12000</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">13000</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">21000</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">8500</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#IF(value,t ,f)，查询员工薪资是否大于一万</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IF</span>(salary&gt;<span class="number">10000</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;否&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;薪资是否大于一万&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line">| uid  | 薪资是否大于一万         |</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line">|    1 | 否                       |</span><br><span class="line">|    2 | 是                       |</span><br><span class="line">|    3 | 是                       |</span><br><span class="line">|    4 | 是                       |</span><br><span class="line">|    5 | 否                       |</span><br><span class="line">+<span class="comment">------+--------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#IFNULL(value1, value2)，查询员工等级，若为NULL则显示为0</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">4500</span>,<span class="literal">NULL</span>);<span class="comment">#添加一条员工信息方便演示</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) <span class="keyword">AS</span> <span class="string">&#x27;员工等级&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| uid  | 员工等级     |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">|    1 |            1 |</span><br><span class="line">|    2 |            3 |</span><br><span class="line">|    3 |            3 |</span><br><span class="line">|    4 |            4 |</span><br><span class="line">|    5 |            2 |</span><br><span class="line">|    6 |            0 |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line"><span class="comment">#按照薪资范围添加描述</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,salary <span class="keyword">AS</span> <span class="string">&#x27;工资&#x27;</span>,<span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高薪&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;=<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;潜力股&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;屌丝&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;描述&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line">| uid  | 工资     | 描述      |</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line">|    1 |  6000.00 | 屌丝      |</span><br><span class="line">|    2 | 12000.00 | 潜力股    |</span><br><span class="line">|    3 | 13000.00 | 潜力股    |</span><br><span class="line">|    4 | 21000.00 | 高薪      |</span><br><span class="line">|    5 |  8500.00 | 屌丝      |</span><br><span class="line">|    6 |  4500.00 | 屌丝      |</span><br><span class="line">+<span class="comment">------+----------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照等级发放不同比例的奖金</span></span><br><span class="line"><span class="keyword">SELECT</span> uid,<span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) <span class="keyword">AS</span> <span class="string">&#x27;员工等级&#x27;</span>,<span class="keyword">CASE</span> <span class="keyword">IFNULL</span>(<span class="keyword">level</span>,<span class="number">0</span>) </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span>  salary*<span class="number">5</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> salary*<span class="number">3</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> salary*<span class="number">2</span></span><br><span class="line"><span class="keyword">ELSE</span> salary <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;奖金&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br><span class="line">| uid  | 员工等级     | 奖金      |</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br><span class="line">|    1 |            1 |   6000.00 |</span><br><span class="line">|    2 |            3 |  36000.00 |</span><br><span class="line">|    3 |            3 |  39000.00 |</span><br><span class="line">|    4 |            4 | 105000.00 |</span><br><span class="line">|    5 |            2 |  17000.00 |</span><br><span class="line">|    6 |            0 |   4500.00 |</span><br><span class="line">+<span class="comment">------+--------------+-----------+</span></span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>database()</td><td>返回当前数据库名</td></tr><tr><td>version()</td><td>返回当前数据库版本</td></tr><tr><td>user()</td><td>返回当前登录用户名</td></tr><tr><td>password(str)</td><td>返回字符串str的加密版本，41位长的字符串</td></tr><tr><td>md5(str)</td><td>返回字符串str的md5值，也是一种加密方式</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">database</span>() <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,<span class="keyword">version</span>() <span class="keyword">AS</span> <span class="string">&#x27;数据库版本&#x27;</span>,<span class="keyword">user</span>() <span class="keyword">AS</span> <span class="string">&#x27;当前用户名&#x27;</span>;</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line">| 数据库名     | 数据库版本      | 当前用户名      |</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line">| test         | 5.7.31-log      | root@localhost  |</span><br><span class="line">+<span class="comment">--------------+-----------------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般用于存储密码时加密，同一个字段只推荐使用同一种加密方式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">password</span>(<span class="number">123456</span>),<span class="keyword">md5</span>(<span class="number">123456</span>);</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br><span class="line">| password(123456)                          | md5(123456)                      |</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br><span class="line">| *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+<span class="comment">-------------------------------------------+----------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><p>​    区别于单行函数，分组函数一般以字段作为参数而只返回一个结果。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>AVG(expression)</td><td>返回一个表达式的平均值，expression 是一个字段</td></tr><tr><td>COUNT(expression)</td><td>返回查询的记录总数，expression 参数是一个字段或者 * 号</td></tr><tr><td>MAX(expression)</td><td>返回字段 expression 中的最大值</td></tr><tr><td>MIN(expression)</td><td>返回字段 expression 中的最小值</td></tr><tr><td>SUM(expression)</td><td>返回指定字段的总和</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依然使用上面建的employees表进行演示</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;平均工资&#x27;</span>,<span class="keyword">MAX</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最高工资&#x27;</span>,<span class="keyword">MIN</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;最低工资&#x27;</span>,<span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> <span class="string">&#x27;工资总和&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line">| 平均工资     | 最高工资     | 最低工资     | 工资总和     |</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line">| 10833.333333 |     21000.00 |      4500.00 |     65000.00 |</span><br><span class="line">+<span class="comment">--------------+--------------+--------------+--------------+</span></span><br><span class="line"><span class="comment">#COUNT(expression) 参数为*时统计所以记录，参数为字段名时除去该字段为NULL的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&#x27;员工总数&#x27;</span>,<span class="keyword">COUNT</span>(<span class="keyword">level</span>) <span class="keyword">AS</span> <span class="string">&#x27;用于等级的员工总数&#x27;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br><span class="line">| 员工总数     | 用于等级的员工总数          |</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br><span class="line">|            6 |                           5 |</span><br><span class="line">+<span class="comment">--------------+-----------------------------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    MySQL函数主要分为&lt;strong&gt;单行函数&lt;/strong&gt;以及&lt;strong&gt;分组函数&lt;/strong&gt;两种，其中单行函数又以作用对象不同分为字符串函数、数值函数等。以下按照类型进行演示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SQL函数" scheme="http://yoursite.com/tags/SQL%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之SQL语法(DML)</title>
    <link href="http://yoursite.com/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/"/>
    <id>http://yoursite.com/2020/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/</id>
    <published>2020-08-21T10:36:43.000Z</published>
    <updated>2020-09-03T02:54:43.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h2><p>​    根据SQL语句的<strong>作用</strong>将SQL语句分为<strong>三大类：</strong></p><ul><li>DDL —  数据定义语言（Data Define Language）<a href="https://ykailh.github.io/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/">DDL链接</a></li><li>DML — 数据操纵语言（Data Manipulation Language）</li><li>DCL —  数据控制语言（Data Control Language）</li></ul><p><strong>本文主要讲解DML</strong>，DML语句一般用于对<strong>数据</strong>进行增删改查，对应于<code>INSERT（新增）</code>、<code>DELETE（删除）</code>、<code>UPDATE（更新）</code>、<code>SELECT（查询）</code>。</p><a id="more"></a><p>​                                                                                                                        <strong><em>使用MySQL5.7演示</em></strong></p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>​    <strong>用于插入数据</strong></p><p>​    格式：<code>INSERT INTO [数据库名.]表名[(字段列表)] VALUES(数据列表),(数据列表二)....; </code></p><p><strong>注意事项：</strong></p><ul><li><p>在已经使用（<code>USE</code>）数据库的情况下对<strong>本数据库的表</strong>插入数据可以省略[<code>数据库名.</code>]，下面类似情况不再强调。</p></li><li><p>数据列表要与字段列表<strong>一 一对应</strong>，字段/数据之间使用<code>,</code>隔开。</p></li><li><p>若<strong>省略字段列表则默认为全部字段</strong>。</p></li><li><p>可以<strong>同时添加多组数据</strong>，将同组数据写在同一<code>()</code>内，并以<code>,</code>间隔开。</p></li><li><p>对于<strong>含有默认值的字段</strong>，若想在插入数据时<strong>使用默认值</strong>可以在数据列表的<strong>对应位置</strong>中用<code>DEFAULT</code>。</p></li><li><p>对于字段列表外的字段的数值，若该字段有默认值则为默认值，若没有默认值则为NULL。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个表格用于测试</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> avengers(</span><br><span class="line">            <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">            <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">            race <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;其他&#x27;</span>,</span><br><span class="line">            fighting_capacity <span class="built_in">INT</span> </span><br><span class="line">            );</span><br><span class="line"><span class="comment">#未指定字段列表，默认为全字段,含有默认值的字段可以使用DEFAULT代替</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;钢铁侠&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">12000</span>),(<span class="number">2</span>,<span class="string">&#x27;幻视&#x27;</span>,<span class="keyword">DEFAULT</span>,<span class="number">8000</span>);</span><br><span class="line"><span class="comment">#给自定字段赋值，同一行中未赋值的有默认值为默认值，没有则为NULL</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;雷神&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询表验证</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠     | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视       | 其他   |              8000 |</span><br><span class="line">|    3 | 雷神       | 其他   |              NULL |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>​    <strong>用于删除表中数据</strong></p><p>​    格式：<code>DELETE FROM [数据库名.]表名称 [WHERE 条件]</code></p><p><strong>注意事项：</strong></p><ul><li>若语句中没有写<code>WHERE 条件</code>会将<strong>整个表的数据删除</strong>，但会<strong>保留表结构</strong>，务必<strong>谨慎使用</strong>。</li><li>删除条件恒为真时效果相当于不写条件，例如<code>DELETE FROM [数据库名.]表名称 WHERE 2 &gt; 1</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除avengers表中Fighting_capacity字段值为NULL的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> avengers <span class="keyword">where</span> Fighting_capacity <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠    | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视      | 其他   |              8000 |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不写条件则会把表清空</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> avengers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只清空了数据，表依然保留在数据库中。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| avengers       |      |</span><br><span class="line">+<span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p><strong>用于修改表中数据</strong></p><p>​    格式：<code>UPDATE [数据库名.]表名称 SET 字段名 = 新值，字段名2 = 新值 ... [WHERE 条件]</code></p><p><strong>注意事项：</strong></p><ul><li>若语句中没有写<code>WHERE 条件</code>会将<strong>修改所有该字段的值</strong>，务必<strong>谨慎使用</strong>。</li><li>删除条件恒为真时效果相当于不写条件，例如<code>UPDATE.... WHERE 1</code>。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#演示DELETE时清空了表格的数据，先添加回来</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;钢铁侠&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;幻视&#x27;</span>,<span class="keyword">DEFAULT</span>,<span class="number">8000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;雷神&#x27;</span>,<span class="string">&#x27;神族&#x27;</span>,<span class="number">14000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">| id   | name      | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠    | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视      | 其他   |              8000 |</span><br><span class="line">|    3 | 雷神      | 神族   |             14000 |</span><br><span class="line">+<span class="comment">------+-----------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将雷神的name改为觉醒雷神，Fighting_capacity增加6000；</span></span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">&#x27;觉醒雷神&#x27;</span>, fighting_capacity = fighting_capacity +<span class="number">6000</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;雷神&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             12000 |</span><br><span class="line">|    2 | 幻视         | 其他   |              8000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             20000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不写条件则会改变整个字段的值，下面语句将fighting_capacity字段的值都增加3000</span></span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> fighting_capacity = fighting_capacity +<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p><strong>用于查询数据</strong></p><p>​    格式：<code>SELECT 查询内容 [FROM 查询范围] [WHERE 筛选条件] [GROUP BY 分组依据] [HAVING 分组后的筛选] [ORDER BY 排序] [LIMIT 获取行的数量]</code></p><h3 id="1-SELECT的六大子句"><a href="#1-SELECT的六大子句" class="headerlink" title="1.SELECT的六大子句"></a>1.SELECT的六大子句</h3><p>​    <strong>若子句同时出现需要严格按照以下顺序：</strong></p><ul><li><p><code>FROM</code></p><p><code>FROM</code>后面跟的是查询范围，一般为多行多列的结构，比如表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如上面查询整个表格的信息所使用到的，查询avengers表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>WHERE</code></p><p><code>WHERE</code>后跟的内容为筛选条件，注意不能使用分组函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询avengers表中fighting_capacity字段值大于12000的所有字段信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &gt; <span class="number">12000</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>GROUP BY</code></p><p><code>GROUP BY</code>后跟的内容为分组的信息，一般为一个或多个字段。需要注意的是查询内容尽量不要出现与分组后的内容无关的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示在avengers添加字段did表示所属组织的id号,并添加一些信息</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> avengers <span class="keyword">ADD</span> did <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> did = <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> avengers <span class="keyword">SET</span> did = <span class="number">2</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;绿巨人&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">13000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;猩红女巫&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">20000</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;星爵&#x27;</span>,<span class="string">&#x27;神族&#x27;</span>,<span class="number">6000</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;美国队长&#x27;</span>,<span class="string">&#x27;人类&#x27;</span>,<span class="number">10000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">#修改后的表格</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后分组依据字段只出现唯一的值，例如查询以did分组后的did字段</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| did  |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|    1 |</span><br><span class="line">|    2 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#但上面的作用不太明显，一般会配合筛选函数使用，如下是以did为分组并统计不同did的行数总和。</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;组织人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did;</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line">| 组织id   | 组织人数     |</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line">|        1 |            4 |</span><br><span class="line">|        2 |            3 |</span><br><span class="line">+<span class="comment">----------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#GROUP BY 后还可以跟多个字段，分组的依据为字段的组合为唯一，类似于复合唯一键的约束效果。</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, race <span class="keyword">AS</span> <span class="string">&#x27;种族&#x27;</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did, race;</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| 组织id   | 种族   | 人数   |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|        1 | 人类   |      2 |</span><br><span class="line">|        1 | 其他   |      1 |</span><br><span class="line">|        1 | 神族   |      1 |</span><br><span class="line">|        2 | 人类   |      1 |</span><br><span class="line">|        2 | 其他   |      1 |</span><br><span class="line">|        2 | 神族   |      1 |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>HAVING</code></p><p>在分组后再次对分组的结果进行筛选，和<code>WHERE</code>的最大区别是<code>HAVING</code>可以使用分组函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如在以did和race分组后筛选did值为1的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">AS</span> <span class="string">&quot;组织id&quot;</span>, race <span class="keyword">AS</span> <span class="string">&#x27;种族&#x27;</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">&quot;人数&quot;</span> <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did, race <span class="keyword">HAVING</span> did = <span class="number">1</span>;</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| 组织id   | 种族   | 人数   |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|        1 | 人类   |      2 |</span><br><span class="line">|        1 | 其他   |      1 |</span><br><span class="line">|        1 | 神族   |      1 |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>ORDER BY</code></p><p>​    用于将数据进行排序，格式为：<code>ORDER BY 字段名 升序/降序</code>,<code>DESC</code>为降序，<code>ASC</code>为升序，默认为升序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所有成员信息 按照fighting_capacity 进行升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> fighting_capacity;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ORDER BY后可以跟多个排序字段，并可分别指定升降序，后面的排序是在前面排序的结果上进行排序的。</span></span><br><span class="line"><span class="comment">#例如查询所有成员信息 按照did进行升序排列的情况下按照fighting_capacity进行降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> did <span class="keyword">ASC</span>,fighting_capacity <span class="keyword">DESC</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>LIMIT</code></p><p>用于指定取数据的行数以及数量，格式：<code>LIMIT 开始取数据的行数，取数据的数量</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在按照fighting_capacity排序的情况下取前三条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">ORDER</span> <span class="keyword">BY</span> fighting_capacity <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-关联查询"><a href="#2-关联查询" class="headerlink" title="2.关联查询"></a>2.关联查询</h3><p>​    关联查询是指在查询两个或两个表以上的关联数据，用于规定筛选范围，所以语句在<code>FROM</code>从句后。</p><p>以两个表为例一共有以下七种情况：</p><p><img src="/image/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DML)/%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="关联查询示意图"></p><p>​    按照表的连接关系进行讲解，为了方便演示定义一个组织表department 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了方便演示，向添加avengers表中添加两条数据，并创建department表。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> avengers <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;黑豹&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">13000</span>,<span class="literal">NULL</span>),(<span class="number">9</span>,<span class="string">&#x27;灭霸&#x27;</span>,<span class="string">&#x27;其他&#x27;</span>,<span class="number">30000</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">    did <span class="built_in">INT</span>, <span class="comment">#组织编号</span></span><br><span class="line">    dname <span class="built_in">VARCHAR</span>(<span class="number">10</span>), <span class="comment">#组织名</span></span><br><span class="line">    ddescribe <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="comment">#组织描述</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;初代复仇者&#x27;</span>,<span class="string">&#x27;包含复仇者联盟的最初六人&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;新复仇者&#x27;</span>,<span class="string">&#x27;除复联最初六人外的成员&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;测试did为5&#x27;</span>,<span class="string">&#x27;没有成员属于这个组织&#x27;</span>),</span><br><span class="line">(<span class="literal">NULL</span>,<span class="string">&#x27;测试did为NULL&#x27;</span>,<span class="string">&#x27;did为NULL&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>INNER JOIN</code></p><p>内连接，可以实现查询A∩B的效果，格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若涉及到重名的字段列表则需要全写为 表名.字段名</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询英雄以did作为关联条件进行内连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">| id   | name         | did  | dname           |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者      |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者        |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者      |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者      |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者        |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者        |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者      |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>LEFT JOIN</code></p><p>左外连接，可以实现<code>A</code>以及<code>A - A∩B</code>的效果，格式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现查询结果是A</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现A -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A示例，与内连接最大的不同是以A中的did为主进行匹配，可以查询出did不匹配部分的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">| id   | name         | did  | dname           |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者      |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者      |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者      |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者      |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者        |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者        |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者        |</span><br><span class="line">|    8 | 黑豹         | NULL | NULL            |</span><br><span class="line">|    9 | 灭霸         |    3 | NULL            |</span><br><span class="line">+<span class="comment">------+--------------+------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#A - A∩B 示例，将两者上面查询的两种结果相减则</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"><span class="keyword">WHERE</span> department.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br><span class="line">| id   | name   | did  | dname |</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br><span class="line">|    8 | 黑豹   | NULL | NULL  |</span><br><span class="line">|    9 | 灭霸   |    3 | NULL  |</span><br><span class="line">+<span class="comment">------+--------+------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>RIGHT JOIN</code></p><p>左外连接，可以实现<code>B</code>以及<code>B - A∩B</code>的效果，格式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现查询结果是B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现B -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#查询B，为了更好显示效果将左外连接的语句中avengers.did修改为department.did</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  | id   | name         | did  | dname            |</span><br><span class="line">  +<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  |    1 | 钢铁侠       |    1 | 初代复仇者       |</span><br><span class="line">  |    2 | 幻视         |    2 | 新复仇者         |</span><br><span class="line">  |    3 | 觉醒雷神     |    1 | 初代复仇者       |</span><br><span class="line">  |    4 | 绿巨人       |    1 | 初代复仇者       |</span><br><span class="line">  |    5 | 猩红女巫     |    2 | 新复仇者         |</span><br><span class="line">  |    6 | 星爵         |    2 | 新复仇者         |</span><br><span class="line">  |    7 | 美国队长     |    1 | 初代复仇者       |</span><br><span class="line">  | NULL | NULL         |    5 | 测试did为5       |</span><br><span class="line">  | NULL | NULL         | NULL | 测试did为NULL    |</span><br><span class="line">  +<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#实现B -  A∩B</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line">   <span class="keyword">WHERE</span> avengers.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">   +<span class="comment">------+------+------+------------------+</span></span><br><span class="line">  | id   | name | did  | dname            |</span><br><span class="line">  +<span class="comment">------+------+------+------------------+</span></span><br><span class="line">  | NULL | NULL |    5 | 测试did为5       |</span><br><span class="line">  | NULL | NULL | NULL | 测试did为NULL    |</span><br><span class="line">  +<span class="comment">------+------+------+------------------+</span></span><br></pre></td></tr></table></figure></li><li><p><code>FULL OUTER JOIN</code></p><p>全外连接，可以实现<code>A∪B</code>以及<code>A∪B - A∩B</code>，MySQL暂不支持，但能通过<code>UNION</code>实现一样的效果，<code>UNION</code>的作用为合并两个查询结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现A∪B，使用 A的结果 UNION B的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现A∪B -  A∩B，使用 (A -  A∩B)的结果  UNION （B - A∩B）的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"> UNION </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 关联字段 <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A∪B,查询所以</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"></span><br><span class="line"> <span class="keyword">UNION</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did;</span><br><span class="line"></span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">| id   | name         | did  | dname            |</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line">|    1 | 钢铁侠       |    1 | 初代复仇者       |</span><br><span class="line">|    3 | 觉醒雷神     |    1 | 初代复仇者       |</span><br><span class="line">|    4 | 绿巨人       |    1 | 初代复仇者       |</span><br><span class="line">|    7 | 美国队长     |    1 | 初代复仇者       |</span><br><span class="line">|    2 | 幻视         |    2 | 新复仇者         |</span><br><span class="line">|    5 | 猩红女巫     |    2 | 新复仇者         |</span><br><span class="line">|    6 | 星爵         |    2 | 新复仇者         |</span><br><span class="line">|    8 | 黑豹         | NULL | NULL             |</span><br><span class="line">|    9 | 灭霸         |    3 | NULL             |</span><br><span class="line">| NULL | NULL         |    5 | 测试did为5       |</span><br><span class="line">| NULL | NULL         | NULL | 测试did为NULL    |</span><br><span class="line">+<span class="comment">------+--------------+------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#A∪B -  A∩B</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,avengers.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"><span class="keyword">WHERE</span> department.did <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">UNION</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span>,department.did,dname <span class="keyword">FROM</span> avengers <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> department <span class="keyword">ON</span> avengers.did = department.did</span><br><span class="line"> <span class="keyword">WHERE</span> avengers.did <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"> +<span class="comment">------+--------+------+------------------+</span></span><br><span class="line">| id   | name   | did  | dname            |</span><br><span class="line">+<span class="comment">------+--------+------+------------------+</span></span><br><span class="line">|    8 | 黑豹   | NULL | NULL             |</span><br><span class="line">|    9 | 灭霸   |    3 | NULL             |</span><br><span class="line">| NULL | NULL   |    5 | 测试did为5       |</span><br><span class="line">| NULL | NULL   | NULL | 测试did为NULL    |</span><br><span class="line">+<span class="comment">------+--------+------+------------------+</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>补充</p><ul><li>关联查询时可以用<code>表名 AS 别名</code>的方式用别名代替表名。</li><li>关联的两个表可以为同一个表，这样操作时一定要使用别名区分。</li></ul></li></ul><h3 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h3><p>​    嵌套在另一个查询中的查询，根据位置不同，分为：</p><ul><li><p><code>WHERE</code>型</p><p>①子查询是单值结果，那么可以对其使用（=，&gt;等比较运算符）</p><p>②子查询是多值结果，那么可对其使用（【not】in(子查询结果)，或 &gt;all(子查询结果)，或&gt;=all(子查询结果)，&lt;all(子查询结果)，&lt;=all（子查询结果)，或 &gt;any(子查询结果)，或&gt;=any(子查询结果)，&lt;any(子查询结果)，&lt;=any（子查询结果)）    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如查询avengers表中fighting_capacity最高的成员时可以使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(fighting_capacity) <span class="keyword">FROM</span> avengers);</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line">| id   | name   | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line">|    9 | 灭霸   | 其他   |             30000 |    3 |</span><br><span class="line">+<span class="comment">------+--------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询fighting_capacity大于所有did为2成员的成员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &gt; <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> fighting_capacity <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> did = <span class="number">2</span>);</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    3 | 觉醒雷神     | 神族   |             23000 |    1 |</span><br><span class="line">|    9 | 灭霸         | 其他   |             30000 |    3 |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询fighting_capacity小于所有did为1成员的成员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> fighting_capacity &lt; <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> fighting_capacity <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> did = <span class="number">1</span>);</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">| id   | name         | race   | fighting_capacity | did  |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br><span class="line">|    1 | 钢铁侠       | 人类   |             15000 |    1 |</span><br><span class="line">|    2 | 幻视         | 其他   |             11000 |    2 |</span><br><span class="line">|    4 | 绿巨人       | 其他   |             13000 |    1 |</span><br><span class="line">|    5 | 猩红女巫     | 人类   |             20000 |    2 |</span><br><span class="line">|    6 | 星爵         | 神族   |              6000 |    2 |</span><br><span class="line">|    7 | 美国队长     | 人类   |             10000 |    1 |</span><br><span class="line">|    8 | 黑豹         | 其他   |             13000 | NULL |</span><br><span class="line">+<span class="comment">------+--------------+--------+-------------------+------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>FROM</code>型</p><p>将子查询当做一张临时的表使用，必须给子查询取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询department表中所有组织成员的平均战斗力（fighting_capacity），注意：要将统计结果当做字段名使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department.did , dname , AVG_fc <span class="keyword">AS</span> <span class="string">&#x27;平均战斗力&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> department <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> did,<span class="keyword">AVG</span>(fighting_capacity) <span class="keyword">AS</span> AVG_fc <span class="keyword">FROM</span> avengers <span class="keyword">GROUP</span> <span class="keyword">BY</span> did) temp</span><br><span class="line"><span class="keyword">ON</span> department.did = temp.did ;</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br><span class="line">| did  | dname            | 平均战斗力      |</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br><span class="line">|    1 | 初代复仇者       |      15250.0000 |</span><br><span class="line">|    2 | 新复仇者         |      12333.3333 |</span><br><span class="line">|    5 | 测试did为5       |            NULL |</span><br><span class="line">| NULL | 测试did为NULL    |            NULL |</span><br><span class="line">+<span class="comment">------+------------------+-----------------+</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>EXISTS</code>型</p><p>用于验证是否匹配子查询的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询拥有员工的组织</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> department</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> did <span class="keyword">FROM</span> avengers <span class="keyword">WHERE</span> avengers.did = department.did);  </span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：不管子查询在哪里，子查询必须使用()括起来</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL的分类&quot;&gt;&lt;a href=&quot;#SQL的分类&quot; class=&quot;headerlink&quot; title=&quot;SQL的分类&quot;&gt;&lt;/a&gt;SQL的分类&lt;/h2&gt;&lt;p&gt;​    根据SQL语句的&lt;strong&gt;作用&lt;/strong&gt;将SQL语句分为&lt;strong&gt;三大类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDL —  数据定义语言（Data Define Language）&lt;a href=&quot;https://ykailh.github.io/2020/08/20/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8BSQL%E8%AF%AD%E6%B3%95(DDL)/&quot;&gt;DDL链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DML — 数据操纵语言（Data Manipulation Language）&lt;/li&gt;
&lt;li&gt;DCL —  数据控制语言（Data Control Language）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本文主要讲解DML&lt;/strong&gt;，DML语句一般用于对&lt;strong&gt;数据&lt;/strong&gt;进行增删改查，对应于&lt;code&gt;INSERT（新增）&lt;/code&gt;、&lt;code&gt;DELETE（删除）&lt;/code&gt;、&lt;code&gt;UPDATE（更新）&lt;/code&gt;、&lt;code&gt;SELECT（查询）&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MySQL基础" scheme="http://yoursite.com/tags/MySQL%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SQL语法" scheme="http://yoursite.com/tags/SQL%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
